bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  preRed);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  preRed);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  preRed);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	replace
2	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  previousCost,  0,  lmPar);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  previousCost,  0,  lmPar);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  previousCost,  0,  lmPar);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	replace
3	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  ratio);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  ratio);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  lmPar,  0,  ratio);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  tmp  =  0.5;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.5;        tmp    =    0.5;    tmp  =  0.5;  tmp  =  0.5;	  	compilable	  [FE]  AssertionFailedError  	26	2	add
5	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  tmp  =  0.5;  tmp  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  tmp  =  0.5;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    tmp  =  0.5;  tmp  =  0.5;	  	compilable	  [FE]  AssertionFailedError  	26	2	add
6	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  double  tmp  =  0.5;  tmp  =  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  double  tmp  =  0.5;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    double  tmp  =  0.5;  tmp  =  0.5;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	26	None	add
7	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  int  tmp  =  0.5;  tmp  =  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  int  tmp  =  0.5;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    int  tmp  =  0.5;  tmp  =  0.5;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	26	None	add
8	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  (tmp  =  0.5;  tmp  =  0.5;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  (tmp  =  0.5;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    (tmp  =  0.5;  tmp  =  0.5;	  	non-compiled	[CE]  ')'  expected	26	None	add
9	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    cost    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	19	None	replace
10	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    cost    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	19	None	replace
11	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  preRed);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  preRed);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  preRed);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	28	None	replace
12	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost,  cost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost,  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost,  cost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	28	None	replace
13	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  permutation);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  permutation);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  permutation);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	28	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer;  tmp  =  0.5;	  tmp    =    0.5;    tmp    =    0.5;    	compilable	  [FE]  AssertionFailedError  	27	7	replace
15	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer;  tmp  =  0.5;	  tmp    =    0.5;    tmp    =    0.5;    	compilable	  [FE]  AssertionFailedError  	27	7	replace
16	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	79	1	add
17	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	79	1	add
18	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  timeout    	compilable	timeout	79	1	add
19	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  timeout    	compilable	timeout	79	1	add
20	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0)||(lmPar  >=  0.5))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0)||(lmPar  >=  0.5))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	79	None	add
21	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >>  0.5))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >>  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >>  0.5))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	79	None	add
22	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.5))  {	  timeout    	compilable	timeout	79	1	add
23	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.5))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.5))  {	  timeout    	compilable	timeout	79	1	add
24	[BUG]  [BUGGY]  double  tmp  =  1;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =  1;	  tmp    =    1;    double    tmp    =    1;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	100	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  	compilable	  [FE]  AssertionFailedError  	43	12	add
26	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  	compilable	  [FE]  AssertionFailedError  	43	12	add
27	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	43	12	add
28	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	43	12	add
29	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	43	None	add
30	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(previousCost  >=  20.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(previousCost  >=  20.0))  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	43	None	add
31	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  double  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  double  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    double  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	43	None	add
32	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	65	1	add
33	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	65	1	add
34	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;	  timeout    	compilable	timeout	65	1	add
35	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;	  timeout    	compilable	timeout	65	1	add
36	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >>  0.0)||(lmPar  <  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >>  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >>  0.0)||(lmPar  <  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	65	None	add
37	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	65	1	add
38	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	65	1	add
39	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  10.0  *  previousCost;	  tmp    =    10.0;    timeout    	compilable	timeout	25	1	replace
40	[BUG]  [BUGGY]  tmp  =  10.0  *  previousCost;  timeout  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  10.0  *  previousCost;	  tmp    =    10.0;    timeout    	compilable	timeout	25	1	replace
41	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	81	1	add
42	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	81	1	add
43	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  timeout    	compilable	timeout	81	1	add
44	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  timeout    	compilable	timeout	81	1	add
45	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0)||(lmPar  >=  0.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0)||(lmPar  >=  0.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	81	None	add
46	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >>  0.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >>  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >>  0.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	81	None	add
47	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.0))  {	  timeout    	compilable	timeout	81	1	add
48	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.0))  {  timeout  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar!=  0.0))  {	  timeout    	compilable	timeout	81	1	add
49	[BUG]  [BUGGY]  double  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =  0.0;	  tmp    =    0.0;    int    tmp    =    0.0;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	74	None	replace
50	[BUG]  [BUGGY]  int  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  int  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	int  tmp  =  0.0;	  tmp    =    0.0;    int    tmp    =    0.0;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	74	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.1;    tmp  =  1.0;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	92	2	add
52	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.0;  tmp  =  1.1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.1;    tmp  =  1.0;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	92	2	add
53	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  double  tmp  =  1.0;  tmp  =  1.1;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  double  tmp  =  1.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.1;    double  tmp  =  1.0;  tmp  =  1.1;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	92	None	add
54	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  int  tmp  =  1.0;  tmp  =  1.1;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  int  tmp  =  1.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.1;    int  tmp  =  1.0;  tmp  =  1.1;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	92	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.1;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.1;    tmp  =  1.1;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	92	2	add
56	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.1;  tmp  =  1.1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.1;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.1;    tmp  =  1.1;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	92	2	add
57	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	94	None	replace
58	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  preRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  preRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  preRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	94	None	replace
59	[BUG]  [BUGGY]  timeout  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmNorm;	  tmp    =    0.5;    (tmp    =    0.5;    	compilable	timeout	88	1	replace
60	[BUG]  [BUGGY]  tmp  =  0.5  *  lmNorm;  timeout  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmNorm;	  tmp    =    0.5;    (tmp    =    0.5;    	compilable	timeout	88	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.min(tmp,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  Math.min(tmp,  previousCost);	  tmp    =    0.0;    (tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	76	6	replace
62	[BUG]  [BUGGY]  tmp  =  Math.min(tmp,  previousCost);  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.min(tmp,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  Math.min(tmp,  previousCost);	  tmp    =    0.0;    (tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	76	6	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.0;	  tmp    =    0.0;    tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	38	12	replace
64	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.0;	  tmp    =    0.0;    tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	38	12	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5    *    dirDer;    tmp  =  0.5  *  dirDer;	  	compilable	  [FE]  AssertionFailedError  	7	2	add
66	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  dirDer;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    dirDer;    tmp  =  0.5  *  dirDer;	  	compilable	  [FE]  AssertionFailedError  	7	2	add
67	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  double  tmp  =  0.5  *  dirDer;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  double  tmp  =  0.5  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    dirDer;    double  tmp  =  0.5  *  dirDer;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	7	None	add
68	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  int  tmp  =  0.5  *  dirDer;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  int  tmp  =  0.5  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    dirDer;    int  tmp  =  0.5  *  dirDer;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	7	None	add
69	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  DirDer;  [CE]  cannot  find  symbol  DirDer  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  DirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    dirDer;    tmp  =  0.5  *  DirDer;	  	non-compiled	[CE]  cannot  find  symbol  DirDer	7	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
71	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
72	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  double  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  double  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    double  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	39	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
74	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  20.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  11.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  11.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
76	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  11.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  11.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  11.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
77	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.max(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
78	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.max(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.max(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0;	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	50	12	replace
80	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	50	12	replace
81	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	50	1	replace
82	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	50	1	replace
83	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  preRed)):  0.5;  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  preRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  preRed)):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  :  expected	23	None	replace
84	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  :  expected	23	None	replace
85	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(preRed    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	18	None	replace
86	[BUG]  [BUGGY]  (tmp  =  0.5);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  (tmp  =  0.5);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	(tmp  =  0.5);	  tmp    =    0.5;    (tmp    =    0.5);    	non-compiled	[CE]  not  a  statement	104	None	replace
87	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	49	1	add
88	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	49	1	add
89	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	49	1	add
90	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	49	1	add
91	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	49	None	add
92	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	49	None	add
93	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	49	None	add
94	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(previousCost    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	109	None	replace
95	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (00.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  (00.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (00.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(previousCost    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	109	None	replace
96	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  actRed):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	3	None	replace
97	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (actRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (actRed  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (actRed  +  0.5  *  actRed):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	3	None	replace
98	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  2;	  tmp    =    1;    tmp    =    2;    	compilable	timeout	102	1	replace
99	[BUG]  [BUGGY]  tmp  =  2;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  2;	  tmp    =    1;    tmp    =    2;    	compilable	timeout	102	1	replace
100	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation  +  1;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  permutation  +  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation  +  1;	  tmp    =    0.5    *    permutation;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
101	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation.doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  permutation.doubleValue();  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation.doubleValue();	  tmp    =    0.5    *    permutation;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
102	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation  *  previousCost;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  permutation  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation  *  previousCost;	  tmp    =    0.5    *    permutation;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0    *    previousCost;    tmp  =  1.0  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	71	2	add
104	[BUG]  [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  previousCost;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0    *    previousCost;    tmp  =  1.0  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	71	2	add
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.1  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0    *    previousCost;    tmp  =  1.1  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	71	2	add
106	[BUG]  [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.1  *  previousCost;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.1  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0    *    previousCost;    tmp  =  1.1  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	71	2	add
107	[BUG]  [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  priorCost;  [CE]  cannot  find  symbol  priorCost  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  priorCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0    *    previousCost;    tmp  =  1.0  *  priorCost;	  timeout    	non-compiled	[CE]  cannot  find  symbol  priorCost	71	None	add
108	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	7	replace
109	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	7	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
111	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
113	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	78	7	replace
115	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	78	7	replace
116	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
117	[BUG]  [BUGGY]  tmp  =  2  *  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
118	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
119	[BUG]  [BUGGY]  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1;  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    2;    tmp  =  1;  tmp  =  2;	  	compilable	  [FE]  AssertionFailedError  	101	2	add
121	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1;  tmp  =  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1;  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    2;    tmp  =  1;  tmp  =  2;	  	compilable	  [FE]  AssertionFailedError  	101	2	add
122	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  2;  double  tmp  =  1;  tmp  =  2;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  2;  double  tmp  =  1;  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    2;    double  tmp  =  1;  tmp  =  2;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	101	None	add
123	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  2;  int  tmp  =  1;  tmp  =  2;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  2;  int  tmp  =  1;  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    2;    int  tmp  =  1;  tmp  =  2;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	101	None	add
124	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1;  tmp  =  2);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1;  tmp  =  2);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    2;    tmp  =  1;  tmp  =  2);	  	non-compiled	[CE]  ';'  expected	101	None	add
125	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5    *    cost;    tmp  =  0.5  *  cost;	  timeout    	compilable	  [FE]  AssertionFailedError  	5	2	add
126	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  cost;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    cost;    tmp  =  0.5  *  cost;	  timeout    	compilable	  [FE]  AssertionFailedError  	5	2	add
127	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  Cost;  [CE]  cannot  find  symbol  Cost  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  Cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    cost;    tmp  =  0.5  *  Cost;	  timeout    	non-compiled	[CE]  cannot  find  symbol  Cost	5	None	add
128	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  coût;  [CE]  cannot  find  symbol  co  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  coût;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    cost;    tmp  =  0.5  *  coût;	  timeout    	non-compiled	[CE]  cannot  find  symbol  co	5	None	add
129	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  costs;  [CE]  cannot  find  symbol  costs  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  costs;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    cost;    tmp  =  0.5  *  costs;	  timeout    	non-compiled	[CE]  cannot  find  symbol  costs	5	None	add
130	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
131	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
132	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	60	7	replace
133	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	60	7	replace
134	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
135	[BUG]  [BUGGY]  tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
136	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	17	None	replace
137	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	106	None	replace
138	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost))  :  0.5;  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost))  :  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	106	None	replace
139	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	106	None	replace
140	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost)):  0.5;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost)):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	106	None	replace
141	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    10.0;    tmp  =  10.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	24	2	add
142	[BUG]  [BUGGY]  tmp  =  10.0;  tmp  =  10.0;  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    tmp  =  10.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	24	2	add
143	[BUG]  [BUGGY]  tmp  =  10.0;  double  tmp  =  10.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  double  tmp  =  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    double  tmp  =  10.0;	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	24	None	add
144	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  11.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    10.0;    tmp  =  11.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	24	2	add
145	[BUG]  [BUGGY]  tmp  =  10.0;  tmp  =  11.0;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  11.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    tmp  =  11.0;	  timeout    	compilable	  [FE]  AssertionFailedError  	24	2	add
146	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  10.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    10.0;    tmp  =  10.5;	  timeout    	compilable	  [FE]  AssertionFailedError  	24	2	add
147	[BUG]  [BUGGY]  tmp  =  10.0;  tmp  =  10.5;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  10.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    tmp  =  10.5;	  timeout    	compilable	  [FE]  AssertionFailedError  	24	2	add
148	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar  +  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmPar  +  10.0;	  tmp    =    0.5    *    lmPar;    	compilable	timeout	108	1	replace
149	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar  +  10.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar  +  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmPar  +  10.0;	  tmp    =    0.5    *    lmPar;    	compilable	timeout	108	1	replace
150	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0  *  cost;	  tmp    =    1.0    *    previousCost;    timeout    	compilable	timeout	72	1	replace
151	[BUG]  [BUGGY]  tmp  =  1.0  *  cost;  timeout  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0  *  cost;	  tmp    =    1.0    *    previousCost;    timeout    	compilable	timeout	72	1	replace
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0  *  dirDer;	  tmp    =    1.0    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	72	12	replace
153	[BUG]  [BUGGY]  tmp  =  1.0  *  dirDer;  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0  *  dirDer;	  tmp    =    1.0    *    previousCost;    timeout    	compilable	  [FE]  AssertionFailedError  	72	12	replace
154	[BUG]  [BUGGY]  tmp  =  1.0  *  permutation;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  permutation;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0  *  permutation;	  tmp    =    1.0    *    previousCost;    timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	72	None	replace
155	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  :  expected	20	None	replace
156	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	2	add
157	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	2	add
158	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  double  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  double  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    double  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	61	None	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	2	add
160	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	2	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	3	add
162	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	3	add
163	[BUG]  [BUGGY]  if(lmPar  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(lmPar  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(lmPar  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
164	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)&&(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)&&(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	compilable	  [FE]  AssertionFailedError  	46	12	replace
165	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)&&(lmPar  <  0.5))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)&&(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)&&(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	compilable	  [FE]  AssertionFailedError  	46	12	replace
166	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  preRed)):  0.5;  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  preRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  preRed)):  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  :  expected	70	None	replace
167	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  :  expected	70	None	replace
168	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  }  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;  }	  tmp    =    1;    tmp    =    1;    }    	non-compiled	[CE]  'else'  without  'if'	103	None	replace
169	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost,  cost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost,  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost,  cost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmPar,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	replace
170	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  preRed);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  preRed);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  preRed);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmPar,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	replace
171	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost,  ratio);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost,  ratio);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost,  ratio);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmPar,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	replace
172	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    tmp  =  1;  tmp  =  1;	  	compilable	  [FE]  AssertionFailedError  	47	2	add
173	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1;  tmp  =  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    tmp  =  1;  tmp  =  1;	  	compilable	  [FE]  AssertionFailedError  	47	2	add
174	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  double  tmp  =  1;  tmp  =  1;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  double  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    double  tmp  =  1;  tmp  =  1;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	47	None	add
175	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  int  tmp  =  1;  tmp  =  1;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  int  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    int  tmp  =  1;  tmp  =  1;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	47	None	add
176	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  2;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    tmp  =  2;  tmp  =  1;	  	compilable	  [FE]  AssertionFailedError  	47	2	add
177	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  2;  tmp  =  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  2;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    tmp  =  2;  tmp  =  1;	  	compilable	  [FE]  AssertionFailedError  	47	2	add
178	[BUG]  [BUGGY]  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
179	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	44	None	replace
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  	compilable	  [FE]  AssertionFailedError  	45	13	add
181	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  	compilable	  [FE]  AssertionFailedError  	45	13	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	45	13	add
183	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	45	13	add
184	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(lmPar  <  0.5))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(lmPar  <  0.5))  {	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	45	None	add
185	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  double  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  double  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    double  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	45	None	add
186	[BUG]  [BUGGY]  tmp  =  0.5  *  preCost;  [CE]  cannot  find  symbol  preCost  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  preCost;	  tmp    =    0.5    *    preRed;    	non-compiled	[CE]  cannot  find  symbol  preCost	11	None	replace
187	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed  +  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  preRed  +  1;	  tmp    =    0.5    *    preRed;    	compilable	timeout	11	1	replace
188	[BUG]  [BUGGY]  tmp  =  0.5  *  preRed  +  1;  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed  +  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  preRed  +  1;	  tmp    =    0.5    *    preRed;    	compilable	timeout	11	1	replace
189	[BUG]  [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  >=  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    >=    0)?    0.5    *    dirDer    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	15	None	replace
190	[BUG]  [BUGGY]  double  tmp  =(previousCost  >>  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  >>  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  >>  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    >=    0)?    0.5    *    dirDer    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	15	None	replace
191	[BUG]  [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  >=  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    >=    0)?    0.5    *    dirDer    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	15	None	replace
192	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer  +  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer  +  10.0;	  tmp    =    0.5    *    dirDer;    	compilable	timeout	8	1	replace
193	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer  +  10.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer  +  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer  +  10.0;	  tmp    =    0.5    *    dirDer;    	compilable	timeout	8	1	replace
194	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer  +  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer  +  previousCost;	  tmp    =    0.5    *    dirDer;    	compilable	timeout	8	1	replace
195	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer  +  previousCost;  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer  +  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer  +  previousCost;	  tmp    =    0.5    *    dirDer;    	compilable	timeout	8	1	replace
196	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(actRed  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	111	None	replace
197	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	111	None	replace
198	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	56	1	replace
199	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	56	1	replace
200	[BUG]  [BUGGY]  (tmp  =  0.0);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  (tmp  =  0.0);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	(tmp  =  0.0);	  tmp    =    0.0;    (tmp    =    0.0);    	non-compiled	[CE]  not  a  statement	75	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5    *    preRed;    tmp  =  0.5  *  preRed;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
202	[BUG]  [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  preRed;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    preRed;    tmp  =  0.5  *  preRed;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
203	[BUG]  [BUGGY]  tmp  =  0.5  *  preRed;  double  tmp  =  0.5  *  preRed;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed;  double  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    preRed;    double  tmp  =  0.5  *  preRed;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	10	None	add
204	[BUG]  [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  PreRed;  [CE]  cannot  find  symbol  PreRed  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  PreRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    preRed;    tmp  =  0.5  *  PreRed;	  	non-compiled	[CE]  cannot  find  symbol  PreRed	10	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5    *    preRed;    tmp  =  0.5  *  previousCost;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
206	[BUG]  [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  previousCost;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  preRed;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    preRed;    tmp  =  0.5  *  previousCost;	  	compilable	  [FE]  AssertionFailedError  	10	2	add
207	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(previousCost  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(previousCost  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(previousCost  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	84	None	replace
208	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(previousCost  +  0.5  *  previousCost):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(previousCost  +  0.5  *  previousCost):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(previousCost  +  0.5  *  previousCost):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	84	None	replace
209	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  preRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  preRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  preRed):  0.5;	  double    tmp    =(preRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
210	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;	  double    tmp    =(preRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
211	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  dirDer):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  dirDer):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  dirDer):  0.5;	  double    tmp    =(preRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
212	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    actRed    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	14	None	replace
213	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(actRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(actRed  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(actRed  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    actRed    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	14	None	replace
214	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	63	1	add
215	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	63	1	add
216	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;	  timeout    	compilable	timeout	63	1	add
217	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;	  timeout    	compilable	timeout	63	1	add
218	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	63	None	add
219	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	63	None	add
220	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	63	1	add
221	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost!=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	63	1	add
222	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
223	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
224	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  double  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  double  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    double  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	55	None	add
225	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
226	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
227	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
228	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
230	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	2	add
231	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0.5    *    lmPar;    tmp  =  0.5  *  lmPar;	  	compilable	  [FE]  AssertionFailedError  	107	2	add
232	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    tmp  =  0.5  *  lmPar;	  	compilable	  [FE]  AssertionFailedError  	107	2	add
233	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  double  tmp  =  0.5  *  lmPar;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  double  tmp  =  0.5  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    double  tmp  =  0.5  *  lmPar;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	107	None	add
234	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  (tmp  =  0.5  *  lmPar;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  (tmp  =  0.5  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    (tmp  =  0.5  *  lmPar;	  	non-compiled	[CE]  ')'  expected	107	None	add
235	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.5        *        previousCost;        tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;	  	compilable	  [FE]  AssertionFailedError  	32	2	add
236	[BUG]  [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5        *        previousCost;        tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;	  	compilable	  [FE]  AssertionFailedError  	32	2	add
237	[BUG]  [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  double  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  double  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5        *        previousCost;        tmp    =    0.5    *    previousCost;    double  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  previousCost;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	32	None	add
238	[BUG]  [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  priorCost;  tmp  =  0.5  *  previousCost;  [CE]  cannot  find  symbol  priorCost  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  priorCost;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5        *        previousCost;        tmp    =    0.5    *    previousCost;    tmp  =  0.5  *  priorCost;  tmp  =  0.5  *  previousCost;	  	non-compiled	[CE]  cannot  find  symbol  priorCost	32	None	add
239	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	11	replace
240	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	11	replace
241	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
242	[BUG]  [BUGGY]  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
243	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
244	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  cost);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
246	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
247	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  double  tmp  =  0.5  *  previousCost;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  double  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer;  double  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    double    tmp    =    0.5    *    previousCost;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	83	None	replace
248	[BUG]  [BUGGY]  tmp  =  0.5  *  prevCost;  double  tmp  =  0.5  *  previousCost;  [CE]  cannot  find  symbol  prevCost  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  prevCost;  double  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  prevCost;  double  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    double    tmp    =    0.5    *    previousCost;    	non-compiled	[CE]  cannot  find  symbol  prevCost	83	None	replace
249	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  priorCost;  [CE]  cannot  find  symbol  priorCost  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  priorCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  cost;  tmp  =  0.5  *  priorCost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	non-compiled	[CE]  cannot  find  symbol  priorCost	34	None	replace
250	[BUG]  [BUGGY]  timeout  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  cost;  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	compilable	timeout	34	1	replace
251	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  previousCost;  timeout  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  cost;  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	compilable	timeout	34	1	replace
252	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  cost;  tmp  =  0.5  *  preRed;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	compilable	  [FE]  AssertionFailedError  	34	6	replace
253	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  preRed;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  cost;  tmp  =  0.5  *  preRed;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	compilable	  [FE]  AssertionFailedError  	34	6	replace
254	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	compilable	timeout	34	1	replace
255	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  cost;  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    priorCost;    	compilable	timeout	34	1	replace
256	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	compilable	timeout	33	1	replace
257	[BUG]  [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  cost;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	compilable	timeout	33	1	replace
258	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	compilable	timeout	33	1	replace
259	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  previousCost;  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer;  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	compilable	timeout	33	1	replace
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  preRed;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	compilable	  [FE]  AssertionFailedError  	33	6	replace
261	[BUG]  [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  preRed;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  preRed;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  previousCost;  tmp  =  0.5  *  preRed;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	compilable	  [FE]  AssertionFailedError  	33	6	replace
262	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  dirDer):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  dirDer):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  dirDer):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	13	None	replace
263	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  previousCost):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  previousCost):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  previousCost):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	13	None	replace
264	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(preRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(preRed  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(preRed  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	13	None	replace
265	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
266	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
267	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  double  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  double  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    double  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	41	None	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
269	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
270	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
271	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
272	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
273	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  11.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
274	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
275	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.0;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
276	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  double  tmp  =  1.0;  tmp  =  1.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  double  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    double  tmp  =  1.0;  tmp  =  1.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	57	None	add
277	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  int  tmp  =  1.0;  tmp  =  1.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  int  tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    int  tmp  =  1.0;  tmp  =  1.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	57	None	add
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
279	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
280	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.max(tmp,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  Math.max(tmp,  previousCost);	  tmp    =    0;    	compilable	timeout	36	1	replace
281	[BUG]  [BUGGY]  tmp  =  Math.max(tmp,  previousCost);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.max(tmp,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  Math.max(tmp,  previousCost);	  tmp    =    0;    	compilable	timeout	36	1	replace
282	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	85	None	replace
283	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  dirDer):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  dirDer):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  dirDer):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	85	None	replace
284	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	85	None	replace
285	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	62	1	replace
286	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	62	1	replace
287	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	62	1	replace
288	[BUG]  [BUGGY]  tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmNorm;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	62	1	replace
289	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  preRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  preRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  preRed))  :  0.5;	  double    tmp    =(preRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	68	None	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.0;  tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
291	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =  0.00;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.0;  tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.0;  tmp  =.00;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
293	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =.00;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.0;  tmp  =.00;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
294	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  double  tmp  =  0.0;  tmp  =  0.00;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  double  tmp  =  0.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.00;    double  tmp  =  0.0;  tmp  =  0.00;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	95	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.00;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.00;  tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
296	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.00;  tmp  =  0.00;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.00;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.00;  tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =  0.000;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.0;  tmp  =  0.000;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
298	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =  0.000;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;  tmp  =  0.000;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.00;    tmp  =  0.0;  tmp  =  0.000;	  	compilable	  [FE]  AssertionFailedError  	95	2	add
299	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
300	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
301	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  double  tmp  =  0.0;  tmp  =  1.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  double  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    1.0;    double  tmp  =  0.0;  tmp  =  1.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	97	None	add
302	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  int  tmp  =  0.0;  tmp  =  1.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  int  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    1.0;    int  tmp  =  0.0;  tmp  =  1.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	97	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.00;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    1.0;    tmp  =  0.00;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
304	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.00;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.00;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    1.0;    tmp  =  0.00;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
306	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
307	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  double  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  double  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    double  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	59	None	add
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
309	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  20.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  20.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  20.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
311	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.max(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
312	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  10.0;  tmp  =  1.0;	  tmp    =    0.0;    tmp    =    1.0;    	compilable	timeout	98	1	replace
313	[BUG]  [BUGGY]  tmp  =  10.0;  tmp  =  1.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  10.0;  tmp  =  1.0;	  tmp    =    0.0;    tmp    =    1.0;    	compilable	timeout	98	1	replace
314	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  tmp,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  tmp,  0,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  tmp,  0,  previousCost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmDer,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	30	None	replace
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
316	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
317	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  double  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  double  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    double  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	77	None	add
318	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
319	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
320	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  3  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  3  *  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
321	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  3  *  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  3  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  3  *  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
322	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  preRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  preRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  preRed))  :  0.5;	  double    tmp    =(preRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	16	None	replace
323	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
324	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
325	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  double  tmp  =  1.0;  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  double  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    0.0;    double  tmp  =  1.0;  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	90	None	add
326	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  int  tmp  =  1.0;  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  int  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    0.0;    int  tmp  =  1.0;  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	90	None	add
327	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
328	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.00;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.00;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
329	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (actRed  +  0.5  *  preRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (actRed  +  0.5  *  preRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  dirDer  /  (actRed  +  0.5  *  preRed):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    preRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	4	None	replace
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
331	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
332	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  double  tmp  =  0.0;  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  double  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    double  tmp  =  0.0;  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	37	None	add
333	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  int  tmp  =  0.0;  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  int  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    int  tmp  =  0.0;  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	37	None	add
334	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    tmp  =  0.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
335	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    tmp  =  0.0;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
337	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  1.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
338	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	53	1	add
339	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	53	1	add
340	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  timeout    	compilable	timeout	53	1	add
341	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  timeout    	compilable	timeout	53	1	add
342	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >>  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
343	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	53	1	add
344	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	compilable	timeout	53	1	add
345	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost  >=  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
346	[BUG]  [BUGGY]  double  tmp  =  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =  0.5;	  tmp    =    0.5;    int    tmp    =    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	87	None	replace
347	[BUG]  [BUGGY]  int  tmp  =  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  int  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	int  tmp  =  0.5;	  tmp    =    0.5;    int    tmp    =    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	87	None	replace
348	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5);	  tmp    =    1;    tmp    =    1);    	non-compiled	[CE]  ';'  expected	99	None	replace
349	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	51	1	add
350	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;	  timeout    	compilable	timeout	51	1	add
351	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	51	1	add
352	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	51	1	add
353	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(lmPar  <  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(lmPar  <  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	51	None	add
354	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	51	None	add
355	[BUG]  [BUGGY]  timeout  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	51	1	add
356	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost!=  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	51	1	add
357	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /  (dirDer  +  0.5  *  costRelativeTolerance):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    costRelativeTolerance):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	2	None	replace
358	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(previousCost    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	110	None	replace
359	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  dirDer))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  dirDer))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  dirDer))  :  0.5;	  double    tmp    =(previousCost    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	110	None	replace
360	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmNorm));  [CE]  no  suitable  method  found  for  min(double)  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmNorm));  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmNorm));	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	35	None	add
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    0;    tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  	compilable	  [FE]  AssertionFailedError  	35	13	add
362	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  	compilable	  [FE]  AssertionFailedError  	35	13	add
363	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmDer));  [CE]  cannot  find  symbol  lmDer  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmDer));  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmDer));	  	non-compiled	[CE]  cannot  find  symbol  lmDer	35	None	add
364	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmRed));  [CE]  cannot  find  symbol  lmRed  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmRed));  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    tmp  =  0;  previousCost  =  Math.min(lmPar  *  Math.min(lmNorm,  10.0  *  lmRed));	  	non-compiled	[CE]  cannot  find  symbol  lmRed	35	None	add
365	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;	  tmp    =    1.0;    tmp    =    1.0;    	compilable	timeout	58	1	replace
366	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;	  tmp    =    1.0;    tmp    =    1.0;    	compilable	timeout	58	1	replace
367	[BUG]  [BUGGY]  double  tmp  =  1.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =  1.0;	  tmp    =    1.0;    double    tmp    =    1.0;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	89	None	replace
368	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	105	None	replace
369	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  cost  /(dirDer  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(previousCost    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	112	None	replace
370	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost))  :  0.5;  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  previousCost))  :  0.5;	  double    tmp    =(previousCost    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	112	None	replace
371	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  double  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  double  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    double  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	63	None	add
372	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  Tmp  =  1.0;  tmp  =  1.0;  [CE]  cannot  find  symbol  Tmp  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  Tmp  =  1.0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    Tmp  =  1.0;  tmp  =  1.0;	  	non-compiled	[CE]  cannot  find  symbol  Tmp	57	None	add
373	[BUG]  [BUGGY]  tmp  =  10.0;  int  tmp  =  10.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  int  tmp  =  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    int  tmp  =  10.0;	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	24	None	add
374	[BUG]  [BUGGY]  tmp  =  10.0;  (tmp  =  10.0;  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  (tmp  =  10.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    (tmp  =  10.0;	  timeout    	non-compiled	[CE]  ')'  expected	24	None	add
375	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  preRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  preRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  preRed  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  :  expected	70	None	replace
376	[BUG]  [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
377	[BUG]  [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
378	[BUG]  [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  lmPar  >=  0)||(lmPar  <  0.5))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  lmPar  >=  0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  lmPar  >=  0)||(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  2  *  lmPar;	  tmp    =    0.5    *    lmPar;    	compilable	  [FE]  AssertionFailedError  	108	11	replace
380	[BUG]  [BUGGY]  tmp  =  2  *  lmPar;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  2  *  lmPar;	  tmp    =    0.5    *    lmPar;    	compilable	  [FE]  AssertionFailedError  	108	11	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  10.0  *  lmPar;	  tmp    =    0.5    *    lmPar;    	compilable	  [FE]  AssertionFailedError  	108	11	replace
382	[BUG]  [BUGGY]  tmp  =  10.0  *  lmPar;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  10.0  *  lmPar;	  tmp    =    0.5    *    lmPar;    	compilable	  [FE]  AssertionFailedError  	108	11	replace
383	[BUG]  [BUGGY]  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	64	1	replace
384	[BUG]  [BUGGY]  tmp  =  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	64	1	replace
385	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	64	1	replace
386	[BUG]  [BUGGY]  tmp  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	64	1	replace
387	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	3	add
388	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	3	add
389	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost)):  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost)):  0.5;	  double    tmp    =(previousCost    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	112	None	replace
390	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(previousCost    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	112	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  30.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  30.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
392	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  30.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  30.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  30.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	59	3	add
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1;  tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1;  tmp  =  0;	  tmp    =    1;    tmp    =    1);    	compilable	  [FE]  AssertionFailedError  	99	12	replace
394	[BUG]  [BUGGY]  tmp  =  1;  tmp  =  0;  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1;  tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1;  tmp  =  0;	  tmp    =    1;    tmp    =    1);    	compilable	  [FE]  AssertionFailedError  	99	12	replace
395	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.00;	  tmp    =    0.0;    tmp    =    0.00;    	compilable	  [FE]  AssertionFailedError  	96	12	replace
396	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.00;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.00;	  tmp    =    0.0;    tmp    =    0.00;    	compilable	  [FE]  AssertionFailedError  	96	12	replace
397	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0;  tmp  =  0.00;	  tmp    =    0.0;    tmp    =    0.00;    	compilable	  [FE]  AssertionFailedError  	96	12	replace
398	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  0.00;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  0.00;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;  tmp  =  0.00;	  tmp    =    0.0;    tmp    =    0.00;    	compilable	  [FE]  AssertionFailedError  	96	12	replace
399	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  (tmp  =  0.5  *  dirDer;  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  (tmp  =  0.5  *  dirDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    dirDer;    (tmp  =  0.5  *  dirDer;	  	non-compiled	[CE]  ')'  expected	7	None	add
400	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  0.5  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  0.5  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	62	1	replace
401	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  0.5  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  0.5  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  0.5  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	62	1	replace
402	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  Tmp  =  1.0;  tmp  =  1.1;  [CE]  cannot  find  symbol  Tmp  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  Tmp  =  1.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.1;    Tmp  =  1.0;  tmp  =  1.1;	  	non-compiled	[CE]  cannot  find  symbol  Tmp	92	None	add
403	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  (  previousCost  >=  0)||(lmPar  >=  0.5))  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  (  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    (  previousCost  >=  0)||(lmPar  >=  0.5))  {	  timeout    	non-compiled	[CE]  not  a  statement	79	None	add
404	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	79	None	add
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
406	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
407	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(previousCost  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	12	replace
408	[BUG]  [BUGGY]  if(previousCost  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	12	replace
409	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
410	[BUG]  [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	14	replace
411	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  {  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  {  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	12	replace
412	[BUG]  [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  {  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  {  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  {  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	12	replace
413	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  lmPar  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  lmPar  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	3	add
414	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  lmPar  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  lmPar  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  lmPar  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	3	add
415	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.00;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
416	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.00;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.00;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    tmp  =  0.00;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	37	2	add
417	[BUG]  [BUGGY]  tmp  =  1.0;  (tmp  =  0.0);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  (tmp  =  0.0);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;  (tmp  =  0.0);	  tmp    =    0.0;    (tmp    =    0.0);    	non-compiled	[CE]  not  a  statement	75	None	replace
418	[BUG]  [BUGGY]  tmp  =  0.5;  (tmp  =  0.0);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  (tmp  =  0.0);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  (tmp  =  0.0);	  tmp    =    0.0;    (tmp    =    0.0);    	non-compiled	[CE]  not  a  statement	75	None	replace
419	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	3	add
420	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	3	add
421	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  10.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  10.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  10.5  *  dirDer  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	21	None	replace
422	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  preRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  preRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  preRed  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    preRed))    :    0.5;    	non-compiled	[CE]  :  expected	23	None	replace
423	[BUG]  [BUGGY]  if(lmPar  >  0.0)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(lmPar  >  0.0)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(lmPar  >  0.0)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
424	[BUG]  [BUGGY]  if(lmPar  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(lmPar  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(lmPar  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
425	[BUG]  [BUGGY]  if(lmPar  >  0.0)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)&&(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(lmPar  >  0.0)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)&&(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(lmPar  >  0.0)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)&&(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
426	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance)):  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance)):  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  :  expected	67	None	replace
427	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost!=  1.0))  {  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >>  0.0)||(previousCost!=  1.0))  {	  timeout    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	53	None	add
428	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	53	None	add
429	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  (0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(preRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	16	None	replace
430	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  2.0;	  tmp    =    10.0;    timeout    	compilable	timeout	25	1	replace
431	[BUG]  [BUGGY]  tmp  =  2.0;  timeout  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  2.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  2.0;	  tmp    =    10.0;    timeout    	compilable	timeout	25	1	replace
432	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  cost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  cost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  tmp,  0,  cost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmPar,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	replace
433	[BUG]  [BUGGY]  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  System.arraycopy(lmPar,  0,  tmp,  0,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	System.arraycopy(lmPar,  0,  tmp,  0,  previousCost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmPar,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	29	None	replace
434	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  Tmp  =  0.5;  tmp  =  0.5;  [CE]  cannot  find  symbol  Tmp  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  Tmp  =  0.5;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    Tmp  =  0.5;  tmp  =  0.5;	  	non-compiled	[CE]  cannot  find  symbol  Tmp	26	None	add
435	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
436	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  0.0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    0.0;    tmp  =  0.0;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
437	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  costRelativeTolerance):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  costRelativeTolerance):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (preRed  +  0.5  *  costRelativeTolerance):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    costRelativeTolerance):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	2	None	replace
438	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost  +  1);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost  +  1);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost  +  1);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	28	None	replace
439	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  (  previousCost  >=  0)||(lmPar  >=  0.0))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  (  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    (  previousCost  >=  0)||(lmPar  >=  0.0))  {	  timeout    	non-compiled	[CE]  not  a  statement	81	None	add
440	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    double  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	81	None	add
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
442	[BUG]  [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
443	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	50	7	replace
444	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	50	7	replace
445	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  previousCost):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	85	None	replace
446	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  preRed  /  (dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  preRed  /  (dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  preRed  /  (dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    preRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	4	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	  [FE]  AssertionFailedError  	80	12	replace
448	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	  [FE]  AssertionFailedError  	80	12	replace
449	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	  [FE]  AssertionFailedError  	80	7	replace
450	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	  [FE]  AssertionFailedError  	80	7	replace
451	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	82	7	replace
452	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	82	7	replace
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	82	12	replace
454	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	82	12	replace
455	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(dirDer  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(dirDer  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	82	12	replace
456	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(dirDer  >=  0.0))  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(dirDer  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0)||(dirDer  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	82	12	replace
457	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  int  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  int  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    int  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	39	None	add
458	[BUG]  [BUGGY]  tmp  =  0;  double  tmp  =  0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  double  tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    double  tmp  =  0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	35	None	add
459	[BUG]  [BUGGY]  tmp  =  0;  int  tmp  =  0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  int  tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    int  tmp  =  0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	35	None	add
460	[BUG]  [BUGGY]  tmp  =  0;  (tmp  =  0;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  (tmp  =  0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    (tmp  =  0;	  	non-compiled	[CE]  ')'  expected	35	None	add
461	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
462	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
463	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
464	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
465	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  (  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  (  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    (  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	non-compiled	[CE]  not  a  statement	51	None	add
466	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  previousCost):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  previousCost):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  previousCost):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	13	None	replace
467	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  preRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  preRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  preRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	13	None	replace
468	[BUG]  [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
469	[BUG]  [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >=  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
470	[BUG]  [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >>  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
471	[BUG]  [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(previousCost  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >>  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
472	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  0.0  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp    =    1.0    *    previousCost;    tmp  =  0.0  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	71	2	add
473	[BUG]  [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  0.0  *  previousCost;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  0.0  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0    *    previousCost;    tmp  =  0.0  *  previousCost;	  timeout    	compilable	  [FE]  AssertionFailedError  	71	2	add
474	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(preRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	68	None	replace
475	[BUG]  [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance)):  0.5;  [CE]  :  expected  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance)):  0.5;	  double    tmp    =(preRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	68	None	replace
476	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  double  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  double  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    double  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  timeout    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	65	None	add
477	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  double  tmp  =  0.0;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  double  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    double  tmp  =  0.0;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	43	None	add
478	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  	non-compiled	[CE]  illegal  start  of  expression	43	None	add
479	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  lmPar,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  lmPar,  0,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  lmPar,  0,  previousCost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	replace
480	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  previousCost,  0,  lmNorm);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  previousCost,  0,  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  previousCost,  0,  lmNorm);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	replace
481	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.5  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.5  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
482	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.5  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.5  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.5  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
483	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  2.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  2.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
484	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  2.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  2.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  2.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
485	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.1  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.1  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
486	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.1  *  lmNorm);  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.1  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  0.1  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
487	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation  *  cost;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  permutation  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation  *  cost;	  tmp    =    0.5    *    permutation;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
488	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation  *  CostRelativeTolerance;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  permutation  *  CostRelativeTolerance;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation  *  CostRelativeTolerance;	  tmp    =    0.5    *    permutation;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
489	[BUG]  [BUGGY]  double  tmp  =(actRed  >=  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  >=  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  >=  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    >=    0)?    0.5    *    dirDer    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	15	None	replace
490	[BUG]  [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  permutation  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  >=  0)?  0.5  *  permutation  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  >=  0)?  0.5  *  permutation  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    >=    0)?    0.5    *    dirDer    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	15	None	replace
491	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance)):  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance)):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  :  expected	20	None	replace
492	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  (  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  (  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    (  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  	non-compiled	[CE]  not  a  statement	45	None	add
493	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  previousCost  /(actRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  previousCost  /(actRed  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  previousCost  /(actRed  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    actRed    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	14	None	replace
494	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  actRed  /(preRed  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    actRed    /(actRed    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	14	None	replace
495	[BUG]  [BUGGY]  double  tmp  =  0.5  *  previousCost;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =  0.5  *  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =  0.5  *  previousCost;	  tmp    =    0.5    *    previousCost;    double    tmp    =    0.5    *    previousCost;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	83	None	replace
496	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  int  tmp  =  0.5  *  lmPar;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  int  tmp  =  0.5  *  lmPar;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    int  tmp  =  0.5  *  lmPar;	  	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	107	None	add
497	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
498	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	77	3	add
499	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1);  tmp  =  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1);  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    tmp  =  1);  tmp  =  1;	  	non-compiled	[CE]  ';'  expected	47	None	add
500	[BUG]  [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  ==  0)?  0.5  *  actRed  /(dirDer  +  0.5  *  actRed)):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	106	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	54	7	replace
502	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [FE]  AssertionFailedError  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	54	7	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	56	12	replace
504	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	56	12	replace
505	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  actRed)):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  actRed)):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  actRed)):  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(previousCost    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	109	None	replace
506	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(preRed  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	17	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0.0;	  tmp    =    0.0;    tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	38	12	replace
508	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0.0;	  tmp    =    0.0;    tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	38	12	replace
509	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1);  tmp  =  2;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  2;  tmp  =  1);  tmp  =  2;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    2;    tmp  =  1);  tmp  =  2;	  	non-compiled	[CE]  ';'  expected	101	None	add
510	[BUG]  [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(preRed  ==  0)?  0.5  *  actRed  /  (dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(preRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	1	None	replace
511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }	  	compilable	  [FE]  AssertionFailedError  	26	7	add
512	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  2  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }	  	compilable	  [FE]  AssertionFailedError  	26	7	add
513	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }	  	compilable	  [FE]  AssertionFailedError  	26	2	add
514	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }	  	compilable	  [FE]  AssertionFailedError  	26	2	add
515	[BUG]  [BUGGY]  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.max(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.max(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }	  	compilable	timeout	26	1	add
516	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.max(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  timeout  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.max(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  else  {  delta  =  1  *  Math.max(delta,  10.0  *  lmNorm);  tmp  =  0.5;  }	  	compilable	timeout	26	1	add
517	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }	  	compilable	  [FE]  AssertionFailedError  	26	2	add
518	[BUG]  [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.5;    tmp  =  0.5;  if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.5;        tmp    =    0.5;    if(tmp  <  0.5)  {  tmp  =  0.5;  tmp  =  0.5;  }	  	compilable	  [FE]  AssertionFailedError  	26	2	add
519	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
520	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(lmPar  <  0.5))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(lmPar    <    0.5))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
521	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  :  expected	20	None	replace
522	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer;  (tmp  =  0.5  *  dirDer);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer;  (tmp  =  0.5  *  dirDer);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    dirDer;    (tmp  =  0.5  *  dirDer);	  	non-compiled	[CE]  not  a  statement	7	None	add
523	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
524	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  this.lmPar  =  2  *  Math.max(delta,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    2    *    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	78	1	replace
525	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
526	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
527	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	compilable	timeout	66	1	replace
528	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	compilable	timeout	66	1	replace
529	[BUG]  [BUGGY]  double  tmp  =  0.5  *  cost;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =  0.5  *  cost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =  0.5  *  cost;	  tmp    =    0.5    *    previousCost;    double    tmp    =    0.5    *    previousCost;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	83	None	replace
530	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
531	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	timeout	80	1	replace
532	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	timeout	80	1	replace
533	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	timeout	80	1	replace
534	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.5))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.5))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.5))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.5))    {    timeout    	compilable	timeout	80	1	replace
535	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	56	5	replace
536	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	56	5	replace
537	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	56	1	replace
538	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    1;    tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	timeout	56	1	replace
539	[BUG]  [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  previousCost.toString();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  *  previousCost;  tmp  =  1.0  *  previousCost.toString();  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    1.0    *    previousCost;    tmp  =  1.0  *  previousCost.toString();	  timeout    	non-compiled	[CE]  double  cannot  be  dereferenced	71	None	add
540	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  tmp,  0,  preRed);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  tmp,  0,  preRed);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(dirDer,  0,  tmp,  0,  preRed);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(lmDer,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	30	None	replace
541	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  lmPar,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  lmPar,  0,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmPar,  0,  lmPar,  0,  previousCost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	31	None	replace
542	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmDer,  0,  lmPar,  0,  previousCost);  [CE]  cannot  find  symbol  lmDer  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmDer,  0,  lmPar,  0,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  System.arraycopy(lmDer,  0,  lmPar,  0,  previousCost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    lmPar,    0,    previousCost);    	non-compiled	[CE]  cannot  find  symbol  lmDer	31	None	replace
543	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	62	5	replace
544	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	62	5	replace
545	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  2.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  2.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	2	add
546	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  2.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1.0;  tmp  =  2.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1.0;  tmp  =  2.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	61	2	add
547	[BUG]  [BUGGY]  tmp  =  0.5  *  prevCost;  tmp  =  0.5  *  prevCost;  [CE]  cannot  find  symbol  prevCost  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  prevCost;  tmp  =  0.5  *  prevCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  prevCost;  tmp  =  0.5  *  prevCost;	  tmp    =    0.5    *    previousCost;    tmp    =    0.5    *    previousCost;    	non-compiled	[CE]  cannot  find  symbol  prevCost	33	None	replace
548	[BUG]  [BUGGY]  double  tmp  =(actRed  >=  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  >=  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  >=  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed))  :  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /(preRed    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	21	None	replace
549	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
550	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	compilable	timeout	52	1	replace
551	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	compilable	timeout	52	1	replace
552	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	52	12	replace
553	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [FE]  AssertionFailedError  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	compilable	  [FE]  AssertionFailedError  	52	12	replace
554	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
555	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
556	[BUG]  [BUGGY]  if(tmp  >  1.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  1.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  1.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
557	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
558	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
559	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  1.0;  tmp  =  0.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	97	2	add
560	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1.0;	  tmp    =    0.0;    tmp    =    1.0;    	compilable	timeout	98	1	replace
561	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1.0;	  tmp    =    0.0;    tmp    =    1.0;    	compilable	timeout	98	1	replace
562	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRed))  :  0.5;  [CE]  :  expected  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRed))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  costRed))  :  0.5;	  double    tmp    =(previousCost    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    actRed))    :    0.5;    	non-compiled	[CE]  :  expected	112	None	replace
563	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  (0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	17	None	replace
564	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  (0.5  *  dirDer  /(dirDer  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    <    0)?    (0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	17	None	replace
565	[BUG]  [BUGGY]  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  System.arraycopy(previousCost,  0,  tmp,  0,  previousCost);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	System.arraycopy(previousCost,  0,  tmp,  0,  previousCost);	  tmp    =    0.5;    tmp    =    0.5;    System.arraycopy(previousCost,    0,    tmp,    0,    previousCost);    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	28	None	replace
566	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	60	5	replace
567	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	60	5	replace
568	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  1.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  1.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
569	[BUG]  [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  1.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  1.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  1.0  *  lmNorm);	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	60	1	replace
570	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  IllegalArgumentException  	60	14	replace
571	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tmp    =    1.0;    tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  IllegalArgumentException  	60	14	replace
572	[BUG]  [BUGGY]  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmNorm;  tmp  =  1.0;	  tmp    =    1.0;    tmp    =    1.0;    	compilable	timeout	58	1	replace
573	[BUG]  [BUGGY]  tmp  =  0.5  *  lmNorm;  tmp  =  1.0;  timeout  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmNorm;  tmp  =  1.0;	  tmp    =    1.0;    tmp    =    1.0;    	compilable	timeout	58	1	replace
574	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1,  tmp  =  1;  tmp  =  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  tmp  =  1,  tmp  =  1;  tmp  =  1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    tmp  =  1,  tmp  =  1;  tmp  =  1;	  	non-compiled	[CE]  ';'  expected	47	None	add
575	[BUG]  [BUGGY]  tmp  =  0.5  *  lmNorm;  (tmp  =  0.5);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  (tmp  =  0.5);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmNorm;  (tmp  =  0.5);	  tmp    =    0.5;    (tmp    =    0.5);    	non-compiled	[CE]  not  a  statement	104	None	replace
576	[BUG]  [BUGGY]  tmp  =  10.0;  (tmp  =  10.0);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  10.0;  (tmp  =  10.0);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    10.0;    (tmp  =  10.0);	  timeout    	non-compiled	[CE]  not  a  statement	24	None	add
577	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
578	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
579	[BUG]  [BUGGY]  timeout  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	timeout	82	1	replace
580	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  timeout  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)||(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	timeout	82	1	replace
581	[BUG]  [BUGGY]  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	timeout	82	1	replace
582	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.0))  {  timeout  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  1;  }  else  if((  previousCost  >=  0)&&(lmPar  >=  0.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0)||(lmPar    >=    0.0))    {    timeout    	compilable	timeout	82	1	replace
583	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	3	add
584	[BUG]  [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1;    tmp  =  1;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1;        tmp    =    1;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  1;  tmp  =  1;  this.lmPar  =  Math.max(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	55	3	add
585	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.00;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.00;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
586	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.00;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.00;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.00;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	41	2	add
587	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
588	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
589	[BUG]  [BUGGY]  if(tmp  >  1.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  1.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  1.0)  {  tmp  =  1;  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
590	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1;  }  else  if((  previousCost  >=  0.0)||(previousCost!=  1.0))  {	  tmp    =    1;    tmp    =    1;    }    else    if((    previousCost    >=    0.0)||(previousCost!=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	11	replace
592	[BUG]  [BUGGY]  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	40	11	replace
593	[BUG]  [BUGGY]  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	40	1	replace
594	[BUG]  [BUGGY]  tmp  =  1.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  timeout  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    	compilable	timeout	40	1	replace
595	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
596	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
597	[BUG]  [BUGGY]  if(tmp  >  1.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  1.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  1.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
598	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  0.0;  }  else  if((  previousCost  >=  10.0)||(previousCost  >=  20.0))  {	  tmp    =    0.0;    tmp    =    0.0;    }    else    if((    previousCost    >=    10.0)||(previousCost    >=    20.0))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
599	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer  +  costRelativeTolerance;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  dirDer  +  costRelativeTolerance;	  tmp    =    0.5    *    dirDer;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
600	[BUG]  [BUGGY]  tmp  =  0.5  *  dirDer  +  costRelativeTolerance;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  dirDer  +  costRelativeTolerance;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  dirDer  +  costRelativeTolerance;	  tmp    =    0.5    *    dirDer;    	compilable	  [FE]  AssertionFailedError  	8	12	replace
601	[BUG]  [BUGGY]  tmp  =  0.5  *  lmDer;  [CE]  cannot  find  symbol  lmDer  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmDer;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmDer;	  tmp    =    0.5    *    dirDer;    	non-compiled	[CE]  cannot  find  symbol  lmDer	8	None	replace
602	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  0.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.1;    tmp  =  0.0;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	92	2	add
603	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  0.0;  tmp  =  1.1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.1;  tmp  =  0.0;  tmp  =  1.1;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.1;    tmp  =  0.0;  tmp  =  1.1;	  	compilable	  [FE]  AssertionFailedError  	92	2	add
604	[BUG]  [BUGGY]  timeout  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  /  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  1.0  /  previousCost;	  tmp    =    1.0    *    previousCost;    timeout    	compilable	timeout	72	1	replace
605	[BUG]  [BUGGY]  tmp  =  1.0  /  previousCost;  timeout  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  1.0  /  previousCost;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  1.0  /  previousCost;	  tmp    =    1.0    *    previousCost;    timeout    	compilable	timeout	72	1	replace
606	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  [CE]  'else'  without  'if'  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  0.5;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  0.5;  }	  tmp    =    1;    tmp    =    1;    }    	non-compiled	[CE]  'else'  without  'if'	103	None	replace
607	[BUG]  [BUGGY]  tmp  =  0;  (tmp  =  0);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  (tmp  =  0);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0;    (tmp  =  0);	  	non-compiled	[CE]  not  a  statement	35	None	add
608	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
609	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
610	[BUG]  [BUGGY]  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	64	1	replace
611	[BUG]  [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  timeout  [FE]                        AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5;  tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(previousCost  >=  1.0))  {	  tmp    =    1.0;    tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(previousCost    >=    1.0))    {    timeout    	compilable	timeout	64	1	replace
612	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }	  tmp    =    0.0;    (tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	76	12	replace
613	[BUG]  [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.0)  {  tmp  =  0.0;  tmp  =  0.0;  }	  tmp    =    0.0;    (tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	76	12	replace
614	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }	  tmp    =    0.0;    (tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	76	5	replace
615	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  }	  tmp    =    0.0;    (tmp    =    0.0;    	compilable	  [FE]  AssertionFailedError  	76	5	replace
616	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.1;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
617	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.1;  tmp  =  1.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  tmp  =  1.1;  tmp  =  1.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    tmp  =  1.1;  tmp  =  1.0;	  	compilable	  [FE]  AssertionFailedError  	57	2	add
618	[BUG]  [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  COMMA;  [CE]  cannot  find  symbol  COMMA  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  cost;  tmp  =  0.5  *  COMMA;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    cost;    tmp  =  0.5  *  COMMA;	  timeout    	non-compiled	[CE]  cannot  find  symbol  COMMA	5	None	add
619	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	5	replace
620	[BUG]  [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	if(tmp  >  0.5)  {  tmp  =  0.0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  }	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	5	replace
621	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
622	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0.0;  this.lmPar  =  Math.min(lmPar,  10.0  *  lmNorm);	  tmp    =    0.0;    tmp    =    0.0;    this.lmPar    =    Math.min(lmPar,    10.0    *    lmNorm);    	compilable	  [FE]  AssertionFailedError  	42	12	replace
623	[BUG]  [BUGGY]  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  <  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  <  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	65	1	add
624	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  <  0.0)||(lmPar  <  1.0))  {  timeout  [FE]                      AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  }  else  if((  previousCost  >=  0.0)||(lmPar  <  1.0))  {  tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  <  0.0)||(lmPar  <  1.0))  {  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    }    else    if((    previousCost    >=    0.0)||(lmPar    <    1.0))    {    tmp  =  1.0;  tmp  =  1.0;  }  else  if((  previousCost  <  0.0)||(lmPar  <  1.0))  {	  timeout    	compilable	timeout	65	1	add
625	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp  =  0.5  *  lmNorm;  tmp  =  0.5;	  tmp    =    0.5;    tmp    =    0.5;    	compilable	  [FE]  AssertionFailedError  	27	7	replace
626	[BUG]  [BUGGY]  tmp  =  0.5  *  lmNorm;  tmp  =  0.5;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmNorm;  tmp  =  0.5;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  lmNorm;  tmp  =  0.5;	  tmp    =    0.5;    tmp    =    0.5;    	compilable	  [FE]  AssertionFailedError  	27	7	replace
627	[BUG]  [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;  [CE]  :  expected  [FE]            AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  <  0)?  0.5  *  dirDer  /(previousCost  +  0.5  *  costRelativeTolerance))  :  0.5;	  double    tmp    =(actRed    <    0)?    0.5    *    dirDer    /(dirDer    +    0.5    *    costRelativeTolerance))    :    0.5;    	non-compiled	[CE]  :  expected	67	None	replace
628	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar.min(delta,  10.0  *  lmNorm);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar.min(delta,  10.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    tmp  =  0.5  *  lmPar.min(delta,  10.0  *  lmNorm);	  	non-compiled	[CE]  double  cannot  be  dereferenced	107	None	add
629	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar.min(delta,  10.0  *  lmPar);  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar.min(delta,  10.0  *  lmPar);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    tmp  =  0.5  *  lmPar.min(delta,  10.0  *  lmPar);	  	non-compiled	[CE]  double  cannot  be  dereferenced	107	None	add
630	[BUG]  [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar.min(lmNorm,  10.0  *  lmPar);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  lmPar;  tmp  =  0.5  *  lmPar.min(lmNorm,  10.0  *  lmPar);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp    =    0.5    *    lmPar;    tmp  =  0.5  *  lmPar.min(lmNorm,  10.0  *  lmPar);	  	non-compiled	[CE]  double  cannot  be  dereferenced	107	None	add
631	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  30.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  30.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
632	[BUG]  [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  30.0  *  lmNorm);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    0.0;    tmp  =  0.0;  previousCost  =  Math.min(delta,  10.0  *  lmNorm);  tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  30.0  *  lmNorm);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        0.0;        tmp    =    0.0;    previousCost    =    Math.min(delta,    10.0    *    lmNorm);    tmp  =  0.0;  tmp  =  0.0;  previousCost  =  Math.min(delta,  30.0  *  lmNorm);	  	compilable	  [FE]  AssertionFailedError  	39	8	add
633	[BUG]  [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(previousCost  <  0)?  0.5  *  dirDer  /(dirDer  +  0.5  *  actRed):  0.5;	  double    tmp    =(previousCost    ==    0)?    0.5    *    dirDer    /(previousCost    +    0.5    *    actRed):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	84	None	replace
634	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.1;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    0.0;    tmp  =  1.1;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
635	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.1;  tmp  =  0.0;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  0.0;  tmp  =  1.1;  tmp  =  0.0;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    0.0;    tmp  =  1.1;  tmp  =  0.0;	  	compilable	  [FE]  AssertionFailedError  	90	2	add
636	[BUG]  [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (previousCost  +  0.5  *  costRelativeTolerance):  0.5;  [CE]  variable  tmp  is  already  defined  in  method  doOptimize()  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (previousCost  +  0.5  *  costRelativeTolerance):  0.5;  [BUGGY]      tmp  =  0.1;  }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	double  tmp  =(actRed  ==  0)?  0.5  *  dirDer  /  (previousCost  +  0.5  *  costRelativeTolerance):  0.5;	  double    tmp    =(actRed    ==    0)?    0.5    *    dirDer    /    (dirDer    +    0.5    *    costRelativeTolerance):    0.5;    	non-compiled	[CE]  variable  tmp  is  already  defined  in  method  doOptimize()	2	None	replace
637	[BUG]  [BUGGY]  tmp  =  0.5  *  permutation  *  sum;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0.5  *  permutation  *  sum;  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0.5  *  permutation  *  sum;	  tmp    =    0.5    *    permutation;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	9	None	replace
638	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  if(tmp  <  1.0)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	add	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    if(tmp  <  1.0)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }	  	compilable	  [FE]  AssertionFailedError  	59	3	add
639	[BUG]  [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  if(tmp  <  1.0)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp    =    1.0;    tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  if(tmp  <  1.0)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp        =        1.0;        tmp    =    1.0;    this.lmPar    =    Math.min(delta,    10.0    *    lmNorm);    if(tmp  <  1.0)  {  tmp  =  1.0;  tmp  =  1.0;  this.lmPar  =  Math.min(delta,  10.0  *  lmNorm);  }	  	compilable	  [FE]  AssertionFailedError  	59	3	add
640	[BUG]  [BUGGY]  tmp  =  0;  tmp  =  0);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      double  dirDer  =  -(coeff1  +  coeff2);  ratio  =  (preRed  ==  0)  ?  0  :  (actRed  /  preRed);  if  (ratio  <=  0.25)  {  double  tmp  =  (actRed  <  0)  ?  (0.5  *  dirDer  /  (dirDer  +  0.5  *  actRed))  :  0.5;  if  ((0.1  *  cost  >=  previousCost)  ||  (tmp  <  0.1))  {      [BUGGY]  tmp  =  0;  tmp  =  0);  [BUGGY]      }  delta  =  tmp  *  Math.min(delta,  10.0  *  lmNorm);  lmPar  /=  tmp;  }  else  if  ((lmPar  ==  0)  ||  (ratio  >=  0.75))  {  delta  =  2  *  lmNorm;  lmPar  *=  0.5;  }  if  (ratio  >=  1.0e-4)  {  [CLASS]  LevenbergMarquardtOptimizer  [METHOD]  doOptimize  [RETURN_TYPE]  VectorialPointValuePair  [VARIABLES]  VectorialPointValuePair  current  previous  int[]  permutation  boolean  firstIteration  double[]  beta  diag  diagR  jacNorm  lmDir  oldRes  oldX  tmpVec  work1  work2  work3  double  actRed  coeff1  coeff2  costRelativeTolerance  delta  dirDer  dirJ  dk  initialStepBoundFactor  lmNorm  lmPar  maxCosine  orthoTolerance  parRelativeTolerance  pc2  preRed  previousCost  qrRankingThreshold  r  ratio  s  sum  threshold  tmp  xK  xNorm  xk  int  i  j  k  pj  pk  rank  solvedCols  	projects/Math64/src/main/java/org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizer.java	0.3779644730092272	402	402	2	replace	tmp  =  0;  tmp  =  0);	  tmp    =    1;    tmp    =    1);    	non-compiled	[CE]  ';'  expected	99	None	replace
