bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  option  =  selected.getOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  selected.getOption();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getOption();	      String    option    =    option.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	12	None	replace
2	[BUG]  [BUGGY]  String  option  =  option.getSelectedOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getSelectedOption();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedOption();	      String    option    =    option.getOption();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	12	None	replace
3	[BUG]  [BUGGY]  String  option  =  option.getOption(),  selected);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getOption(),  selected);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOption(),  selected);	      String    option    =    option.getOption();    	non-compiled	[CE]  ';'  expected	12	None	replace
4	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getItem(selected,  selected);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  selected);	      String    option    =    option.getItem(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	2	None	replace
5	[BUG]  [BUGGY]  String  option  =  option.getItem(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getItem(selected,  required);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected,  required);	      String    option    =    option.getItem(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	2	None	replace
6	[BUG]  [BUGGY]  String  option  =  option.getItem(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getItem(selected.toString());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getItem(selected.toString());	      String    option    =    option.getItem(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	2	None	replace
7	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(selected.toString());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toString());	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
8	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(selected.toLowerCase());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.toLowerCase());	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
9	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(selected,  required);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected,  required);	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
10	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(selected  +  1);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected  +  1);	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
11	[BUG]  [BUGGY]  selected  =  option.getUpperOpt();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getUpperOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getUpperOpt();	  selected    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
12	[BUG]  [BUGGY]  selected  =  option.getSelectedOpt();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getSelectedOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getSelectedOpt();	  selected    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
13	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
14	[BUG]  [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
15	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
16	[BUG]  [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(!selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
17	[BUG]  [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  If(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  If(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    If(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  ';'  expected	15	None	add
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected    =    option.getLongOpt();    selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	17	3	add
19	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  selected  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	17	3	add
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	17	3	add
21	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  String  selected  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    String  selected  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	17	3	add
22	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
23	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  if(selected  ==  null)  {  selected  =  option.getLongOpt();  }  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    if(selected  ==  null)  {  selected  =  option.getLongOpt();  }	  	compilable	  [FE]  ComparisonFailure  	17	3	add
24	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  selection  =  option.getLongOpt();  [CE]  cannot  find  symbol  selection  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  selection  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    selection  =  option.getLongOpt();	  	non-compiled	[CE]  cannot  find  symbol  selection	17	None	add
25	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  String  option  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    String  option  =  option.getLongOpt();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	17	None	add
26	[BUG]  [BUGGY]  selected  =  option.getItemCount()  +  1;  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getItemCount()  +  1;  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getItemCount()  +  1;	  selected    =    option.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
27	[BUG]  [BUGGY]  selected  =  option.getItemCount()  -  1;  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getItemCount()  -  1;  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getItemCount()  -  1;	  selected    =    option.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
28	[BUG]  [BUGGY]  selected  =  options.getItemCount();  [CE]  cannot  find  symbol  options  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  options.getItemCount();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getItemCount();	  selected    =    option.getItemCount();    	non-compiled	[CE]  cannot  find  symbol  options	7	None	replace
29	[BUG]  [BUGGY]  selected  =  optionMap.getName();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.getName();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getName();	  selected    =    option.getName();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
30	[BUG]  [BUGGY]  selected  =  options.getName();  [CE]  cannot  find  symbol  options  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  options.getName();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getName();	  selected    =    option.getName();    	non-compiled	[CE]  cannot  find  symbol  options	8	None	replace
31	[BUG]  [BUGGY]  Option  option  =(Option)this.optionMap.get(selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =(Option)this.optionMap.get(selected);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)this.optionMap.get(selected);	      Option    option    =(Option)optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	1	None	replace
32	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =(Option)optionMap.get(selected,  required);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected,  required);	      Option    option    =(Option)optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	1	None	replace
33	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =(Option)optionMap.get(selected  +  1);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected  +  1);	      Option    option    =(Option)optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	1	None	replace
34	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionMap.get(selected.toLowerCase());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toLowerCase());	      Option    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
35	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected,  required);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionMap.get(selected,  required);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected,  required);	      Option    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
36	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected  +  1);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionMap.get(selected  +  1);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected  +  1);	      Option    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
37	[BUG]  [BUGGY]  Option  option  =  optionMap.get(selected.toString());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionMap.get(selected.toString());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(selected.toString());	      Option    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
38	[BUG]  [BUGGY]  Aleger  <?>  selected  =  option.getOpt();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Aleger  <?>  selected  =  option.getOpt();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Aleger  <?>  selected  =  option.getOpt();	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	14	None	replace
39	[BUG]  [BUGGY]  aleger.setLongOpt(option.getLongOpt());  [CE]  cannot  find  symbol  aleger  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  aleger.setLongOpt(option.getLongOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.setLongOpt(option.getLongOpt());	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  aleger	14	None	replace
40	[BUG]  [BUGGY]  vice.setSelected(option.getOpt());  [CE]  cannot  find  symbol  vice  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  vice.setSelected(option.getOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	vice.setSelected(option.getOpt());	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  vice	14	None	replace
41	[BUG]  [BUGGY]  parent.setSelected(option.getOpt());  [CE]  cannot  find  symbol  parent  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent.setSelected(option.getOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent.setSelected(option.getOpt());	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  parent	14	None	replace
42	[BUG]  [BUGGY]  bucket  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  bucket  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
43	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  bucket!=  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
44	[BUG]  [BUGGY]  bucket  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  bucket  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  &&  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
45	[BUG]  [BUGGY]  bucket!=  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  bucket!=  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket!=  null  &&  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
46	[BUG]  [BUGGY]  String  option  =  selected.getOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  selected.getOpt();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getOpt();	      String    option    =    option.getOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	11	None	replace
47	[BUG]  [BUGGY]  String  option  =  option.getOptionName();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getOptionName();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getOptionName();	      String    option    =    option.getOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	11	None	replace
48	[BUG]  [BUGGY]  selected  =  optionMap.getItem(selected);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.getItem(selected);  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getItem(selected);	  selected    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
49	[BUG]  [BUGGY]  selected  =  options.getItem(selected);  [CE]  cannot  find  symbol  options  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  options.getItem(selected);  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getItem(selected);	  selected    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  options	19	None	replace
50	[BUG]  [BUGGY]  selection  =  option.getItem(selected);  [CE]  cannot  find  symbol  selection  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selection  =  option.getItem(selected);  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getItem(selected);	  selected    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  selection	19	None	replace
51	[BUG]  [BUGGY]  String  option  =  selected.getText();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  selected.getText();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getText();	      String    option    =    option.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
52	[BUG]  [BUGGY]  String  option  =  options.getText();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  options.getText();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getText();	      String    option    =    option.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
53	[BUG]  [BUGGY]  String  option  =  option.getText()  +  selected.toString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getText()  +  selected.toString();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  +  selected.toString();	      String    option    =    option.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
54	[BUG]  [BUGGY]  selected  =  optionMap.getSelected();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.getSelected();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getSelected();	  selected    =    option.getSelected();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
55	[BUG]  [BUGGY]  selected  =  options.getSelected();  [CE]  cannot  find  symbol  options  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  options.getSelected();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getSelected();	  selected    =    option.getSelected();    	non-compiled	[CE]  cannot  find  symbol  options	6	None	replace
56	[BUG]  [BUGGY]  selection  =  option.getSelected();  [CE]  cannot  find  symbol  selection  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selection  =  option.getSelected();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selection  =  option.getSelected();	  selected    =    option.getSelected();    	non-compiled	[CE]  cannot  find  symbol  selection	6	None	replace
57	[BUG]  [BUGGY]  String  option  =  selected.getSelectedString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  selected.getSelectedString();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  selected.getSelectedString();	      String    option    =    option.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
58	[BUG]  [BUGGY]  String  option  =  options.getSelectedString();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                  ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  options.getSelectedString();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  options.getSelectedString();	      String    option    =    option.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
59	[BUG]  [BUGGY]  String  option  =  option.getSelectedValue();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getSelectedValue();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedValue();	      String    option    =    option.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
60	[BUG]  [BUGGY]  vice.setSelected(option.getLongOpt());  [CE]  cannot  find  symbol  vice  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  vice.setSelected(option.getLongOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	vice.setSelected(option.getLongOpt());	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  cannot  find  symbol  vice	13	None	replace
61	[BUG]  [BUGGY]  selected  =  optionMap.getString();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.getString();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getString();	  selected    =    option.getString();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
62	[BUG]  [BUGGY]  String  selected  =  option.getString();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  selected  =  option.getString();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  selected  =  option.getString();	  selected    =    option.getString();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
63	[BUG]  [BUGGY]  selected  =  options.getString();  [CE]  cannot  find  symbol  options  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  options.getString();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  options.getString();	  selected    =    option.getString();    	non-compiled	[CE]  cannot  find  symbol  options	9	None	replace
64	[BUG]  [BUGGY]  Option  option  =  optionsMap.get(selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionsMap.get(selected);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionsMap.get(selected);	      Option    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	10	None	replace
65	[BUG]  [BUGGY]  select  =  option.getItem(selected);  [CE]  cannot  find  symbol  select  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  select  =  option.getItem(selected);  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getItem(selected);	  selected    =    option.getItem(selected);    	non-compiled	[CE]  cannot  find  symbol  select	19	None	replace
66	[BUG]  [BUGGY]  select  =  option.getSelected();  [CE]  cannot  find  symbol  select  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  select  =  option.getSelected();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getSelected();	  selected    =    option.getSelected();    	non-compiled	[CE]  cannot  find  symbol  select	6	None	replace
67	[BUG]  [BUGGY]  select  =  option.getName();  [CE]  cannot  find  symbol  select  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  select  =  option.getName();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	select  =  option.getName();	  selected    =    option.getName();    	non-compiled	[CE]  cannot  find  symbol  select	8	None	replace
68	[BUG]  [BUGGY]  String  option  =  optionMap.get(option.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(option.getOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(option.getOpt());	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
69	[BUG]  [BUGGY]  String  option  =  optionsMap.get(selected);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionsMap.get(selected);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionsMap.get(selected);	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
70	[BUG]  [BUGGY]  aleger.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  aleger.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
71	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  [Delete]  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	[Delete]	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  aleger.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  aleger.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	aleger.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  ';'  expected	16	None	replace
73	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
74	[BUG]  [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(option.getLongOpt().equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	compilable	  [FE]  NullPointerException  	15	6	add
75	[BUG]  [BUGGY]  Option  option  =  optionMap.get(option.getOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionMap.get(option.getOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(option.getOpt());	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	13	None	replace
76	[BUG]  [BUGGY]  Option  option  =  optionMap.get(option.getLongOpt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  optionMap.get(option.getLongOpt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  optionMap.get(option.getLongOpt());	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	13	None	replace
77	[BUG]  [BUGGY]  selected  =  option.getShortOpt();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getShortOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option.getShortOpt();	  selected    =    option.getLongOpt();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
78	[BUG]  [BUGGY]  String  option  =  option.getText()  + "n ";  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getText()  + "n ";  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  + "n ";	      String    option    =    option.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
79	[BUG]  [BUGGY]  String  option  =  option.getText(),  selected);  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getText(),  selected);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText(),  selected);	      String    option    =    option.getText();    	non-compiled	[CE]  ';'  expected	4	None	replace
80	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  Option  option  =  option.getLongOpt();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  Option  option  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    Option  option  =  option.getLongOpt();	  	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	17	None	add
81	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	add	selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	17	3	add
82	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  String  opt  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    String  opt  =  option.getLongOpt();	  	compilable	  [FE]  ComparisonFailure  	17	3	add
83	[BUG]  [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =(Option)optionMap.get(selected.toLowerCase());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =(Option)optionMap.get(selected.toLowerCase());	      Option    option    =(Option)optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	1	None	replace
84	[BUG]  [BUGGY]  selected  =  optionMap.getItemCount();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.getItemCount();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.getItemCount();	  selected    =    option.getItemCount();    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
85	[BUG]  [BUGGY]  Option  option  =  option.getOption();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  Option  option  =  option.getOption();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	Option  option  =  option.getOption();	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	14	None	replace
86	[BUG]  [BUGGY]  bucket  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  bucket  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	16	None	replace
87	[BUG]  [BUGGY]  bucket  <  =  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  bucket  <  =  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	bucket  <  =  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	16	None	replace
88	[BUG]  [BUGGY]  String  option  =  option.getKey();  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getKey();  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getKey();	      String    option    =    option.getOpt();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	11	None	replace
89	[BUG]  [BUGGY]  String  option  =  option.getText()  + ": "  +  selected;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getText()  + ": "  +  selected;  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getText()  + ": "  +  selected;	      String    option    =    option.getText();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	4	None	replace
90	[BUG]  [BUGGY]  selected  =  optionMap.get(option.getName());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.get(option.getName());  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.get(option.getName());	  selected    =    option.getName();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
91	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
92	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
93	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
94	[BUG]  [BUGGY]  parent  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  selected.equals(option.getOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    if(!selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	13	None	replace
95	[BUG]  [BUGGY]  String  option  =  option.getSelectedString()  + "_ "  +  selected;  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]                ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  option.getSelectedString()  + "_ "  +  selected;  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  option.getSelectedString()  + "_ "  +  selected;	      String    option    =    option.getSelectedString();    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	5	None	replace
96	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt());  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(selected.opt());  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt());	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
97	[BUG]  [BUGGY]  String  option  =  optionMap.get(selected.opt);  [CE]  variable  option  is  already  defined  in  method  setSelected(Option)  [FE]              ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  String  option  =  optionMap.get(selected.opt);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	String  option  =  optionMap.get(selected.opt);	      String    option    =    optionMap.get(selected);    	non-compiled	[CE]  variable  option  is  already  defined  in  method  setSelected(Option)	3	None	replace
98	[BUG]  [BUGGY]  selected  =  option  Maps.getItem(selected);  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option  Maps.getItem(selected);  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  option  Maps.getItem(selected);	  selected    =    option.getItem(selected);    	non-compiled	[CE]  ';'  expected	19	None	replace
99	[BUG]  [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(Selection.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  cannot  find  symbol  Selection  [FE]    NullPointerException    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]      if(selected.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  if(Selection.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	        if(selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    if(Selection.equals(option.getLongOpt()))  {  throw  new  AlreadySelectedException(this,  option);  }	  	non-compiled	[CE]  cannot  find  symbol  Selection	15	None	add
100	[BUG]  [BUGGY]  parent  ==  null  ||  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  [CE]  not  a  statement  [FE]          ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent  ==  null  ||  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
101	[BUG]  [BUGGY]  parent  ==  null  ||  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  parent  ==  null  ||  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }  [BUGGY]    selected  =  option.getOpt();  }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	parent  ==  null  ||  parent.equals(option.getParent()))  {  throw  new  AlreadySelectedException(this,  option);  }	      if(selected.equals(option.getLongOpt()))    {    if(selected    ==    null    ||    selected.equals(option.getLongOpt()))    {    throw    new    AlreadySelectedException(this,    option);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
102	[BUG]  [BUGGY]  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  option.getLongOpt();  option  =  option.getLongOpt();  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected    =    option.getLongOpt();    option  =  option.getLongOpt();	  	non-compiled	[CE]  incompatible  types	17	None	add
103	[BUG]  [BUGGY]  selected  =  optionMap.get(option.getSelected());  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      selected  =  null;  return;  }    if  (selected  ==  null  ||  selected.equals(option.getOpt()))  {    [BUGGY]  selected  =  optionMap.get(option.getSelected());  [BUGGY]    }  else  {  throw  new  AlreadySelectedException(this,  option);  }  }  [CLASS]  OptionGroup  [METHOD]  setSelected  [RETURN_TYPE]  void  Option  option  [VARIABLES]  Option  option  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.7071067811865476	100	100	3	replace	selected  =  optionMap.get(option.getSelected());	  selected    =    option.getSelected();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
