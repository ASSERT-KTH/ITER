bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  required  =  false;  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    false;    this.required  =  true;  boolean  required  =  false;	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	108	None	add
2	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  false;  boolean  required  =  true;  boolean  required  =  false;  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  boolean  required  =  true;  boolean  required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    false;    boolean  required  =  true;  boolean  required  =  false;	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	108	None	add
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  needed  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        boolean    required    =    false;    this.required  =  true;  boolean  needed  =  false;	  	compilable	  [FE]  AssertionFailedError  	108	6	add
4	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  needed  =  false;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  needed  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    false;    this.required  =  true;  boolean  needed  =  false;	  	compilable	  [FE]  AssertionFailedError  	108	6	add
5	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  false;  This.required  =  true;  boolean  required  =  false;  [CE]  cannot  find  symbol  This  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  This.required  =  true;  boolean  required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    false;    This.required  =  true;  boolean  required  =  false;	  	non-compiled	[CE]  cannot  find  symbol  This	108	None	add
6	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required;  this.required  =  true;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required;  this.required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required;  this.required  =  true;  }	  return    this.required;    this.required    =    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	30	None	replace
7	[BUG]  [BUGGY]  if(this.required)  {  return  this.required;  this.required  =  true;  }  [CE]  unreachable  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required)  {  return  this.required;  this.required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required)  {  return  this.required;  this.required  =  true;  }	  return    this.required;    this.required    =    true;    	non-compiled	[CE]  unreachable  statement	30	None	replace
8	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  this.optionMap.equals(selected)&&  selected.equals(selected);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  this.optionMap.equals(selected)&&  selected.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    this.optionMap.equals(selected)&&  selected.equals(selected);	  	non-compiled	[CE]  not  a  statement	64	None	add
9	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  boolean  required  =  this.optionMap.equals(selected)&&  selected.equals(selected);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  boolean  required  =  this.optionMap.equals(selected)&&  selected.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    boolean  required  =  this.optionMap.equals(selected)&&  selected.equals(selected);	  	non-compiled	[CE]  unreachable  statement	64	None	add
10	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected)&&  selected.equals(selected);  }  [CE]  unreachable  statement  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected)&&  selected.equals(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected)&&  selected.equals(selected);  }	  	non-compiled	[CE]  unreachable  statement	64	None	add
11	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  String  selected  =  this.optionMap.get(selected);  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  String  selected  =  this.optionMap.get(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    String  selected  =  this.optionMap.get(selected);	  	non-compiled	[CE]  incompatible  types	64	None	add
12	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  boolean  required  =  this.optionMap.equals(selected)&&  selected.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  boolean  required  =  this.optionMap.equals(selected)&&  selected.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    boolean  required  =  this.optionMap.equals(selected)&&  selected.equals(required);	  	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	64	None	add
13	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
14	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  ')'  expected	107	None	replace
15	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  <identifier>  expected	107	None	replace
16	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  <  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
18	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
19	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  <  options.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  <  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  <  options.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
20	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)||(optionMap.size()  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)||(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)||(optionMap.size()  <  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
21	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.option);  [CE]  cannot  find  symbol  option  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.option);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.option);	  boolean    required    =    this.optionMap.containsKey(this.optionMap);    	non-compiled	[CE]  cannot  find  symbol  option	91	None	replace
22	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected)||  optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected)||  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected)||  optionMap.containsKey(selected);	  boolean    required    =    optionMap.containsKey(selected)||    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	130	None	replace
23	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&  this.optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected)&&  this.optionMap.containsKey(selected);	  boolean    required    =    optionMap.containsKey(selected)||    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	130	None	replace
24	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
25	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  <identifier>  expected	10	None	replace
26	[BUG]  [BUGGY]  boolean  required  =  optionsMap.containsKey(key);  [CE]  cannot  find  symbol  key  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionsMap.containsKey(key);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionsMap.containsKey(key);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    optionsMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  key	99	None	replace
27	[BUG]  [BUGGY]  Boolean  required  =  optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Boolean  required  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Boolean  required  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    Boolean    required    =    optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	19	None	replace
28	[BUG]  [BUGGY]  String  selected  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  String  selected  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	String  selected  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    Boolean    required    =    optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	19	None	replace
29	[BUG]  [BUGGY]  final  boolean  required  =  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  final  boolean  required  =  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	final  boolean  required  =  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    String    selected    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	71	None	replace
30	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.get(selected);  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.get(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.get(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    String    selected    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	71	None	replace
31	[BUG]  [BUGGY]  return(required  >  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  >  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  >  0)&&(optionMap.containsKey(required));	  return(selection    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
32	[BUG]  [BUGGY]  return(this.selected  >  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selected  >  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selected  >  0)&&(optionMap.containsKey(required));	  return(selection    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
33	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }	  return    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	82	None	replace
34	[BUG]  [BUGGY]  return  this.optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(required);	  return    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	82	None	replace
35	[BUG]  [BUGGY]  return  this.optionMap.containsKey(this.required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(this.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(this.required);	  return    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	82	None	replace
36	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected).booleanValue();  [CE]  cannot  find  symbol  options  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected).booleanValue();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected).booleanValue();	  boolean    required    =    optionMap.containsKey(selected).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  options	49	None	replace
37	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&!optionMap.containsKey(selected).booleanValue();  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&!optionMap.containsKey(selected).booleanValue();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected)&&!optionMap.containsKey(selected).booleanValue();	  boolean    required    =    optionMap.containsKey(selected).booleanValue();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	49	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.equals(optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  optionMap.equals(optionMap.get(selected));	  return    selected.equals(optionMap.get(required));    	compilable	  [FE]  AssertionFailedError  	52	6	replace
39	[BUG]  [BUGGY]  return  optionMap.equals(optionMap.get(selected));  [FE]  AssertionFailedError  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.equals(optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.equals(optionMap.get(selected));	  return    selected.equals(optionMap.get(required));    	compilable	  [FE]  AssertionFailedError  	52	6	replace
40	[BUG]  [BUGGY]  return  optionMap.equals(optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.equals(optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.equals(optionMap.get(required));	  return    selected.equals(optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	52	None	replace
41	[BUG]  [BUGGY]  return  options.equals(optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  options.equals(optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  options.equals(optionMap.get(required));	  return    selected.equals(optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	52	None	replace
42	[BUG]  [BUGGY]  return  optionMap.get(selected).equals(optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.get(selected).equals(optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.get(selected).equals(optionMap.get(required));	  return    selected.equals(optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	52	None	replace
43	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  this.required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    true;    this.required  =  true;  this.required  =  true;	  	compilable	  [FE]  ComparisonFailure  	56	3	add
44	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  true;  this.required  =  true;  this.required  =  true;  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  this.required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    true;    this.required  =  true;  this.required  =  true;	  	compilable	  [FE]  ComparisonFailure  	56	3	add
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  boolean  required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    true;    boolean  required  =  true;  this.required  =  true;	  	compilable	  [FE]  ComparisonFailure  	56	3	add
46	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  true;  boolean  required  =  true;  this.required  =  true;  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  boolean  required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    true;    boolean  required  =  true;  this.required  =  true;	  	compilable	  [FE]  ComparisonFailure  	56	3	add
47	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  true;  This.required  =  true;  this.required  =  true;  [CE]  cannot  find  symbol  This  [FE]        ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  This.required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    true;    This.required  =  true;  this.required  =  true;	  	non-compiled	[CE]  cannot  find  symbol  This	56	None	add
48	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  this.required  =  false;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    true;    this.required  =  false;  this.required  =  true;	  	compilable	  [FE]  ComparisonFailure  	56	3	add
49	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  true;  this.required  =  false;  this.required  =  true;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  this.required  =  false;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    true;    this.required  =  false;  this.required  =  true;	  	compilable	  [FE]  ComparisonFailure  	56	3	add
50	[BUG]  [BUGGY]  return(this.required  ==  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.required  ==  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.required  ==  0)&&(optionMap.containsKey(selected));	  return(this.required    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	93	None	replace
51	[BUG]  [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(this.required));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(this.required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >  0)&&(optionMap.containsKey(this.required));	  return(this.required    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	93	None	replace
52	[BUG]  [BUGGY]  return(this.required!=  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.required!=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.required!=  0)&&(optionMap.containsKey(selected));	  return(this.required    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	93	None	replace
53	[BUG]  [BUGGY]  return(this.required  >=  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.required  >=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.required  >=  0)&&(optionMap.containsKey(selected));	  return(this.required    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	93	None	replace
54	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey( "required ");  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey( "required ");  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey( "required ");	  boolean    required    =    optionsMap.containsKey(   "required   ");    	non-compiled	[CE]  missing  return  statement	72	None	replace
55	[BUG]  [BUGGY]  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
56	[BUG]  [BUGGY]  if(this.required  ==  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
57	[BUG]  [BUGGY]  if(selected!=  null)  {  return  this.required;  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(selected!=  null)  {  return  this.required;  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(selected!=  null)  {  return  this.required;  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
58	[BUG]  [BUGGY]  if(optionMap.containsKey(selected))  {  return  false;  }  [CE]  missing  return  statement  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	33	None	replace
59	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  required);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  required);	  return(optionMap!=    null)||(required    >    0)&&(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	85	None	replace
60	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  options.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  <  options.size());	  return(optionMap!=    null)||(required    >    0)&&(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	85	None	replace
61	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)  ==  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)  ==  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)  ==  0)&&(optionMap.containsKey(selected));	  return(optionMap.containsKey(selected)    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	26	None	replace
62	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)  >=  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)  >=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)  >=  0)&&(optionMap.containsKey(selected));	  return(optionMap.containsKey(selected)    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	26	None	replace
63	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)!=  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)!=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)!=  0)&&(optionMap.containsKey(selected));	  return(optionMap.containsKey(selected)    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	26	None	replace
64	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)  <  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)  <  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)  <  0)&&(optionMap.containsKey(selected));	  return(optionMap.containsKey(selected)    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	26	None	replace
65	[BUG]  [BUGGY]  return  this.required  ==  null  ||  this.required;  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required  ==  null  ||  this.required;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required  ==  null  ||  this.required;	  return    this.required    ==    null    &&    this.required;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	73	None	replace
66	[BUG]  [BUGGY]  return  this.required  ==  null  &&  this.optionMap.isRequired();  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required  ==  null  &&  this.optionMap.isRequired();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required  ==  null  &&  this.optionMap.isRequired();	  return    this.required    ==    null    &&    this.required;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	73	None	replace
67	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  required);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  required);	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
68	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  optionMap.size());	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
69	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  options.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  <  options.size());	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
70	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)||(optionMap.size()  <  required);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)||(optionMap.size()  <  required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)||(optionMap.size()  <  required);	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
71	[BUG]  [BUGGY]  this.required  =  false;  boolean  required  =  false;  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  false;  boolean  required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  false;  boolean  required  =  false;	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  missing  return  statement	109	None	replace
72	[BUG]  [BUGGY]  if(required)  {  this.required  =  true;  boolean  required  =  false;  }  [CE]  missing  return  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required)  {  this.required  =  true;  boolean  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required)  {  this.required  =  true;  boolean  required  =  false;  }	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  missing  return  statement	109	None	replace
73	[BUG]  [BUGGY]  this.required  =  false;  boolean  required  =  true;  [CE]  missing  return  statement  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  false;  boolean  required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  false;  boolean  required  =  true;	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  missing  return  statement	109	None	replace
74	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.required,  selected);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.required,  selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.required,  selected);	  boolean    required    =    this.optionMap.containsKey(this.required);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	78	None	replace
75	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    needed    =    optionMap.containsKey(selected);    boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	20	None	add
76	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    needed    =    optionMap.containsKey(selected);    boolean  required  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	20	None	add
77	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionsMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionsMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    needed    =    optionMap.containsKey(selected);    boolean  required  =  optionsMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	20	None	add
78	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    needed    =    optionMap.containsKey(selected);    Boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	20	None	add
79	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap)));    	non-compiled	[CE]  ')'  expected	104	None	replace
80	[BUG]  [BUGGY]  this.required  = " ";  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  = " ";  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  = " ";	  this.required    =    false;    	non-compiled	[CE]  incompatible  types	23	None	replace
81	[BUG]  [BUGGY]  This.required  =  true;  [CE]  cannot  find  symbol  This  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  This.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	This.required  =  true;	  this.required    =    false;    	non-compiled	[CE]  cannot  find  symbol  This	23	None	replace
82	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  false;  }  [CE]  missing  return  statement  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	129	None	replace
83	[BUG]  [BUGGY]  if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  true;  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
84	[BUG]  [BUGGY]  if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
85	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  true;  }  [CE]  missing  return  statement  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  true;  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    true;    }    	non-compiled	[CE]  missing  return  statement	129	None	replace
86	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
87	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap    	non-compiled	[CE]  ')'  expected	125	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(optionMap!=  null)&&(optionMap.size()  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	compilable	  [FE]  AssertionFailedError  	135	6	replace
89	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.size()  <  optionMap.size());  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(optionMap.size()  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	compilable	  [FE]  AssertionFailedError  	135	6	replace
90	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	135	None	replace
91	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(optionMap  ==  null)&&(optionMap.size()  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	compilable	  [FE]  AssertionFailedError  	135	6	replace
92	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(optionMap.size()  <  optionMap.size());  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(optionMap.size()  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	compilable	  [FE]  AssertionFailedError  	135	6	replace
93	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	135	None	replace
94	[BUG]  [BUGGY]  Boolean  required  =  this.optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Boolean  required  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Boolean  required  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    Boolean    required    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	68	None	replace
95	[BUG]  [BUGGY]  String  selected  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  String  selected  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	String  selected  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    Boolean    required    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	68	None	replace
96	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  ')'  expected	9	None	replace
97	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
98	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  ')'  expected	9	None	replace
99	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected)&&  this.optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected)&&  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selected)&&  this.optionMap.containsKey(selected);	  boolean    required    =    this.optionMap.containsKey(selected)&&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	120	None	replace
100	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected).booleanValue();  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  boolean  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected).booleanValue();  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected).booleanValue();  boolean  requires  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    requires    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	98	None	replace
101	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(this.selected);  [CE]  missing  return  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(this.selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(this.selected);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    requires    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	98	None	replace
102	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  required.equals(selected);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  required.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  required.equals(selected);	  return    this.optionMap.equals(required)&&    selected.equals(selected);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	63	None	replace
103	[BUG]  [BUGGY]  return  selected.equals(required)&&  this.optionMap.equals(selected);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selected.equals(required)&&  this.optionMap.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  selected.equals(required)&&  this.optionMap.equals(selected);	  return    this.optionMap.equals(required)&&    selected.equals(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	63	None	replace
104	[BUG]  [BUGGY]  if(isRequired())  {  this.required  =  true;  this.required  =  false;  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(isRequired())  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(isRequired())  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    false;    	non-compiled	[CE]  missing  return  statement	62	None	replace
105	[BUG]  [BUGGY]  if(selected!=  null)  {  this.required  =  true;  this.required  =  false;  }  [CE]  missing  return  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(selected!=  null)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(selected!=  null)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    false;    	non-compiled	[CE]  missing  return  statement	62	None	replace
106	[BUG]  [BUGGY]  if(isRequired())  {  this.required  =  true;  this.required  =  false;  }  else  {  required  =  false;  }  [CE]  missing  return  statement  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(isRequired())  {  this.required  =  true;  this.required  =  false;  }  else  {  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(isRequired())  {  this.required  =  true;  this.required  =  false;  }  else  {  required  =  false;  }	          this.required    =    true;    this.required    =    false;    	non-compiled	[CE]  missing  return  statement	62	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
108	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.containsKey(selected)&&  selected.equals(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
110	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(selected);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)&&  selected.equals(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
111	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)||  selected.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)||  selected.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)||  selected.equals(required);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	65	None	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.equals(selected)&&  this.optionMap.containsKey(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
113	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.containsKey(selected);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  this.optionMap.containsKey(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
114	[BUG]  [BUGGY]  return  this.required.equals(optionMap.required);  [CE]  cannot  find  symbol  required  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required.equals(optionMap.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required.equals(optionMap.required);	  return    this.required.equals(required);    	non-compiled	[CE]  cannot  find  symbol  required	134	None	replace
115	[BUG]  [BUGGY]  return  this.required.equals(this.optionMap);  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required.equals(this.optionMap);	  return    this.required.equals(required);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	134	None	replace
116	[BUG]  [BUGGY]  return  this.required.equals(selected);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required.equals(selected);	  return    this.required.equals(required);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	134	None	replace
117	[BUG]  [BUGGY]  return  this.required.equals(this.required);  [CE]  boolean  cannot  be  dereferenced  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required.equals(this.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required.equals(this.required);	  return    this.required.equals(required);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	134	None	replace
118	[BUG]  [BUGGY]  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected));	  &&    this.optionMap.containsKey(selected));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
119	[BUG]  [BUGGY]  &&  this.optionMap.containsKey(selected).booleanValue();  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  this.optionMap.containsKey(selected).booleanValue();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  this.optionMap.containsKey(selected).booleanValue();	  &&    this.optionMap.containsKey(selected));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
120	[BUG]  [BUGGY]  return  this.required  ==  null;  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required  ==  null;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required  ==  null;	  return    this.required!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	74	None	replace
121	[BUG]  [BUGGY]  return  this.required!=  null  &&  this.optionMap.isRequired();  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  &&  this.optionMap.isRequired();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  &&  this.optionMap.isRequired();	  return    this.required!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	74	None	replace
122	[BUG]  [BUGGY]  final  boolean  required  =  optionMap.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  final  boolean  required  =  optionMap.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	final  boolean  required  =  optionMap.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    String    selected    =    optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	22	None	replace
123	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);  [CE]  cannot  find  symbol  options  [FE]                AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    String    selected    =    optionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  options	22	None	replace
124	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.keySet())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	86	None	replace
125	[BUG]  [BUGGY]  if(this.required!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.keySet())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	86	None	replace
126	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.keySet())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	86	None	replace
127	[BUG]  [BUGGY]  if(optionMap!=  null)  {  boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  boolean  required  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  }	          boolean    required    =    optionMap.containsKey(selected);    boolean    needed    =    optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	21	None	replace
128	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [CE]  cannot  find  symbol  options  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    needed    =    optionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  options	21	None	replace
129	[BUG]  [BUGGY]  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);	  &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
130	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  }	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    needed    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	70	None	replace
131	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  needed  =  this.optionMap.containsKey(this.selected);  [CE]  missing  return  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  needed  =  this.optionMap.containsKey(this.selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  needed  =  this.optionMap.containsKey(this.selected);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    needed    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	70	None	replace
132	[BUG]  [BUGGY]  this.required  =  false;  String  selected  =  getOption(optionMap);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  false;  String  selected  =  getOption(optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  false;  String  selected  =  getOption(optionMap);	          this.required    =    true;    String    selected    =    getOption(optionMap);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
133	[BUG]  [BUGGY]  boolean  required  =  true;  String  selected  =  getOption(optionMap);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  true;  String  selected  =  getOption(optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  true;  String  selected  =  getOption(optionMap);	          this.required    =    true;    String    selected    =    getOption(optionMap);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
134	[BUG]  [BUGGY]  final  boolean  required  =  optionMap.containsKey( "required ");  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  final  boolean  required  =  optionMap.containsKey( "required ");  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	final  boolean  required  =  optionMap.containsKey( "required ");	          boolean    required    =    optionMap.containsKey(       "required       ");    boolean    required    =    optionMap.containsKey(   "required       ");    	non-compiled	[CE]  missing  return  statement	36	None	replace
135	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsValue(selected).booleanValue();  [CE]  boolean  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsValue(selected).booleanValue();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsValue(selected).booleanValue();	  boolean    required    =    this.optionMap.containsValue(selected);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	121	None	replace
136	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsValue(this.selected);  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsValue(this.selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsValue(this.selected);	  boolean    required    =    this.optionMap.containsValue(selected);    	non-compiled	[CE]  missing  return  statement	121	None	replace
137	[BUG]  [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  0)&&(optionMap.containsKey(required));	  return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	25	None	replace
138	[BUG]  [BUGGY]  return(selected  ==  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  ==  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  ==  0)&&(optionMap.containsKey(required));	  return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	25	None	replace
139	[BUG]  [BUGGY]  return(selected  >=  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >=  0)&&(optionMap.containsKey(required));	  return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	25	None	replace
140	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(key);  [CE]  cannot  find  symbol  key  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(key);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(key);	  boolean    required    =    options.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  key	50	None	replace
141	[BUG]  [BUGGY]  this.required  |=  selected;  [CE]  bad  operand  types  for  binary  operator  '|'  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  |=  selected;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  |=  selected;	  this.required    |=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '|'	24	None	replace
142	[BUG]  [BUGGY]  this.required  &=  null;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  &=  null;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  &=  null;	  this.required    |=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	24	None	replace
143	[BUG]  [BUGGY]  this.required  |=  selection;  [CE]  cannot  find  symbol  selection  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  |=  selection;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  |=  selection;	  this.required    |=    null;    	non-compiled	[CE]  cannot  find  symbol  selection	24	None	replace
144	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap.get(required));	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	55	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.equals(this.optionMap.get(selected));	  return    selected.equals(this.optionMap.get(required));    	compilable	  [FE]  AssertionFailedError  	55	6	replace
146	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap.get(selected));  [FE]  AssertionFailedError  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap.get(selected));	  return    selected.equals(this.optionMap.get(required));    	compilable	  [FE]  AssertionFailedError  	55	6	replace
147	[BUG]  [BUGGY]  return  this.optionMap.get(selected)!=  null  &&  this.optionMap.get(required);  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.get(selected)!=  null  &&  this.optionMap.get(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.get(selected)!=  null  &&  this.optionMap.get(required);	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	55	None	replace
148	[BUG]  [BUGGY]  return  this.optionMap.get(selected).equals(this.optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.get(selected).equals(this.optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.get(selected).equals(this.optionMap.get(required));	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	55	None	replace
149	[BUG]  [BUGGY]  if(this.required!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
150	[BUG]  [BUGGY]  if(this.required!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
151	[BUG]  [BUGGY]  if(this.required  ==  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
152	[BUG]  [BUGGY]  if(this.required  ==  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
153	[BUG]  [BUGGY]  return  this.selected.equals(this.optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(this.optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(this.optionMap.get(required));	  return    this.selected.equals(required);    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	54	None	replace
154	[BUG]  [BUGGY]  return  this.selected.equals(optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(optionMap.get(required));	  return    this.selected.equals(required);    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	54	None	replace
155	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(this.optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.selected.equals(this.optionMap.get(selected));	  return    this.selected.equals(required);    	compilable	  [FE]  NullPointerException  	54	9	replace
156	[BUG]  [BUGGY]  return  this.selected.equals(this.optionMap.get(selected));  [FE]  NullPointerException  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(this.optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(this.optionMap.get(selected));	  return    this.selected.equals(required);    	compilable	  [FE]  NullPointerException  	54	9	replace
157	[BUG]  [BUGGY]  return  this.selected.equals(optionMap.selected(required));  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(optionMap.selected(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(optionMap.selected(required));	  return    this.selected.equals(required);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
158	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  required.equals(this.optionMap.getKey(selected);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  required.equals(this.optionMap.getKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  required.equals(this.optionMap.getKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  ')'  expected	75	None	replace
159	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap.getKey(selected);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap.getKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap.getKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  ')'  expected	75	None	replace
160	[BUG]  [BUGGY]  return  selected.equals(this.optionMap.getKey(required))  &&  required.equals(this.optionMap.getKey(selected);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selected.equals(this.optionMap.getKey(required))  &&  required.equals(this.optionMap.getKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  selected.equals(this.optionMap.getKey(required))  &&  required.equals(this.optionMap.getKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  ')'  expected	75	None	replace
161	[BUG]  [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(this.optionMap.getKey(selected));  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(this.optionMap.getKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(required)&&  selected.equals(this.optionMap.getKey(selected));	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	75	None	replace
162	[BUG]  [BUGGY]  if(required)  {  this.required  =  true;  boolean  required  =  true;  }  [CE]  missing  return  statement  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required)  {  this.required  =  true;  boolean  required  =  true;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required)  {  this.required  =  true;  boolean  required  =  true;  }	          this.required    =    true;    boolean    required    =    true;    	non-compiled	[CE]  missing  return  statement	59	None	replace
163	[BUG]  [BUGGY]  if(this.required)  {  this.required  =  true;  boolean  required  =  true;  }  [CE]  missing  return  statement  [FE]      ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required)  {  this.required  =  true;  boolean  required  =  true;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required)  {  this.required  =  true;  boolean  required  =  true;  }	          this.required    =    true;    boolean    required    =    true;    	non-compiled	[CE]  missing  return  statement	59	None	replace
164	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  required.equals(this.optionMap.containsKey(selected);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  required.equals(this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  required.equals(this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.containsKey(selected);    	non-compiled	[CE]  ')'  expected	76	None	replace
165	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)||  selected.equals(this.optionMap.containsKey(selected);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)||  selected.equals(this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)||  selected.equals(this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.containsKey(selected);    	non-compiled	[CE]  ')'  expected	76	None	replace
166	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)&&  required.equals(this.optionMap.containsKey(selected);  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  required.equals(this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)&&  required.equals(this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.containsKey(selected);    	non-compiled	[CE]  ')'  expected	76	None	replace
167	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap.get(selected))  &&  selected.equals(this.optionMap.containsKey(selected);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap.get(selected))  &&  selected.equals(this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap.get(selected))  &&  selected.equals(this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.containsKey(selected);    	non-compiled	[CE]  ')'  expected	76	None	replace
168	[BUG]  [BUGGY]  final  boolean  required  =  optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  final  boolean  required  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	final  boolean  required  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	18	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(optionMap  ==  null)&&(optionMap.containsKey(selected));	  return(optionMap!=    null)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	95	6	replace
170	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(optionMap.containsKey(selected));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(optionMap.containsKey(selected));	  return(optionMap!=    null)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	95	6	replace
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(selected!=  null)&&(optionMap.containsKey(selected));	  return(optionMap!=    null)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	95	6	replace
172	[BUG]  [BUGGY]  return(selected!=  null)&&(optionMap.containsKey(selected));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  null)&&(optionMap.containsKey(selected));	  return(optionMap!=    null)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	95	6	replace
173	[BUG]  [BUGGY]  if(optionMap!=  null)  {  return(optionMap!=  null)&&(optionMap.containsKey(selected));  }  [CE]  missing  return  statement  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  return(optionMap!=  null)&&(optionMap.containsKey(selected));  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  return(optionMap!=  null)&&(optionMap.containsKey(selected));  }	  return(optionMap!=    null)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  missing  return  statement	95	None	replace
174	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey( "required ".equals(this.required));  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey( "required ".equals(this.required));  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey( "required ".equals(this.required));	          boolean    required    =    optionMap.containsKey(       "required       ");    boolean    required    =    optionMap.containsKey(   ".required   ");    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	37	None	replace
175	[BUG]  [BUGGY]  boolean  required  =  options.containsKey( "Required ");  [CE]  cannot  find  symbol  options  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey( "Required ");  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey( "Required ");	  boolean    required    =    options.containsKey(   "required   ");    	non-compiled	[CE]  cannot  find  symbol  options	14	None	replace
176	[BUG]  [BUGGY]  &&  options.containsKey(selected);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  options.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  options.containsKey(selected);	  &&    optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
177	[BUG]  [BUGGY]  &&  optionMap.containsKey(selected).booleanValue();  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  optionMap.containsKey(selected).booleanValue();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  optionMap.containsKey(selected).booleanValue();	  &&    optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
178	[BUG]  [BUGGY]  &&  optionMap.containsKey(selected,  required);  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  optionMap.containsKey(selected,  required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  optionMap.containsKey(selected,  required);	  &&    optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
179	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap)));    	non-compiled	[CE]  <identifier>  expected	124	None	replace
180	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selection);  [CE]  cannot  find  symbol  selection  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selection);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selection);	  boolean    required    =    this.optionMap.containsKey(this);    	non-compiled	[CE]  cannot  find  symbol  selection	123	None	replace
181	[BUG]  [BUGGY]  boolean  required  =  OptionMap.containsKey(selected);  [CE]  cannot  find  symbol  OptionMap  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  OptionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  OptionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    OptionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  OptionMap	102	None	replace
182	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected)||  OptionMap.containsKey(selected);  [CE]  cannot  find  symbol  OptionMap  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected)||  OptionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected)||  OptionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    OptionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  OptionMap	102	None	replace
183	[BUG]  [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	118	None	replace
184	[BUG]  [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(required));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	118	None	replace
185	[BUG]  [BUGGY]  return(selected  <  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  <  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  <  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	118	None	replace
186	[BUG]  [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selected)||  options.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selected)||  options.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >  0)&&(optionMap.containsKey(selected)||  options.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	118	None	replace
187	[BUG]  [BUGGY]  if(isRequired())  {  this.required  =  true;  this.required  =  true;  }  [CE]  missing  return  statement  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(isRequired())  {  this.required  =  true;  this.required  =  true;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(isRequired())  {  this.required  =  true;  this.required  =  true;  }	          this.required    =    true;    this.required    =    true;    	non-compiled	[CE]  missing  return  statement	57	None	replace
188	[BUG]  [BUGGY]  if(isRequired)  {  this.required  =  true;  this.required  =  false;  }  [CE]  cannot  find  symbol  isRequired  [FE]      ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(isRequired)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(isRequired)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    true;    	non-compiled	[CE]  cannot  find  symbol  isRequired	57	None	replace
189	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  if(required)  {  required  =  this.optionMap.containsKey(this.optionMap);  }  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  if(required)  {  required  =  this.optionMap.containsKey(this.optionMap);  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected);  if(required)  {  required  =  this.optionMap.containsKey(this.optionMap);  }	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    required    =    this.optionMap.containsKey(this.optionMap);    	non-compiled	[CE]  missing  return  statement	96	None	replace
190	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(optionMap);  [CE]  missing  return  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(optionMap);	  boolean    required    =    optionMap.containsKey(this.option);    	non-compiled	[CE]  missing  return  statement	112	None	replace
191	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(option);  [CE]  cannot  find  symbol  option  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(option);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(option);	  boolean    required    =    optionMap.containsKey(this.option);    	non-compiled	[CE]  cannot  find  symbol  option	112	None	replace
192	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&(optionMap.containsKey(selected));  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&(optionMap.containsKey(selected));  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected)&&(optionMap.containsKey(selected));	  boolean    required    =    optionMap.containsKey(selected)||(optionMap.containsKey(selected));    	non-compiled	[CE]  missing  return  statement	51	None	replace
193	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected)||(optionMap.containsKey(selected));  [CE]  cannot  find  symbol  options  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected)||(optionMap.containsKey(selected));  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected)||(optionMap.containsKey(selected));	  boolean    required    =    optionMap.containsKey(selected)||(optionMap.containsKey(selected));    	non-compiled	[CE]  cannot  find  symbol  options	51	None	replace
194	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    requires    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	97	None	add
195	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    requires    =    this.optionMap.containsKey(selected);    Boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	97	None	add
196	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  variable  requires  is  already  defined  in  method  isRequired()  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    requires    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  requires  is  already  defined  in  method  isRequired()	97	None	add
197	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.optionMap);  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.optionMap);  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    requires    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(this.optionMap);  boolean  requires  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	97	None	add
198	[BUG]  [BUGGY]  return(required  >=  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  >=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  >=  0)&&(optionMap.containsKey(required));	  return(selection    >=    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	77	None	replace
199	[BUG]  [BUGGY]  return(this.selected!=  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selected!=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selected!=  0)&&(optionMap.containsKey(required));	  return(selection    >=    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	77	None	replace
200	[BUG]  [BUGGY]  return(optionMap!=  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  0)&&(optionMap.containsKey(required));	  return(selection    >=    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	77	None	replace
201	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
202	[BUG]  [BUGGY]  return  this.optionMap!=  null  &&  this.required.containsKey(selected);  [CE]  boolean  cannot  be  dereferenced  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap!=  null  &&  this.required.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap!=  null  &&  this.required.containsKey(selected);	  return    this.required!=    null    &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	122	None	replace
203	[BUG]  [BUGGY]  boolean  required  =  this.optionMap!=  null  &&  this.required.containsKey(selected);  [CE]  boolean  cannot  be  dereferenced  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap!=  null  &&  this.required.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap!=  null  &&  this.required.containsKey(selected);	  return    this.required!=    null    &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	122	None	replace
204	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required!=  null  &&  this.optionMap.containsKey(selected);  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required!=  null  &&  this.optionMap.containsKey(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required!=  null  &&  this.optionMap.containsKey(selected);  }	  return    this.required!=    null    &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	122	None	replace
205	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  this.optionMap.equals(required);	  return    this.optionMap.equals(selected)&&    selected.equals(required);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	66	None	replace
206	[BUG]  [BUGGY]  return  selected.equals(this.optionMap)&&  selected.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selected.equals(this.optionMap)&&  selected.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  selected.equals(this.optionMap)&&  selected.equals(required);	  return    this.optionMap.equals(selected)&&    selected.equals(required);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	66	None	replace
207	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected,  required);  [CE]  no  suitable  method  found  for  equals(String,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected,  required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  this.optionMap.equals(selected,  required);	  return    this.optionMap.equals(selected)&&    selected.equals(required);    	non-compiled	[CE]  no  suitable  method  found  for  equals(String,boolean)	66	None	replace
208	[BUG]  [BUGGY]  if(selected!=  null)  {  return  false;  }  [CE]  missing  return  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(selected!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(selected!=  null)  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	31	None	replace
209	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  }  [CE]  missing  return  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	31	None	replace
210	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  true;  this.required  =  true;  boolean  required  =  true;  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  this.required  =  true;  boolean  required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    true;    this.required  =  true;  boolean  required  =  true;	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	58	None	add
211	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  true;  boolean  required  =  true;  boolean  required  =  true;  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]      ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  boolean  required  =  true;  boolean  required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    true;    boolean  required  =  true;  boolean  required  =  true;	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	58	None	add
212	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  true;  This.required  =  true;  boolean  required  =  true;  [CE]  cannot  find  symbol  This  [FE]        ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  This.required  =  true;  boolean  required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    true;    This.required  =  true;  boolean  required  =  true;	  	non-compiled	[CE]  cannot  find  symbol  This	58	None	add
213	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  this.required  =  true;  boolean  needed  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        boolean    required    =    true;    this.required  =  true;  boolean  needed  =  true;	  	compilable	  [FE]  ComparisonFailure  	58	3	add
214	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  true;  this.required  =  true;  boolean  needed  =  true;  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  this.required  =  true;  boolean  needed  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    true;    this.required  =  true;  boolean  needed  =  true;	  	compilable	  [FE]  ComparisonFailure  	58	3	add
215	[BUG]  [BUGGY]  return  optionMap.isRequired();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.isRequired();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.isRequired();	  return    this.optionMap.isRequired();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
216	[BUG]  [BUGGY]  return  this.optionMap.isRequired()  ||  this.optionMap.isRequired();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.isRequired()  ||  this.optionMap.isRequired();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.isRequired()  ||  this.optionMap.isRequired();	  return    this.optionMap.isRequired();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
217	[BUG]  [BUGGY]  return(selected  <  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  <  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  <  0)&&(optionMap.containsKey(required));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
218	[BUG]  [BUGGY]  return(optionMap  <  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  <  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  <  0)&&(optionMap.containsKey(required));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
219	[BUG]  [BUGGY]  return(this.selected  <  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selected  <  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selected  <  0)&&(optionMap.containsKey(required));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
220	[BUG]  [BUGGY]  return(required  <  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  <  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  <  0)&&(optionMap.containsKey(required));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
221	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    needed    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	69	None	add
222	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    needed    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	69	None	add
223	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  Boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    needed    =    this.optionMap.containsKey(selected);    Boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	69	None	add
224	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [CE]  variable  needed  is  already  defined  in  method  isRequired()  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    needed    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  needed  is  already  defined  in  method  isRequired()	69	None	add
225	[BUG]  [BUGGY]  if(this.required!=  null)  {  for(Map  optionMap  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  for(Map  optionMap  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  for(Map  optionMap  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
226	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(Map  optionMap  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(Map  optionMap  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required;  for(Map  optionMap  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
227	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required;  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
228	[BUG]  [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  0)&&(optionMap.containsKey(selected));	  return(selected    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	27	None	replace
229	[BUG]  [BUGGY]  return(selected  ==  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  ==  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  ==  0)&&(optionMap.containsKey(selected));	  return(selected    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	27	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  ==  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(selected  ==  null)&&(optionMap.containsKey(selected));	  return(selected    >    0)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	27	6	replace
231	[BUG]  [BUGGY]  return(selected  ==  null)&&(optionMap.containsKey(selected));  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  ==  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  ==  null)&&(optionMap.containsKey(selected));	  return(selected    >    0)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	27	6	replace
232	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required;  this.required  =  false;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required;  this.required  =  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required;  this.required  =  false;  }	  return    this.required;    this.required    =    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	88	None	replace
233	[BUG]  [BUGGY]  if(this.required  ==  null)  {  return  this.required;  this.required  =  false;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  return  this.required;  this.required  =  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  return  this.required;  this.required  =  false;  }	  return    this.required;    this.required    =    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	88	None	replace
234	[BUG]  [BUGGY]  if(this.required)  {  return  this.required;  this.required  =  false;  }  [CE]  unreachable  statement  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required)  {  return  this.required;  this.required  =  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required)  {  return  this.required;  this.required  =  false;  }	  return    this.required;    this.required    =    false;    	non-compiled	[CE]  unreachable  statement	88	None	replace
235	[BUG]  [BUGGY]  this.required  =  selected;  [CE]  incompatible  types  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  selected;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  selected;	  this.required    =    null;    	non-compiled	[CE]  incompatible  types	92	None	replace
236	[BUG]  [BUGGY]  this.required  =  required;  [CE]  missing  return  statement  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  required;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  required;	  this.required    =    null;    	non-compiled	[CE]  missing  return  statement	92	None	replace
237	[BUG]  [BUGGY]  this.required  =  new  boolean[size()  ];  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  new  boolean[size()  ];  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  new  boolean[size()  ];	  this.required    =    null;    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
238	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  unreachable  statement	81	None	add
239	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  this.optionMap.containsKey(selected);  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    this.optionMap.containsKey(selected);	  	non-compiled	[CE]  unreachable  statement	81	None	add
240	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    if(selected!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
241	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    if(selected!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
242	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    if(selected!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
243	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    requires    =    optionMap.containsKey(selected);    boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	100	None	add
244	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  boolean  required  =  optionsMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  boolean  required  =  optionsMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    requires    =    optionMap.containsKey(selected);    boolean  required  =  optionsMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	100	None	add
245	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  Boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    requires    =    optionMap.containsKey(selected);    Boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	100	None	add
246	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  final  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  final  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    requires    =    optionMap.containsKey(selected);    final  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	100	None	add
247	[BUG]  [BUGGY]  this.optionMap.containsKey(key);  [CE]  cannot  find  symbol  key  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.containsKey(key);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.containsKey(key);	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  key	47	None	replace
248	[BUG]  [BUGGY]  this.optionMap.containsKey(selected.toLowerCase());  [CE]  missing  return  statement  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.containsKey(selected.toLowerCase());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.containsKey(selected.toLowerCase());	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	47	None	replace
249	[BUG]  [BUGGY]  this.optionMap.containsKey(this.required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.containsKey(this.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.containsKey(this.required);	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	47	None	replace
250	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  false;  }	  return    this.required;    this.required;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	29	None	replace
251	[BUG]  [BUGGY]  this.required;  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required;	  return    this.required;    this.required;    	non-compiled	[CE]  not  a  statement	29	None	replace
252	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  true;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  true;  }	  return    this.required;    this.required;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	29	None	replace
253	[BUG]  [BUGGY]  if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    this.optionMap.isRequired();    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
254	[BUG]  [BUGGY]  if(this.required  ==  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    this.optionMap.isRequired();    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
255	[BUG]  [BUGGY]  if(this.required  >=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  >=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  >=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    this.optionMap.isRequired();    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
256	[BUG]  [BUGGY]  boolean  required  =  options.containsValue(selected);  [CE]  cannot  find  symbol  options  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsValue(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsValue(selected);	  boolean    required    =    optionMap.containsValue(selected);    	non-compiled	[CE]  cannot  find  symbol  options	131	None	replace
257	[BUG]  [BUGGY]  boolean  required  =  optionMap.contains(selected);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.contains(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.contains(selected);	  boolean    required    =    optionMap.containsValue(selected);    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
258	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected).booleanValue();  boolean  requires  =  optionMap.containsKey(selected);  [CE]  boolean  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected).booleanValue();  boolean  requires  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected).booleanValue();  boolean  requires  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    requires    =    optionMap.containsKey(selected);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	101	None	replace
259	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [CE]  cannot  find  symbol  options  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected);  boolean  requires  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    requires    =    optionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  options	101	None	replace
260	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  (optionMap!=  null)&&(optionMap.containsKey(selected));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  (optionMap!=  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    (optionMap!=  null)&&(optionMap.containsKey(selected));	  	non-compiled	[CE]  not  a  statement	94	None	add
261	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  if(optionMap!=  null)&&(optionMap.containsKey(selected));  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  if(optionMap!=  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    if(optionMap!=  null)&&(optionMap.containsKey(selected));	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
262	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  &&(optionMap!=  null)&&(optionMap.containsKey(selected));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  &&(optionMap!=  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    &&(optionMap!=  null)&&(optionMap.containsKey(selected));	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
263	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  if(optionMap!=  null)&&(optionMap.containsKey(selected));  }  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  if(optionMap!=  null)&&(optionMap.containsKey(selected));  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    if(optionMap!=  null)&&(optionMap.containsKey(selected));  }	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
264	[BUG]  [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(selection));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(selection));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  0)&&(optionMap.containsKey(selection));	  return(selected    >    0)&&(optionMap.containsKey(selection));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	40	None	replace
265	[BUG]  [BUGGY]  return(selected  ==  0)&&(optionMap.containsKey(selection));  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  ==  0)&&(optionMap.containsKey(selection));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  ==  0)&&(optionMap.containsKey(selection));	  return(selected    >    0)&&(optionMap.containsKey(selection));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	40	None	replace
266	[BUG]  [BUGGY]  return(selected!=  null)&&(optionMap.containsKey(selection));  [CE]  cannot  find  symbol  selection  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  null)&&(optionMap.containsKey(selection));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  null)&&(optionMap.containsKey(selection));	  return(selected    >    0)&&(optionMap.containsKey(selection));    	non-compiled	[CE]  cannot  find  symbol  selection	40	None	replace
267	[BUG]  [BUGGY]  return  this.required!=  null  ||  this.required;  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  ||  this.required;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  ||  this.required;	  return    this.required!=    null    &&    this.required;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	44	None	replace
268	[BUG]  [BUGGY]  if(this.required!=  null)required  =  false;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)required  =  false;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)required  =  false;  if(this.optionMap.containsKey(selected))  {  return  false;  }	  if(this.required!=    null)required    =    true;    if(this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	42	None	replace
269	[BUG]  [BUGGY]  if(this.optionMap!=  null)required  =  true;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  missing  return  statement  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)required  =  true;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)required  =  true;  if(this.optionMap.containsKey(selected))  {  return  false;  }	  if(this.required!=    null)required    =    true;    if(this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  missing  return  statement	42	None	replace
270	[BUG]  [BUGGY]  if(this.required  ==  null)required  =  false;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)required  =  false;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)required  =  false;  if(this.optionMap.containsKey(selected))  {  return  false;  }	  if(this.required!=    null)required    =    true;    if(this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	42	None	replace
271	[BUG]  [BUGGY]  boolean  required  =  optionsMap.containsKey(selected).booleanValue();  [CE]  cannot  find  symbol  optionsMap  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionsMap.containsKey(selected).booleanValue();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionsMap.containsKey(selected).booleanValue();	  boolean    required    =    this.optionMap.containsKey(selected).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  optionsMap	11	None	replace
272	[BUG]  [BUGGY]  if(required  ==  false)  {  required  =  true;  }  [CE]  missing  return  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required  ==  false)  {  required  =  true;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required  ==  false)  {  required  =  true;  }	  if(required!=    false)    {    required    =    true;    }    	non-compiled	[CE]  missing  return  statement	117	None	replace
273	[BUG]  [BUGGY]  if(required  ==  false)  {  required  =  false;  }  [CE]  missing  return  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required  ==  false)  {  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required  ==  false)  {  required  =  false;  }	  if(required!=    false)    {    required    =    true;    }    	non-compiled	[CE]  missing  return  statement	117	None	replace
274	[BUG]  [BUGGY]  if(required!=  false)  {  required  =  false;  }  [CE]  missing  return  statement  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required!=  false)  {  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required!=  false)  {  required  =  false;  }	  if(required!=    false)    {    required    =    true;    }    	non-compiled	[CE]  missing  return  statement	117	None	replace
275	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    false;    this.required  =  true;  this.required  =  false;	  	compilable	  [FE]  AssertionFailedError  	61	6	add
276	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.required  =  false;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    false;    this.required  =  true;  this.required  =  false;	  	compilable	  [FE]  AssertionFailedError  	61	6	add
277	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  boolean  required  =  true;  this.required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    false;    boolean  required  =  true;  this.required  =  false;	  	compilable	  [FE]  ComparisonFailure  	61	3	add
278	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  false;  boolean  required  =  true;  this.required  =  false;  [FE]  ComparisonFailure  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  boolean  required  =  true;  this.required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    false;    boolean  required  =  true;  this.required  =  false;	  	compilable	  [FE]  ComparisonFailure  	61	3	add
279	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  false;  This.required  =  true;  this.required  =  false;  [CE]  cannot  find  symbol  This  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  This.required  =  true;  this.required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    false;    This.required  =  true;  this.required  =  false;	  	non-compiled	[CE]  cannot  find  symbol  This	61	None	add
280	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.reQUIred  =  false;  [CE]  cannot  find  symbol  reQUIred  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.reQUIred  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    false;    this.required  =  true;  this.reQUIred  =  false;	  	non-compiled	[CE]  cannot  find  symbol  reQUIred	61	None	add
281	[BUG]  [BUGGY]  return  optionMap.get(required);  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.get(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.get(required);	  return    selected.equals(optionMap.get(required);    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	80	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  optionMap.containsKey(selected);	  return    selected.equals(optionMap.get(required);    	compilable	  [FE]  AssertionFailedError  	80	6	replace
283	[BUG]  [BUGGY]  return  optionMap.containsKey(selected);  [FE]  AssertionFailedError  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.containsKey(selected);	  return    selected.equals(optionMap.get(required);    	compilable	  [FE]  AssertionFailedError  	80	6	replace
284	[BUG]  [BUGGY]  return  optionMap.get(selected);  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.get(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.get(selected);	  return    selected.equals(optionMap.get(required);    	non-compiled	[CE]  incompatible  types	80	None	replace
285	[BUG]  [BUGGY]  Return(selected  ==  0)&&(optionMap.containsKey(required));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Return(selected  ==  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Return(selected  ==  0)&&(optionMap.containsKey(required));	  Return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  not  a  statement	119	None	replace
286	[BUG]  [BUGGY]  Return(selected  >  0)&&(optionMap.containsKey(selected));  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Return(selected  >  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Return(selected  >  0)&&(optionMap.containsKey(selected));	  Return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  not  a  statement	119	None	replace
287	[BUG]  [BUGGY]  Return(selected!=  0)&&(optionMap.containsKey(required));  [CE]  not  a  statement  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Return(selected!=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Return(selected!=  0)&&(optionMap.containsKey(required));	  Return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  not  a  statement	119	None	replace
288	[BUG]  [BUGGY]  Return(selected  >=  0)&&(optionMap.containsKey(required));  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Return(selected  >=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Return(selected  >=  0)&&(optionMap.containsKey(required));	  Return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  not  a  statement	119	None	replace
289	[BUG]  [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selection,  required));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >  0)&&(optionMap.containsKey(selection,  required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >  0)&&(optionMap.containsKey(selection,  required));	  return(required    >    0)&&(optionMap.containsKey(selection,    selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	133	None	replace
290	[BUG]  [BUGGY]  return(selection  >  0)&&(optionMap.containsKey(selection,  required));  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection  >  0)&&(optionMap.containsKey(selection,  required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection  >  0)&&(optionMap.containsKey(selection,  required));	  return(required    >    0)&&(optionMap.containsKey(selection,    selected));    	non-compiled	[CE]  cannot  find  symbol  selection	133	None	replace
291	[BUG]  [BUGGY]  return(selection  >  0)&&(optionMap.containsKey(required,  selected));  [CE]  cannot  find  symbol  selection  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection  >  0)&&(optionMap.containsKey(required,  selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection  >  0)&&(optionMap.containsKey(required,  selected));	  return(required    >    0)&&(optionMap.containsKey(selection,    selected));    	non-compiled	[CE]  cannot  find  symbol  selection	133	None	replace
292	[BUG]  [BUGGY]  return(selection  <  0)&&(optionMap.containsKey(selection,  required));  [CE]  cannot  find  symbol  selection  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection  <  0)&&(optionMap.containsKey(selection,  required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection  <  0)&&(optionMap.containsKey(selection,  required));	  return(required    >    0)&&(optionMap.containsKey(selection,    selected));    	non-compiled	[CE]  cannot  find  symbol  selection	133	None	replace
293	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
294	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	89	None	replace
295	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	89	None	replace
296	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	89	None	replace
297	[BUG]  [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  <identifier>  expected	116	None	replace
298	[BUG]  [BUGGY]  return(selected!=  null)?  required  :  selected.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  null)?  required  :  selected.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  null)?  required  :  selected.equals(required);	  return    required.equals(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	53	None	replace
299	[BUG]  [BUGGY]  return  selection.equals(required);  [CE]  cannot  find  symbol  selection  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selection.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  selection.equals(required);	  return    required.equals(selected);    	non-compiled	[CE]  cannot  find  symbol  selection	53	None	replace
300	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selection);  [CE]  cannot  find  symbol  selection  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selection);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selection);	  boolean    required    =    this.optionMap.containsKey(this.select);    	non-compiled	[CE]  cannot  find  symbol  selection	79	None	replace
301	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selector);  [CE]  cannot  find  symbol  selector  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selector);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selector);	  boolean    required    =    this.optionMap.containsKey(this.select);    	non-compiled	[CE]  cannot  find  symbol  selector	79	None	replace
302	[BUG]  [BUGGY]  return(this.selected  >  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selected  >  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selected  >  0)&&(optionMap.containsKey(selected));	  return(selection    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	132	None	replace
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.size()  >  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(optionMap.size()  >  0)&&(optionMap.containsKey(selected));	  return(selection    >    0)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	132	6	replace
304	[BUG]  [BUGGY]  return(optionMap.size()  >  0)&&(optionMap.containsKey(selected));  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.size()  >  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.size()  >  0)&&(optionMap.containsKey(selected));	  return(selection    >    0)&&(optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	132	6	replace
305	[BUG]  [BUGGY]  return(required.size()  >  0)||(optionMap  <  optionMap.size());  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required.size()  >  0)||(optionMap  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required.size()  >  0)||(optionMap  <  optionMap.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	2	None	replace
306	[BUG]  [BUGGY]  return(required.size()  >  0)||(optionMap  <  required.size());  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required.size()  >  0)||(optionMap  <  required.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required.size()  >  0)||(optionMap  <  required.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	2	None	replace
307	[BUG]  [BUGGY]  return(optionMap.size()  >  0)||(required  <  options.size());  [CE]  cannot  find  symbol  options  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.size()  >  0)||(required  <  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.size()  >  0)||(required  <  options.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  cannot  find  symbol  options	2	None	replace
308	[BUG]  [BUGGY]  return(optionMap.size()  >  0)||(required  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.size()  >  0)||(required  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.size()  >  0)||(required  <  optionMap.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	2	None	replace
309	[BUG]  [BUGGY]  this.required  =  false;  This.required  =  true;  [CE]  cannot  find  symbol  This  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  false;  This.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  false;  This.required  =  true;	          this.required    =    true;    This.required    =    true;    	non-compiled	[CE]  cannot  find  symbol  This	60	None	replace
310	[BUG]  [BUGGY]  this.required  =  false;  This.required  =  false;  [CE]  cannot  find  symbol  This  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  false;  This.required  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  false;  This.required  =  false;	          this.required    =    true;    This.required    =    true;    	non-compiled	[CE]  cannot  find  symbol  This	60	None	replace
311	[BUG]  [BUGGY]  return(optionMap.containsKey(selected))  &&(required  ==  0));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected))  &&(required  ==  0));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected))  &&(required  ==  0));	  return(optionMap.containsKey(selected))    &&(required    >    0));    	non-compiled	[CE]  ';'  expected	28	None	replace
312	[BUG]  [BUGGY]  return(optionMap.containsKey(selected))  ||(required  >  0));  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected))  ||(required  >  0));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected))  ||(required  >  0));	  return(optionMap.containsKey(selected))    &&(required    >    0));    	non-compiled	[CE]  ';'  expected	28	None	replace
313	[BUG]  [BUGGY]  return(optionMap.containsKey(selected))  &&(required!=  0));  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected))  &&(required!=  0));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected))  &&(required!=  0));	  return(optionMap.containsKey(selected))    &&(required    >    0));    	non-compiled	[CE]  ';'  expected	28	None	replace
314	[BUG]  [BUGGY]  return(optionMap.containsKey(selected))  &&(required  >=  0));  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected))  &&(required  >=  0));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected))  &&(required  >=  0));	  return(optionMap.containsKey(selected))    &&(required    >    0));    	non-compiled	[CE]  ';'  expected	28	None	replace
315	[BUG]  [BUGGY]  final  boolean  required  =  this.optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  final  boolean  required  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	final  boolean  required  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    required    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	67	None	replace
316	[BUG]  [BUGGY]  if(this.required  ==  null)  {  return  this.required;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  return  this.required;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  return  this.required;  }	  if(this.required!=    null)    {    return    this.required;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	43	None	replace
317	[BUG]  [BUGGY]  if(this.required!=  null  ||  this.required.length()  ==  0)  {  return  this.required;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null  ||  this.required.length()  ==  0)  {  return  this.required;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null  ||  this.required.length()  ==  0)  {  return  this.required;  }	  if(this.required!=    null)    {    return    this.required;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
318	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.optionMap);  boolean  needed  =  this.optionMap.containsKey(this.optionMap);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.optionMap);  boolean  needed  =  this.optionMap.containsKey(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    needed    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(this.optionMap);  boolean  needed  =  this.optionMap.containsKey(this.optionMap);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	69	None	add
319	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.required);  boolean  needed  =  this.optionMap.containsKey(this.required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.required);  boolean  needed  =  this.optionMap.containsKey(this.required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.required);  boolean  needed  =  this.optionMap.containsKey(this.required);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    needed    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	70	None	replace
320	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected);  boolean  needed  =  this.optionMap.containsKey(required);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    needed    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	70	None	replace
321	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  <identifier>  expected	126	None	replace
322	[BUG]  [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  <identifier>  expected	126	None	replace
323	[BUG]  [BUGGY]  return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  <identifier>  expected	126	None	replace
324	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.    	non-compiled	[CE]  <identifier>  expected	126	None	replace
325	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  super.isRequired();  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  super.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  super.isRequired();  }	  if(this.required!=    null)    {    return    this.required;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
326	[BUG]  [BUGGY]  if(this.required!=  null)  {  return  this.required  =  false;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  return  this.required  =  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  return  this.required  =  false;  }	  if(this.required!=    null)    {    return    this.required;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
327	[BUG]  [BUGGY]  return  required.equals(optionMap.get(selected));  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  required.equals(optionMap.get(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  required.equals(optionMap.get(selected));	  return    selected.equals(optionMap.get(required));    	non-compiled	[CE]  boolean  cannot  be  dereferenced	52	None	replace
328	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(required);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    required    =    this.optionMap.containsKey(this.optionMap);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	96	None	replace
329	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  boolean  required  =  this.optionMap.equals(required)&&  selected.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  boolean  required  =  this.optionMap.equals(required)&&  selected.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    boolean  required  =  this.optionMap.equals(required)&&  selected.equals(required);	  	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	64	None	add
330	[BUG]  [BUGGY]  Return(required  >  0)&&(optionMap.containsKey(selected));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Return(required  >  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Return(required  >  0)&&(optionMap.containsKey(selected));	  Return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  not  a  statement	119	None	replace
331	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)&&  this.optionMap.get(required);  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  this.optionMap.get(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)&&  this.optionMap.get(required);	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	55	None	replace
332	[BUG]  [BUGGY]  return  this.optionMap.get(selected);  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.get(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.get(selected);	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  incompatible  types	55	None	replace
333	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(this.optionMap.getKey(selected);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(this.optionMap.getKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(this.optionMap.getKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  ')'  expected	75	None	replace
334	[BUG]  [BUGGY]  return  this.optionMap.equals(required)&&  this.optionMap.getValue(selected);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(required)&&  this.optionMap.getValue(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(required)&&  this.optionMap.getValue(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	75	None	replace
335	[BUG]  [BUGGY]  return  this.optionMap.equals(required)&&  this.optionMap.containsKey(selected);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(required)&&  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(required)&&  this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	75	None	replace
336	[BUG]  [BUGGY]  if(this.required  ==  null)  {  if(this.optionMap!=  null)  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  if(this.optionMap!=  null)  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  if(this.optionMap!=  null)  {  return  true;  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
337	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.contains(this.optionMap);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.contains(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.contains(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(this.optionMap);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
338	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsValue(this.optionMap);  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsValue(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsValue(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(this.optionMap);    	non-compiled	[CE]  missing  return  statement	91	None	replace
339	[BUG]  [BUGGY]  &&  optionMap.containsKey(required);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  optionMap.containsKey(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  optionMap.containsKey(required);	  &&    optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
340	[BUG]  [BUGGY]  &&  optionMap.containsKey(this.required);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  optionMap.containsKey(this.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  optionMap.containsKey(this.required);	  &&    optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
341	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this)||  this.optionMap.containsKey(this);  [CE]  missing  return  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this)||  this.optionMap.containsKey(this);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this)||  this.optionMap.containsKey(this);	  boolean    required    =    this.optionMap.containsKey(this);    	non-compiled	[CE]  missing  return  statement	123	None	replace
342	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsValue(this.option);  [CE]  cannot  find  symbol  option  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsValue(this.option);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsValue(this.option);	  boolean    required    =    optionMap.containsValue(selected);    	non-compiled	[CE]  cannot  find  symbol  option	131	None	replace
343	[BUG]  [BUGGY]  boolean  required  =  optionsMap.containsKey(this.option);  [CE]  cannot  find  symbol  option  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionsMap.containsKey(this.option);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionsMap.containsKey(this.option);	  boolean    required    =    optionMap.containsKey(this.option);    	non-compiled	[CE]  cannot  find  symbol  option	112	None	replace
344	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap)));    	non-compiled	[CE]  ')'  expected	124	None	replace
345	[BUG]  [BUGGY]  if(this.required!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	89	None	replace
346	[BUG]  [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	89	None	replace
347	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(required);	          boolean    required    =    optionMap.containsKey(selected);    Boolean    required    =    optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	19	None	replace
348	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  this.required  =  false;  }  [CE]  unreachable  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  this.required  =  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  this.required  =  false;  }	  return    this.required;    this.required    =    false;    	non-compiled	[CE]  unreachable  statement	88	None	replace
349	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected)&&(optionMap.containsKey(selected));  [CE]  cannot  find  symbol  options  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected)&&(optionMap.containsKey(selected));  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected)&&(optionMap.containsKey(selected));	  boolean    required    =    optionMap.containsKey(selected)||(optionMap.containsKey(selected));    	non-compiled	[CE]  cannot  find  symbol  options	51	None	replace
350	[BUG]  [BUGGY]  return  selector.equals(required);  [CE]  cannot  find  symbol  selector  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selector.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  selector.equals(required);	  return    required.equals(selected);    	non-compiled	[CE]  cannot  find  symbol  selector	53	None	replace
351	[BUG]  [BUGGY]  return(selection!=  0)&&(optionMap.containsKey(selection,  required));  [CE]  cannot  find  symbol  selection  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection!=  0)&&(optionMap.containsKey(selection,  required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection!=  0)&&(optionMap.containsKey(selection,  required));	  return(required    >    0)&&(optionMap.containsKey(selection,    selected));    	non-compiled	[CE]  cannot  find  symbol  selection	133	None	replace
352	[BUG]  [BUGGY]  return(selection  ==  0)&&(optionMap.containsKey(selection,  required));  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection  ==  0)&&(optionMap.containsKey(selection,  required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection  ==  0)&&(optionMap.containsKey(selection,  required));	  return(required    >    0)&&(optionMap.containsKey(selection,    selected));    	non-compiled	[CE]  cannot  find  symbol  selection	133	None	replace
353	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey( "required ".equals(optionMap.get( "required ")));  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey( "required ".equals(optionMap.get( "required ")));  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey( "required ".equals(optionMap.get( "required ")));	          boolean    required    =    optionMap.containsKey(       "required       ");    boolean    required    =    optionMap.containsKey(   "required       ");    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	36	None	replace
354	[BUG]  [BUGGY]  return(this.selection  >=  0)&&(optionMap.containsKey(required));  [CE]  cannot  find  symbol  selection  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selection  >=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selection  >=  0)&&(optionMap.containsKey(required));	  return(selection    >=    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  cannot  find  symbol  selection	77	None	replace
355	[BUG]  [BUGGY]  return(this.selected  >=  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selected  >=  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selected  >=  0)&&(optionMap.containsKey(required));	  return(selection    >=    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	77	None	replace
356	[BUG]  [BUGGY]  boolean  required  =  OptionMap.containsKey(required);  [CE]  cannot  find  symbol  OptionMap  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  OptionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  OptionMap.containsKey(required);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    OptionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  OptionMap	102	None	replace
357	[BUG]  [BUGGY]  if(this.required!=  false)  {  this.required  =  true;  boolean  required  =  false;  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  false)  {  this.required  =  true;  boolean  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  false)  {  this.required  =  true;  boolean  required  =  false;  }	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  missing  return  statement	109	None	replace
358	[BUG]  [BUGGY]  if(this.required)  {  this.required  =  true;  boolean  required  =  false;  }  [CE]  missing  return  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required)  {  this.required  =  true;  boolean  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required)  {  this.required  =  true;  boolean  required  =  false;  }	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  missing  return  statement	109	None	replace
359	[BUG]  [BUGGY]  boolean  required  =  optionsMap.containsKey( "Required ");  [CE]  cannot  find  symbol  optionsMap  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionsMap.containsKey( "Required ");  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionsMap.containsKey( "Required ");	  boolean    required    =    optionMap.containsKey(   "Required   ");    	non-compiled	[CE]  cannot  find  symbol  optionsMap	13	None	replace
360	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap    	non-compiled	[CE]  ')'  expected	125	None	replace
361	[BUG]  [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap    	non-compiled	[CE]  ')'  expected	125	None	replace
362	[BUG]  [BUGGY]  return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap    	non-compiled	[CE]  ')'  expected	125	None	replace
363	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  true;  boolean  required  =  true;  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  boolean  required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    true;    boolean  required  =  true;	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	58	None	add
364	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap)&&  this.optionMap.containsKey(this.optionMap);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap)&&  this.optionMap.containsKey(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.optionMap)&&  this.optionMap.containsKey(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(selected)&&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	120	None	replace
365	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected)&&  this.optionMap.containsKey(this.optionMap);  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected)&&  this.optionMap.containsKey(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected)&&  this.optionMap.containsKey(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(selected)&&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	120	None	replace
366	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selector);  [CE]  cannot  find  symbol  selector  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selector);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selector);	  boolean    required    =    optionMap.containsKey(key);    	non-compiled	[CE]  cannot  find  symbol  selector	5	None	replace
367	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  boolean  required  =  false;  this.required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    true;    boolean  required  =  false;  this.required  =  true;  this.required  =  true;	  	compilable	  [FE]  AssertionFailedError  	56	6	add
368	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  true;  boolean  required  =  false;  this.required  =  true;  this.required  =  true;  [FE]  AssertionFailedError  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  true;  boolean  required  =  false;  this.required  =  true;  this.required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    true;    boolean  required  =  false;  this.required  =  true;  this.required  =  true;	  	compilable	  [FE]  AssertionFailedError  	56	6	add
369	[BUG]  [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(optionMap.equals(selected));  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(optionMap.equals(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(required)&&  selected.equals(optionMap.equals(selected));	  return    this.optionMap.equals(required)&&    selected.equals(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	63	None	replace
370	[BUG]  [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(optionMap.equals(selected);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(optionMap.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(required)&&  selected.equals(optionMap.equals(selected);	  return    this.optionMap.equals(required)&&    selected.equals(selected);    	non-compiled	[CE]  ')'  expected	63	None	replace
371	[BUG]  [BUGGY]  return  this.required.equals(optionMap.get(required);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required.equals(optionMap.get(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required.equals(optionMap.get(required);	  return    selected.equals(optionMap.get(required);    	non-compiled	[CE]  ')'  expected	80	None	replace
372	[BUG]  [BUGGY]  return  optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.containsKey(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.containsKey(required);	  return    selected.equals(optionMap.get(required);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	80	None	replace
373	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  >  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)&&(optionMap.size()  >  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
374	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap!=  null.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap!=  null.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)&&(optionMap!=  null.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
375	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
376	[BUG]  [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.keySet())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	86	None	replace
377	[BUG]  [BUGGY]  return  options.isRequired();  [CE]  cannot  find  symbol  options  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  options.isRequired();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  options.isRequired();	  return    this.optionMap.isRequired();    	non-compiled	[CE]  cannot  find  symbol  options	45	None	replace
378	[BUG]  [BUGGY]  return  optionsMap.isRequired();  [CE]  cannot  find  symbol  optionsMap  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionsMap.isRequired();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionsMap.isRequired();	  return    this.optionMap.isRequired();    	non-compiled	[CE]  cannot  find  symbol  optionsMap	45	None	replace
379	[BUG]  [BUGGY]  &&  options.containsKey(selected));  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  options.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  options.containsKey(selected));	  &&    this.optionMap.containsKey(selected));    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
380	[BUG]  [BUGGY]  if(required  ==  true)  {  required  =  true;  }  [CE]  missing  return  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required  ==  true)  {  required  =  true;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required  ==  true)  {  required  =  true;  }	  if(required!=    false)    {    required    =    true;    }    	non-compiled	[CE]  missing  return  statement	117	None	replace
381	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  optionMap.size());	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
382	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  0);  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  0);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  0);	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
383	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  options.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >  options.size());	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
384	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.containsKey(optionMap.keySet()));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.containsKey(optionMap.keySet()));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.containsKey(optionMap.keySet()));	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
385	[BUG]  [BUGGY]  return(optionMap!=  null)||(required  >  0)||(optionMap.size()  >  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)||(required  >  0)||(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)||(required  >  0)||(optionMap.size()  >  optionMap.size());	  return(optionMap!=    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	1	None	replace
386	[BUG]  [BUGGY]  return(optionMap  ==  null)||(required  >  0)||(optionMap.size()  >  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)||(required  >  0)||(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)||(required  >  0)||(optionMap.size()  >  optionMap.size());	  return(optionMap!=    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	1	None	replace
387	[BUG]  [BUGGY]  return  this.required  ==  null  &&  this.optionMap.containsKey(selected);  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required  ==  null  &&  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required  ==  null  &&  this.optionMap.containsKey(selected);	  return    this.required!=    null    &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	122	None	replace
388	[BUG]  [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  &&  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);	  return    this.required!=    null    &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	122	None	replace
389	[BUG]  [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(required!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  ')'  expected	114	None	replace
390	[BUG]  [BUGGY]  return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(required!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  ')'  expected	114	None	replace
391	[BUG]  [BUGGY]  return(optionMap.size()  >  0)&&(required  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.size()  >  0)&&(required  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.size()  >  0)&&(required  <  optionMap.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	2	None	replace
392	[BUG]  [BUGGY]  return(required.size()  >  0)||(optionMap  <  options.size());  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required.size()  >  0)||(optionMap  <  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required.size()  >  0)||(optionMap  <  options.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	2	None	replace
393	[BUG]  [BUGGY]  return(optionMap  >  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  >  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  >  0)&&(optionMap.containsKey(required));	  return(selection    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
394	[BUG]  [BUGGY]  return(required  >  0)&&(optionMap.containsKey(option));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  >  0)&&(optionMap.containsKey(option));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  >  0)&&(optionMap.containsKey(option));	  return(selection    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
395	[BUG]  [BUGGY]  return(optionMap  >  0)&&(optionMap.containsKey(option));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  >  0)&&(optionMap.containsKey(option));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  >  0)&&(optionMap.containsKey(option));	  return(selection    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	38	None	replace
396	[BUG]  [BUGGY]  return(this.optionMap  <  0)&&(optionMap.containsKey(required));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.optionMap  <  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.optionMap  <  0)&&(optionMap.containsKey(required));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
397	[BUG]  [BUGGY]  return(this.selection  <  0)&&(optionMap.containsKey(required));  [CE]  cannot  find  symbol  selection  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selection  <  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selection  <  0)&&(optionMap.containsKey(required));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  cannot  find  symbol  selection	41	None	replace
398	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(required));  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(optionMap.containsKey(required));	  return(optionMap!=    null)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	95	None	replace
399	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey( "required. ");  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey( "required. ");  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey( "required. ");	          boolean    required    =    optionMap.containsKey(       "required       ");    boolean    required    =    optionMap.containsKey(   ".required   ");    	non-compiled	[CE]  missing  return  statement	37	None	replace
400	[BUG]  [BUGGY]  boolean  required  =  optionsMap.containsKey(required);  [CE]  cannot  find  symbol  optionsMap  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionsMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionsMap.containsKey(required);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    optionsMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  optionsMap	99	None	replace
401	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionsMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  requires  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionsMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    requires    =    optionMap.containsKey(selected);    boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionsMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	100	None	add
402	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap.containsKey(selected);  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.containsKey(selected);    	non-compiled	[CE]  ')'  expected	76	None	replace
403	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(this.optionMap.containsKey(selected);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(this.optionMap.containsKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.containsKey(selected);    	non-compiled	[CE]  ')'  expected	76	None	replace
404	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsValue(selected)||  this.optionMap.containsValue(selected);  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsValue(selected)||  this.optionMap.containsValue(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsValue(selected)||  this.optionMap.containsValue(selected);	  boolean    required    =    this.optionMap.containsValue(selected);    	non-compiled	[CE]  missing  return  statement	121	None	replace
405	[BUG]  [BUGGY]  this.optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.containsKey(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.containsKey(required);	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	47	None	replace
406	[BUG]  [BUGGY]  this.optionMap.remove(selected);  [CE]  missing  return  statement  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.remove(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.remove(selected);	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	47	None	replace
407	[BUG]  [BUGGY]  if(this.required  ==  null)  {  return  this.required;  this.required  =  true;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  return  this.required;  this.required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  return  this.required;  this.required  =  true;  }	  return    this.required;    this.required    =    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	30	None	replace
408	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  this.required  =  true;  }  [CE]  unreachable  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  this.required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  this.required  =  true;  }	  return    this.required;    this.required    =    true;    	non-compiled	[CE]  unreachable  statement	30	None	replace
409	[BUG]  [BUGGY]  return  this.selected.equals(optionMap.get(required);  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(optionMap.get(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(optionMap.get(required);	  return    this.selected.equals(required);    	non-compiled	[CE]  ')'  expected	54	None	replace
410	[BUG]  [BUGGY]  return  this.selected.equals(optionMap.required);  [CE]  cannot  find  symbol  required  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(optionMap.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(optionMap.required);	  return    this.selected.equals(required);    	non-compiled	[CE]  cannot  find  symbol  required	54	None	replace
411	[BUG]  [BUGGY]  boolean  required  =  optionsMap.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);  [CE]  cannot  find  symbol  optionsMap  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionsMap.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionsMap.containsKey(selected);  String  selected  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    String    selected    =    optionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  optionsMap	22	None	replace
412	[BUG]  [BUGGY]  boolean  required  =  this.options.isRequired();  [CE]  cannot  find  symbol  options  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.options.isRequired();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.options.isRequired();	  boolean    required    =    options.isRequired();    	non-compiled	[CE]  cannot  find  symbol  options	35	None	replace
413	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >  options.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >  options.size());	  return(optionMap!=    null)||(required    >    0)&&(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	85	None	replace
414	[BUG]  [BUGGY]  return(optionMap.containsKey(selected))  &&(this.required  >  0));  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected))  &&(this.required  >  0));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected))  &&(this.required  >  0));	  return(optionMap.containsKey(selected))    &&(required    >    0));    	non-compiled	[CE]  ';'  expected	28	None	replace
415	[BUG]  [BUGGY]  if(required)  {  this.required  =  true;  String  selected  =  getOption(optionMap);  }  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(required)  {  this.required  =  true;  String  selected  =  getOption(optionMap);  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(required)  {  this.required  =  true;  String  selected  =  getOption(optionMap);  }	          this.required    =    true;    String    selected    =    getOption(optionMap);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
416	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption    	non-compiled	[CE]  ')'  expected	115	None	replace
417	[BUG]  [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption    	non-compiled	[CE]  ')'  expected	115	None	replace
418	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption    	non-compiled	[CE]  ')'  expected	115	None	replace
419	[BUG]  [BUGGY]  if(this.required)  {  this.required  =  true;  this.required  =  false;  }  [CE]  missing  return  statement  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    true;    	non-compiled	[CE]  missing  return  statement	57	None	replace
420	[BUG]  [BUGGY]  if(this.required!=  null)  {  this.required  =  true;  this.required  =  false;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]      ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    true;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	57	None	replace
421	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  variable  requires  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    requires    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  requires  is  already  defined  in  method  isRequired()	97	None	add
422	[BUG]  [BUGGY]  boolean  required  =  options.containsKey(selected)&&  this.optionMap.containsKey(selected);  [CE]  cannot  find  symbol  options  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  options.containsKey(selected)&&  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  options.containsKey(selected)&&  this.optionMap.containsKey(selected);	  boolean    required    =    optionMap.containsKey(selected)||    this.optionMap.containsKey(selected);    	non-compiled	[CE]  cannot  find  symbol  options	130	None	replace
423	[BUG]  [BUGGY]  return(optionMap.containsKey(selected))  &&(optionMap.containsKey(required));  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected))  &&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected))  &&(optionMap.containsKey(required));	  return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	25	None	replace
424	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap)&&  this.optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap)&&  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.optionMap)&&  this.optionMap.containsKey(selected);	  boolean    required    =    this.optionMap.containsKey(selected)||    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	12	None	replace
425	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap)||  this.optionMap.containsKey(this.optionMap);  [CE]  missing  return  statement  [FE]            AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap)||  this.optionMap.containsKey(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.optionMap)||  this.optionMap.containsKey(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(selected)||    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	12	None	replace
426	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.reaquired  =  false;  [CE]  cannot  find  symbol  reaquired  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  this.required  =  true;  this.reaquired  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    false;    this.required  =  true;  this.reaquired  =  false;	  	non-compiled	[CE]  cannot  find  symbol  reaquired	61	None	add
427	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
428	[BUG]  [BUGGY]  if(this.required!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
429	[BUG]  [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
430	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  if(this.optionMap!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
431	[BUG]  [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(this.optionMap);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(required)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(required)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	65	None	replace
432	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  NullPointerException  	65	9	replace
433	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap);  [FE]  NullPointerException  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  NullPointerException  	65	9	replace
434	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selected.equals(this.optionMap)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  selected.equals(this.optionMap)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  NullPointerException  	65	9	replace
435	[BUG]  [BUGGY]  return  selected.equals(this.optionMap)&&  selected.equals(this.optionMap);  [FE]  NullPointerException  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  selected.equals(this.optionMap)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  selected.equals(this.optionMap)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  NullPointerException  	65	9	replace
436	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
437	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	compilable	  [FE]  AssertionFailedError  	65	6	replace
438	[BUG]  [BUGGY]  return(selection!=  0)&&(optionMap.containsKey(selection));  [CE]  cannot  find  symbol  selection  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection!=  0)&&(optionMap.containsKey(selection));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection!=  0)&&(optionMap.containsKey(selection));	  return(selected    >    0)&&(optionMap.containsKey(selection));    	non-compiled	[CE]  cannot  find  symbol  selection	40	None	replace
439	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  boolean  required  =  optionMap!=  null  &&(optionMap.containsKey(selected));  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  boolean  required  =  optionMap!=  null  &&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    boolean  required  =  optionMap!=  null  &&(optionMap.containsKey(selected));	  	non-compiled	[CE]  unreachable  statement	94	None	add
440	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  OptionMap  <  String,Object>  optionMap  =  optionMap.get(selected);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  OptionMap  <  String,Object>  optionMap  =  optionMap.get(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    OptionMap  <  String,Object>  optionMap  =  optionMap.get(selected);	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	94	None	add
441	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  requires  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        boolean    required    =    false;    this.required  =  true;  boolean  requires  =  false;	  	compilable	  [FE]  AssertionFailedError  	108	6	add
442	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  requires  =  false;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  false;  this.required  =  true;  boolean  requires  =  false;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    false;    this.required  =  true;  boolean  requires  =  false;	  	compilable	  [FE]  AssertionFailedError  	108	6	add
443	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap.keySet());  String  selected  =  this.optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.optionMap.keySet());  String  selected  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.optionMap.keySet());  String  selected  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    String    selected    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	71	None	replace
444	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(optionMap!=  null)&&(optionMap.size()  >  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	compilable	  [FE]  AssertionFailedError  	135	6	replace
445	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.size()  >  optionMap.size());  [FE]  AssertionFailedError  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.size()  >  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(optionMap.size()  >  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	compilable	  [FE]  AssertionFailedError  	135	6	replace
446	[BUG]  [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(select);  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(select);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  &&  this.optionMap.containsKey(select);	  return    this.required!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	74	None	replace
447	[BUG]  [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap)));    	non-compiled	[CE]  <identifier>  expected	106	None	replace
448	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.get(selected);  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  String  selected  =  this.optionMap.get(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    String  selected  =  this.optionMap.get(selected);	  	non-compiled	[CE]  incompatible  types	81	None	add
449	[BUG]  [BUGGY]  return(selected  >=  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected  >=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected  >=  0)&&(optionMap.containsKey(selected));	  return(selected    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	27	None	replace
450	[BUG]  [BUGGY]  &&  this.optionMap.containsKey(required);  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  this.optionMap.containsKey(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  this.optionMap.containsKey(required);	  &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
451	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected);  boolean  requires  =  this.optionMap.containsKey(required);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    requires    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	98	None	replace
452	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.required);  boolean  requires  =  this.optionMap.containsKey(this.required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.required);  boolean  requires  =  this.optionMap.containsKey(this.required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.required);  boolean  requires  =  this.optionMap.containsKey(this.required);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    requires    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	98	None	replace
453	[BUG]  [BUGGY]  if(selected!=  null)  {  return  this.required;  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(selected!=  null)  {  return  this.required;  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(selected!=  null)  {  return  this.required;  if(this.required!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  }	  return    this.required;    if(this.required!=    null)    {    if(optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
454	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected);  boolean  requires  =  optionMap.containsKey(required);	          boolean    required    =    optionMap.containsKey(selected);    boolean    requires    =    optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	101	None	replace
455	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  if(this.required!=  null)  {  return  this.optionMap.isRequired();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  if(this.required!=  null)  {  return  this.optionMap.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  if(this.required!=  null)  {  return  this.optionMap.isRequired();  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    this.optionMap.isRequired();    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
456	[BUG]  [BUGGY]  boolean  required  =  this.selected.containsKey(this.optionMap);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.selected.containsKey(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.selected.containsKey(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(this.selected);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
457	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected)||  this.optionMap.containsKey(this.optionMap);  [CE]  missing  return  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected)||  this.optionMap.containsKey(this.optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selected)||  this.optionMap.containsKey(this.optionMap);	  boolean    required    =    this.optionMap.containsKey(this.selected);    	non-compiled	[CE]  missing  return  statement	6	None	replace
458	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(optionMap.equals(required);  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(optionMap.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  selected.equals(optionMap.equals(required);	  return    this.optionMap.equals(selected)&&    selected.equals(required);    	non-compiled	[CE]  ')'  expected	66	None	replace
459	[BUG]  [BUGGY]  return  required.equals(this.required);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  required.equals(this.required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  required.equals(this.required);	  return    this.required.equals(required);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	134	None	replace
460	[BUG]  [BUGGY]  return  this.required.equals(optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required.equals(optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required.equals(optionMap.get(required));	  return    this.required.equals(required);    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	134	None	replace
461	[BUG]  [BUGGY]  if(this.required  ==  null)required  =  true;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)required  =  true;  if(this.optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)required  =  true;  if(this.optionMap.containsKey(selected))  {  return  false;  }	  if(this.required!=    null)required    =    true;    if(this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	42	None	replace
462	[BUG]  [BUGGY]  if(this.required!=  null)required  =  false;  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)required  =  false;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)required  =  false;	  if(this.required!=    null)required    =    true;    if(this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	42	None	replace
463	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey( "required ");  boolean  needed  =  optionMap.containsKey( "required ");  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey( "required ");  boolean  needed  =  optionMap.containsKey( "required ");  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey( "required ");  boolean  needed  =  optionMap.containsKey( "required ");	          boolean    required    =    optionMap.containsKey(selected);    boolean    needed    =    optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	21	None	replace
464	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(required);  boolean  needed  =  optionMap.containsKey(required);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  required  =  optionMap.containsKey(required);  boolean  needed  =  optionMap.containsKey(required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    needed    =    optionMap.containsKey(selected);    boolean  required  =  optionMap.containsKey(required);  boolean  needed  =  optionMap.containsKey(required);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	20	None	add
465	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	118	6	replace
466	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [FE]  AssertionFailedError  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	compilable	  [FE]  AssertionFailedError  	118	6	replace
467	[BUG]  [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selected!=  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selected!=  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	118	None	replace
468	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(this.required);  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(this.required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(this.required);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    requires    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	98	None	replace
469	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected);  String  selected  =  optionMap.get(selected);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected);  String  selected  =  optionMap.get(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected);  String  selected  =  optionMap.get(selected);	          boolean    required    =    optionMap.containsKey(selected);    String    selected    =    optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	22	None	replace
470	[BUG]  [BUGGY]  if(this.required!=  null  &&  this.optionMap.containsKey(selected))  {  return  this.required;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null  &&  this.optionMap.containsKey(selected))  {  return  this.required;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null  &&  this.optionMap.containsKey(selected))  {  return  this.required;  }	  if(this.required!=    null)    {    return    this.required;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
471	[BUG]  [BUGGY]  if(this.required!=  null  &&  this.optionMap.containsKey(select))  {  return  this.required;  }  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null  &&  this.optionMap.containsKey(select))  {  return  this.required;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null  &&  this.optionMap.containsKey(select))  {  return  this.required;  }	  if(this.required!=    null)    {    return    this.required;    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	43	None	replace
472	[BUG]  [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [CE]  variable  needed  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        optionMap.containsKey(selected);        boolean    needed    =    optionMap.containsKey(selected);    boolean  needed  =  optionMap.containsKey(selected);  boolean  needed  =  optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  needed  is  already  defined  in  method  isRequired()	20	None	add
473	[BUG]  [BUGGY]  return  this.required  ==  null  &&  this.optionMap.size()  >  0;  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required  ==  null  &&  this.optionMap.size()  >  0;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required  ==  null  &&  this.optionMap.size()  >  0;	  return    this.required    ==    null    &&    this.required;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	73	None	replace
474	[BUG]  [BUGGY]  this.required  =  new  LinkedHashMap  <  String,Object>();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  new  LinkedHashMap  <  String,Object>();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  new  LinkedHashMap  <  String,Object>();	  this.required    =    null;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	92	None	replace
475	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  final  String  selected  =  this.optionMap.containsKey(selected);  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected);  final  String  selected  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected);  final  String  selected  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    String    selected    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  incompatible  types	71	None	replace
476	[BUG]  [BUGGY]  return(this.required  >  0)&&(optionMap.containsKey(selection));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.required  >  0)&&(optionMap.containsKey(selection));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.required  >  0)&&(optionMap.containsKey(selection));	  return(selection    >    0)&&(optionMap.containsKey(selection));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	39	None	replace
477	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(this.selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.containsKey(this.selected);	  return    this.optionMap.containsKey(selection);    	compilable	  [FE]  AssertionFailedError  	84	6	replace
478	[BUG]  [BUGGY]  return  this.optionMap.containsKey(this.selected);  [FE]  AssertionFailedError  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(this.selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(this.selected);	  return    this.optionMap.containsKey(selection);    	compilable	  [FE]  AssertionFailedError  	84	6	replace
479	[BUG]  [BUGGY]  return(optionMap.size()  >  0)&&(required  <  options.size());  [CE]  cannot  find  symbol  options  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.size()  >  0)&&(required  <  options.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.size()  >  0)&&(required  <  options.size());	  return(optionMap.size()    >    0)||(required    <    required.size());    	non-compiled	[CE]  cannot  find  symbol  options	2	None	replace
480	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  this.required  =  true;  this.required  =  false;  }  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    false;    	non-compiled	[CE]  missing  return  statement	62	None	replace
481	[BUG]  [BUGGY]  if(this.required  ==  null)  {  this.required  =  true;  this.required  =  false;  }  [CE]  bad  operand  types  for  binary  operator  '=='  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  null)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  null)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    false;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '=='	62	None	replace
482	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsValue(this);  [CE]  missing  return  statement  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsValue(this);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsValue(this);	  boolean    required    =    this.optionMap.containsKey(this);    	non-compiled	[CE]  missing  return  statement	123	None	replace
483	[BUG]  [BUGGY]  return(this.selection  >  0)&&(optionMap.containsKey(required));  [CE]  cannot  find  symbol  selection  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.selection  >  0)&&(optionMap.containsKey(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.selection  >  0)&&(optionMap.containsKey(required));	  return(selection    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  cannot  find  symbol  selection	38	None	replace
484	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey( "required ".equals(this.optionGroup));  [CE]  cannot  find  symbol  optionGroup  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey( "required ".equals(this.optionGroup));  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey( "required ".equals(this.optionGroup));	          boolean    required    =    optionMap.containsKey(       "required       ");    boolean    required    =    optionMap.containsKey(   ".required   ");    	non-compiled	[CE]  cannot  find  symbol  optionGroup	37	None	replace
485	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >=  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >=  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)||(optionMap.size()  >=  optionMap.size());	  return(optionMap!=    null)&&(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	3	None	replace
486	[BUG]  [BUGGY]  return(optionMap!=  null)||(required  >  0)||(optionMap.size()  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)||(required  >  0)||(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)||(required  >  0)||(optionMap.size()  <  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
487	[BUG]  [BUGGY]  return(optionMap!=  null)||(required  >  0)||(optionMap.size()  >=  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)||(required  >  0)||(optionMap.size()  >=  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)||(required  >  0)||(optionMap.size()  >=  optionMap.size());	  return(optionMap    ==    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  if(this.required  ==  true)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	                this.required        =        true;        this.required    =    false;    if(this.required  ==  true)  {  this.required  =  true;  this.required  =  false;  }	  	compilable	  [FE]  AssertionFailedError  	61	6	add
489	[BUG]  [BUGGY]          this.required    =    true;    this.required  =  false;  if(this.required  ==  true)  {  this.required  =  true;  this.required  =  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    this.required  =  false;  if(this.required  ==  true)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        this.required    =    false;    if(this.required  ==  true)  {  this.required  =  true;  this.required  =  false;  }	  	compilable	  [FE]  AssertionFailedError  	61	6	add
490	[BUG]  [BUGGY]  this.required  =  true;  String  selected  =  getOption(optionMap,  optionMap);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  true;  String  selected  =  getOption(optionMap,  optionMap);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  true;  String  selected  =  getOption(optionMap,  optionMap);	          this.required    =    true;    String    selected    =    getOption(optionMap);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
491	[BUG]  [BUGGY]  this.required  =  true;  String  selected  =  getOption(optionMap,  options);  [CE]  cannot  find  symbol  options  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  =  true;  String  selected  =  getOption(optionMap,  options);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  =  true;  String  selected  =  getOption(optionMap,  options);	          this.required    =    true;    String    selected    =    getOption(optionMap);    	non-compiled	[CE]  cannot  find  symbol  options	110	None	replace
492	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(selected!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  if(selected!=  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  if(selected!=  null)  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
493	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsValue(this.required);  [CE]  method  containsValue  in  interface  Map  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsValue(this.required);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsValue(this.required);	  boolean    required    =    optionMap.containsValue(selected);    	non-compiled	[CE]  method  containsValue  in  interface  Map  cannot  be  applied  to  given  types;	131	None	replace
494	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  requires  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    requires    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  requires  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	97	None	add
495	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  if(optionMap.containsKey(selected))  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(optionMap.containsKey(selected))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
496	[BUG]  [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(selection);  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(selection);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  &&  this.optionMap.containsKey(selection);	  return    this.required!=    null;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	74	None	replace
497	[BUG]  [BUGGY]  return(this.required  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.required  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.required  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(this.required    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	93	None	replace
498	[BUG]  [BUGGY]  return(this.required  >  0)&&(optionMap.containsKey(selected,  selected));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.required  >  0)&&(optionMap.containsKey(selected,  selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.required  >  0)&&(optionMap.containsKey(selected,  selected));	  return(this.required    >    0)&&(optionMap.containsKey(selected));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	93	None	replace
499	[BUG]  [BUGGY]  return(optionMap.containsKey(required)>  0)&&(optionMap.containsKey(selected));  [CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(required)>  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(required)>  0)&&(optionMap.containsKey(selected));	  return(selected    >    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  method  containsKey  in  interface  Map  cannot  be  applied  to  given  types;	25	None	replace
500	[BUG]  [BUGGY]  return  this.optionMap.get(selected)!=  required;  [CE]  bad  operand  types  for  binary  operator  '!='  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.get(selected)!=  required;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.get(selected)!=  required;	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '!='	55	None	replace
501	[BUG]  [BUGGY]  return  this.optionMap.get(required).equals(this.optionMap.get(required));  [CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.get(required).equals(this.optionMap.get(required));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.get(required).equals(this.optionMap.get(required));	  return    selected.equals(this.optionMap.get(required));    	non-compiled	[CE]  method  get  in  interface  Map  cannot  be  applied  to  given  types;	55	None	replace
502	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [CE]  ')'  expected  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  ')'  expected	118	None	replace
503	[BUG]  [BUGGY]  Return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  Return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	Return(selected  >  0)&&(optionMap.containsKey(selected)||  optionMap.containsKey(selected));	  return(required    >    0)&&(optionMap.containsKey(selected)||    optionMap.containsKey(selected));    	non-compiled	[CE]  not  a  statement	118	None	replace
504	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    if(this.optionMap!=  null)  {  return  this.optionMap.containsKey(selected);  }	  	non-compiled	[CE]  unreachable  statement	81	None	add
505	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  return  this.optionMap.containsKey(selected);  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  return  this.optionMap.containsKey(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    if(selected!=  null)  {  return  this.optionMap.containsKey(selected);  }	  	non-compiled	[CE]  unreachable  statement	81	None	add
506	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  for(String  selected  :  this.optionMap.keySet())  {  return  required;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected);  if(selected!=  null)  {  for(String  selected  :  this.optionMap.keySet())  {  return  required;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.containsKey(selected);    if(selected!=  null)  {  for(String  selected  :  this.optionMap.keySet())  {  return  required;  }	  	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	81	None	add
507	[BUG]  [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.get    	non-compiled	[CE]  ')'  expected	107	None	replace
508	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    this.optionMap.isRequired();    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
509	[BUG]  [BUGGY]  if(this.selected!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.selected!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.selected!=  null)  {  if(this.optionMap!=  null)  {  return  this.optionMap.isRequired();  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    this.optionMap.isRequired();    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
510	[BUG]  [BUGGY]  return(optionMap.containsKey(selected)||(required  >  0));  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap.containsKey(selected)||(required  >  0));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap.containsKey(selected)||(required  >  0));	  return(optionMap.containsKey(selected))    &&(required    >    0));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	28	None	replace
511	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
512	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&  optionMap.containsKey(selected).booleanValue();  [CE]  boolean  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected)&&  optionMap.containsKey(selected).booleanValue();  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected)&&  optionMap.containsKey(selected).booleanValue();	  boolean    required    =    optionMap.containsKey(selected).booleanValue();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	49	None	replace
513	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  return  this.optionMap.equals(selected)&&  selected.equals(selected);  [CE]  unreachable  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  return  this.optionMap.equals(selected)&&  selected.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    return  this.optionMap.equals(selected)&&  selected.equals(selected);	  	non-compiled	[CE]  unreachable  statement	64	None	add
514	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected)&&  selected.equals(selected);  }  else  {  return  this.optionMap.equals(selected);  }  [CE]  unreachable  statement  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected)&&  selected.equals(selected);  }  else  {  return  this.optionMap.equals(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected)&&  selected.equals(selected);  }  else  {  return  this.optionMap.equals(selected);  }	  	non-compiled	[CE]  unreachable  statement	64	None	add
515	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected);&  selected.equals(selected);  }  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(selected);  if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected);&  selected.equals(selected);  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return    this.optionMap.equals(selected)&&    selected.equals(selected);    if(this.optionMap!=  null)  {  return  this.optionMap.equals(selected);&  selected.equals(selected);  }	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
516	[BUG]  [BUGGY]          this.required    =    true;    boolean  required  =  true;  boolean  required  =  this.required  =  true;  boolean  required  =  true;  [CE]  variable  required  is  already  defined  in  method  isRequired()  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          this.required    =    true;    boolean  required  =  true;  boolean  required  =  this.required  =  true;  boolean  required  =  true;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                this.required        =        true;        boolean    required    =    true;    boolean  required  =  this.required  =  true;  boolean  required  =  true;	  	non-compiled	[CE]  variable  required  is  already  defined  in  method  isRequired()	58	None	add
517	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap)));    	non-compiled	[CE]  ')'  expected	104	None	replace
518	[BUG]  [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [CE]  <identifier>  expected  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.	  return(optionMap!=    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap)));    	non-compiled	[CE]  <identifier>  expected	104	None	replace
519	[BUG]  [BUGGY]  return  optionMap.equals(required);  [CE]  no  suitable  method  found  for  equals(boolean)  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  optionMap.equals(required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  optionMap.equals(required);	  return    required.equals(selected);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean)	53	None	replace
520	[BUG]  [BUGGY]  &&  optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&  optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&  optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);	  &&    optionMap.containsKey(selected);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
521	[BUG]  [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected)&&  this.optionMap.containsValue(selected);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  this.optionMap.containsKey(selected)&&  this.optionMap.containsValue(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  this.optionMap.containsKey(selected)&&  this.optionMap.containsValue(selected);	  boolean    required    =    this.optionMap.containsKey(selected)&&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	120	None	replace
522	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(required,  selected);  [CE]  no  suitable  method  found  for  equals(boolean,String)  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  this.optionMap.equals(required,  selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  this.optionMap.equals(required,  selected);	  return    this.optionMap.equals(selected)&&    selected.equals(required);    	non-compiled	[CE]  no  suitable  method  found  for  equals(boolean,String)	66	None	replace
523	[BUG]  [BUGGY]  return(required  <  0)&&(optionMap.containsKey(selected));  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(required  <  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(required  <  0)&&(optionMap.containsKey(selected));	  return(selection    <    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	41	None	replace
524	[BUG]  [BUGGY]  boolean  required  =  optionMap.containsKey(selected)||  optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]        AssertionFailedError      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  required  =  optionMap.containsKey(selected)||  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  required  =  optionMap.containsKey(selected)||  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    required    =    optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	18	None	replace
525	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  for(Map  optionMap  :  optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(Map    optionMap    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	128	None	replace
526	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap.getKey(selected);  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap.getKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)&&  selected.equals(this.optionMap.getKey(selected);	  return    this.optionMap.equals(required)&&    selected.equals(this.optionMap.getKey(selected);    	non-compiled	[CE]  ')'  expected	75	None	replace
527	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  if(!this.optionMap.containsKey(selected))  {  return  true;  }	  return    this.required;    if(this.required!=    null)    {    if(!this.optionMap.containsKey(selected))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
528	[BUG]  [BUGGY]  boolean  needed  =  optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  needed  =  optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  needed  =  optionMap.containsKey(selected);	          boolean    required    =    optionMap.containsKey(selected);    boolean    needed    =    optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	21	None	replace
529	[BUG]  [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >=  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >=  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=  null)&&(required  >  0)&&(optionMap.size()  >=  optionMap.size());	  return(optionMap!=    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	1	None	replace
530	[BUG]  [BUGGY]  return(optionMap  ==  null)||(required  >  0)||(optionMap.size()  <  optionMap.size());  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)||(required  >  0)||(optionMap.size()  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)||(required  >  0)||(optionMap.size()  <  optionMap.size());	  return(optionMap!=    null)||(required    >    0)||(required    <    optionMap.size());    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	1	None	replace
531	[BUG]  [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap!=  null)  {  return  this.required;  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.keySet())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	86	None	replace
532	[BUG]  [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [CE]  for-each  loops  are  not  supported  in  -source  1.4  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(String  option  :  this.optionMap.keySet())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.keySet())    {    required    =    true;    }    	non-compiled	[CE]  for-each  loops  are  not  supported  in  -source  1.4	86	None	replace
533	[BUG]  [BUGGY]  boolean  needed  =  this.optionMap.containsKey(selected);  [CE]  missing  return  statement  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  boolean  needed  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	boolean  needed  =  this.optionMap.containsKey(selected);	          boolean    required    =    this.optionMap.containsKey(selected);    boolean    needed    =    this.optionMap.containsKey(selected);    	non-compiled	[CE]  missing  return  statement	70	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	add	return  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);	  return    this.optionMap.containsKey(selected);    	compilable	  [FE]  AssertionFailedError  	82	6	replace
535	[BUG]  [BUGGY]  return  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.containsKey(selected)||  this.optionMap.containsKey(selected);	  return    this.optionMap.containsKey(selected);    	compilable	  [FE]  AssertionFailedError  	82	6	replace
536	[BUG]  [BUGGY]  return(selection  >=  0)&&(optionMap.containsKey(selected));  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(selection  >=  0)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(selection  >=  0)&&(optionMap.containsKey(selected));	  return(selection    >=    0)&&(optionMap.containsKey(required));    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	77	None	replace
537	[BUG]  [BUGGY]  return(optionMap  ==  null)||(required  <  optionMap.size());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)||(required  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)||(required  <  optionMap.size());	  return(optionMap!=    null)||(required    <    optionMap.size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	135	None	replace
538	[BUG]  [BUGGY]  this.optionMap.put(selected.toString(),  required);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.put(selected.toString(),  required);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.put(selected.toString(),  required);	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
539	[BUG]  [BUGGY]  this.optionMap.put(selected.getKey(),  selected);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.optionMap.put(selected.getKey(),  selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.optionMap.put(selected.getKey(),  selected);	  this.optionMap.containsKey(selected);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	47	None	replace
540	[BUG]  [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(optionMap!=  null)  {  return  this.required;  if(this.required!=  null)  {  for(String  option  :  this.optionMap.values())  {  required  =  true;  }	  return    this.required;    if(this.required!=    null)    {    for(String    option    :    this.optionMap.values())    {    required    =    true;    }    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	89	None	replace
541	[BUG]  [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(selected).booleanValue();  [CE]  generics  are  not  supported  in  -source  1.4  [FE]        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  &&  this.optionMap.containsKey(selected).booleanValue();  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  &&  this.optionMap.containsKey(selected).booleanValue();	  return    this.required!=    null    &&    this.optionMap.containsKey(selected);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	122	None	replace
542	[BUG]  [BUGGY]  if(this.required  ==  false)  {  this.required  =  true;  this.required  =  false;  }  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  false)  {  this.required  =  true;  this.required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  false)  {  this.required  =  true;  this.required  =  false;  }	          this.required    =    true;    this.required    =    true;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	57	None	replace
543	[BUG]  [BUGGY]  return  this.required!=  null  &&  this.optionMap.size()  >  0;  [CE]  generics  are  not  supported  in  -source  1.4  [FE]            ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.required!=  null  &&  this.optionMap.size()  >  0;  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.required!=  null  &&  this.optionMap.size()  >  0;	  return    this.required!=    null    &&    this.required;    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	44	None	replace
544	[BUG]  [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]          boolean    required    =    this.optionMap.containsKey(selected);    boolean  needed  =  this.optionMap.containsKey(selected);  boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  needed  =  this.optionMap.containsKey(selected);  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	                boolean        required        =        this.optionMap.containsKey(selected);        boolean    needed    =    this.optionMap.containsKey(selected);    boolean  required  =  this.optionMap.containsKey(this.selected);  boolean  needed  =  this.optionMap.containsKey(selected);	  	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	69	None	add
545	[BUG]  [BUGGY]  if(this.required!=  null)  {  this.required  =  true;  boolean  required  =  false;  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  this.required  =  true;  boolean  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  this.required  =  true;  boolean  required  =  false;  }	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
546	[BUG]  [BUGGY]  if(this.required  ==  false)  {  this.required  =  true;  boolean  required  =  false;  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required  ==  false)  {  this.required  =  true;  boolean  required  =  false;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required  ==  false)  {  this.required  =  true;  boolean  required  =  false;  }	          this.required    =    true;    boolean    required    =    false;    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
547	[BUG]  [BUGGY]  this.required  |=  OptionGroup.REQUIRED;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  this.required  |=  OptionGroup.REQUIRED;  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	this.required  |=  OptionGroup.REQUIRED;	  this.required    |=    null;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
548	[BUG]  [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  OptionMap  optionMap!=  null)&&(optionMap.containsKey(selected));  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap!=  null)&&(optionMap.containsKey(selected));  OptionMap  optionMap!=  null)&&(optionMap.containsKey(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap!=    null)&&(optionMap.containsKey(selected));    OptionMap  optionMap!=  null)&&(optionMap.containsKey(selected));	  	non-compiled	[CE]  illegal  start  of  type	94	None	add
549	[BUG]  [BUGGY]  return  this.selected.equals(optionMap.selected);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(optionMap.selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(optionMap.selected);	  return    this.selected.equals(required);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
550	[BUG]  [BUGGY]  return  this.selected.equals(this.optionMap.keySet());  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.selected.equals(this.optionMap.keySet());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.selected.equals(this.optionMap.keySet());	  return    this.selected.equals(required);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
551	[BUG]  [BUGGY]  if(this.optionMap  ==  null)  {  return  false;  }  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.optionMap  ==  null)  {  return  false;  }  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.optionMap  ==  null)  {  return  false;  }	  return    this.required;    if(this.required!=    null)    {    if(this.optionMap!=    null)    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
552	[BUG]  [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  &&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption	  return(required    ==    null)&&!required.equals(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption(optionMap.getOption    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
553	[BUG]  [BUGGY]  if(this.required!=  null)  {  this.required  =  true;  boolean  required  =  true;  }  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  if(this.required!=  null)  {  this.required  =  true;  boolean  required  =  true;  }  [BUGGY]      return  required;  }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	if(this.required!=  null)  {  this.required  =  true;  boolean  required  =  true;  }	          this.required    =    true;    boolean    required    =    true;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
554	[BUG]  [BUGGY]  return(this.optionMap!=  null  &&  this.optionMap.isRequired());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                    ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(this.optionMap!=  null  &&  this.optionMap.isRequired());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(this.optionMap!=  null  &&  this.optionMap.isRequired());	  return    this.optionMap.isRequired();    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	45	None	replace
555	[BUG]  [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap  <  optionMap.size());  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return(optionMap  ==  null)&&(required  >  0)&&(optionMap  <  optionMap.size());  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return(optionMap  ==  null)&&(required  >  0)&&(optionMap  <  optionMap.size());	  return(optionMap!=    null)||(required    >    0)&&(required    <    optionMap.size());    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	85	None	replace
556	[BUG]  [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(selected);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]    AssertionFailedError    [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(selected);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(this.optionMap)&&  this.selected.equals(selected);	  return    this.optionMap.equals(selected)&&    selected.equals(selected);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	65	None	replace
557	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(this.optionMap);  [CE]  generics  are  not  supported  in  -source  1.4  [FE]              ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(this.optionMap);  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  selected.equals(this.optionMap);	  return    this.optionMap.equals(required)&&    selected.equals(selected);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	63	None	replace
558	[BUG]  [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(this.optionMap.equals(selected));  [CE]  generics  are  not  supported  in  -source  1.4  [FE]                ComparisonFailure      [CONTEXT]      public  boolean  isRequired()  {      [BUGGY]  return  this.optionMap.equals(selected)&&  selected.equals(this.optionMap.equals(selected));  [BUGGY]      }  [CLASS]  OptionGroup  [METHOD]  isRequired  [RETURN_TYPE]  boolean  [VARIABLES]  boolean  required  String  selected  Map  optionMap  long  serialVersionUID  	projects/Cli27/src/java/org/apache/commons/cli/OptionGroup.java	0.5773502691896257	131	131	3	replace	return  this.optionMap.equals(selected)&&  selected.equals(this.optionMap.equals(selected));	  return    this.optionMap.equals(required)&&    selected.equals(selected);    	non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	63	None	replace
