bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
2	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
3	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
4	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parameterizedOwnerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parameterizedOwnerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parameterizedOwnerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
5	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  Class  <?>)?(Class  <?>)ownerType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  Class  <?>)?(Class  <?>)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  Class  <?>)?(Class  <?>)ownerType  :  null;	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	23	None	replace
6	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
7	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
8	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
9	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
10	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
11	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
12	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(cls));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(cls));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(cls));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	38	None	replace
13	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	38	None	replace
14	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[toClass.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
15	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  +  1]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  +  1]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  +  1]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[toClass.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
16	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[typeParams.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[typeParams.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[typeParams.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[toClass.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
17	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
18	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
19	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
20	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
21	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
22	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  ownerType);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  ownerType);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
23	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
24	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  types);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  types);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  types);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
25	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.getRawType();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.getRawType();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.getRawType();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.getOwnerType();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
26	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType,  toClass);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType,  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType,  toClass);	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	72	None	replace
27	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType.getOwnerType());  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType.getOwnerType());  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType.getOwnerType());	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	72	None	replace
28	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	72	None	replace
29	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  toClass,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  toClass,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  toClass,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	46	None	replace
30	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	46	None	replace
31	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parameterizedType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parameterizedType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parameterizedType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	47	None	replace
32	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parametersType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parametersType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  parametersType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	47	None	replace
33	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	65	None	replace
34	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	65	None	replace
35	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	65	None	replace
36	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
37	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	33	None	replace
38	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	33	None	replace
39	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	33	None	replace
40	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	33	None	replace
41	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(cls));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(cls));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(cls));	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	31	None	replace
42	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	31	None	replace
43	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  ==  null)?  null  :(ParameterizedType)ownerType;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ownerType  ==  null)?  null  :(ParameterizedType)ownerType;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  ==  null)?  null  :(ParameterizedType)ownerType;	  ParameterizedType    ownerType    =(parameterizedType    ==    null)?    null    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	54	None	replace
44	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType!=  null)?  null  :(ParameterizedType)ownerType;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType!=  null)?  null  :(ParameterizedType)ownerType;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType!=  null)?  null  :(ParameterizedType)ownerType;	  ParameterizedType    ownerType    =(parameterizedType    ==    null)?    null    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	54	None	replace
45	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :(ParameterizedType)ownerType.clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :(ParameterizedType)ownerType.clone();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :(ParameterizedType)ownerType.clone();	  ParameterizedType    ownerType    =(parameterizedType    ==    null)?    null    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	54	None	replace
46	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  ownerType);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
47	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)type;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)type;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)type;	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	71	None	replace
48	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)clone();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)clone();	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	71	None	replace
49	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType;	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	71	None	replace
50	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	5	None	replace
51	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	5	None	replace
52	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	67	None	replace
53	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass,  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass,  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass,  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	67	None	replace
54	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	67	None	replace
55	[BUG]  [BUGGY]  Type[]  toClassParams  =  getTypeParameters(cls,  toClass);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  toClassParams  =  getTypeParameters(cls,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  toClassParams  =  getTypeParameters(cls,  toClass);	  Type[]    toClassParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
56	[BUG]  [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  ownerType);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  toClassParams  =  getTypeParameters(toClass,  ownerType);	  Type[]    toClassParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
57	[BUG]  [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  toClassParams  =  getTypeParameters(toClass,  typeArgs);	  Type[]    toClassParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	22	None	replace
58	[BUG]  [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  cls);  [CE]  cannot  find  symbol  [FE]                              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  toClassParams  =  getTypeParameters(toClass,  cls);	  Type[]    toClassParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
59	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
60	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(parameterizedType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
61	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
62	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  cls.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  cls.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  cls.toArray(new  Type[typeVarAssigns.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
63	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  typeParams,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  typeParams,  getRawType(toClass));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  typeParams,  getRawType(toClass));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
64	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
65	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  toClass,  getRawType(ownerType));  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeArguments(cls,  toClass,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeArguments(cls,  toClass,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	40	None	replace
66	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	61	None	replace
67	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[ownerType.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[ownerType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[ownerType.size()  ]);	  Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[ownerType.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	36	None	replace
68	[BUG]  [BUGGY]  Type[]  ownerTypeVarAssigns  =  typeVarAssigns.toArray(new  Type[ownerType.size()  ]);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  ownerTypeVarAssigns  =  typeVarAssigns.toArray(new  Type[ownerType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  ownerTypeVarAssigns  =  typeVarAssigns.toArray(new  Type[ownerType.size()  ]);	  Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[ownerType.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
69	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  getRawType(toClass));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  getRawType(toClass));	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	32	None	replace
70	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	32	None	replace
71	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	32	None	replace
72	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(parameterizedType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(parameterizedType));	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	48	None	replace
73	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(cls));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(cls));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(cls));	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	48	None	replace
74	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneTree(),  toClass);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneTree(),  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneTree(),  toClass);	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.cloneTree();    	non-compiled	[CE]  ';'  expected	2	None	replace
75	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    cls,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
76	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    cls,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
77	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	53	None	replace
78	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	53	None	replace
79	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	53	None	replace
80	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
81	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  ownerType,  typeVarAssigns,  toClass);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  ownerType,  typeVarAssigns,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  ownerType,  typeVarAssigns,  toClass);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
82	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeParameters(cls,  toClass,  typeArgs);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  getTypeParameters(cls,  toClass,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  getTypeParameters(cls,  toClass,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeArgs);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
83	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeParams);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeParams);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeArgs);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
84	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeArgs);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	44	None	replace
85	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
86	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  parameterizedType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  parameterizedType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  parameterizedType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
87	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
88	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	45	None	replace
89	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns,  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns,  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	45	None	replace
90	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	45	None	replace
91	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  	non-compiled	[CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	26	None	add
92	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	26	None	add
93	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  propertyType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  propertyType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    ParameterizedType  propertyType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  	non-compiled	[CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	26	None	add
94	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  parentType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  parentType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    ParameterizedType  parentType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  	non-compiled	[CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	26	None	add
95	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	68	None	replace
96	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	68	None	replace
97	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(toClass),  cls);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(toClass),  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeArguments(toClass,  getRawType(toClass),  cls);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	68	None	replace
98	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedType,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	66	None	replace
99	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedType,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	66	None	replace
100	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedType,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	66	None	replace
101	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);	  ParameterizedType    ownerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	49	None	replace
102	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  ownerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  ownerType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  ownerType);	  ParameterizedType    ownerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	49	None	replace
103	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.clone()  :  null;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.clone()  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.clone()  :  null;	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.clone();    	non-compiled	[CE]  ';'  expected	1	None	replace
104	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeArgs.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeArgs.size()  ]);	  Type[]    subtypeVarAssigns    =    ownerType.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
105	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeParams.toArray(new  Type[ownerType.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  typeParams.toArray(new  Type[ownerType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  typeParams.toArray(new  Type[ownerType.size()  ]);	  Type[]    subtypeVarAssigns    =    ownerType.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
106	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeParams.size()  +  1]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeParams.size()  +  1]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeParams.size()  +  1]);	  Type[]    subtypeVarAssigns    =    ownerType.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
107	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
108	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
109	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	59	None	replace
110	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  cls);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(toClass,  cls);	  Type[]    typeParams    =    getTypeParameters(cls,    toClass);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
111	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	63	None	replace
112	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	63	None	replace
113	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	63	None	replace
114	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
115	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType),  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
116	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  cls);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  cls);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    cls);    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
117	[BUG]  [BUGGY]  Type[]  typeArgs  =  toClass.toArray(new  Type[typeArgs.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  toClass.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  toClass.toArray(new  Type[typeArgs.size()  ]);	  Type[]    typeArgs    =    typeVarAssigns.toArray(new    Type[typeArgs.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
118	[BUG]  [BUGGY]  Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [CE]  cannot  find  symbol  typeParams  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);	  Type[]    typeArgs    =    typeVarAssigns.toArray(new    Type[typeArgs.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  typeParams	8	None	replace
119	[BUG]  [BUGGY]  Type[]  typeArgs  =  types.toArray(new  Type[typeArgs.size()  ]);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  types.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  types.toArray(new  Type[typeArgs.size()  ]);	  Type[]    typeArgs    =    typeVarAssigns.toArray(new    Type[typeArgs.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
120	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	41	None	replace
121	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  ownerType,  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  ownerType,  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  ownerType,  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	41	None	replace
122	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	51	None	replace
123	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	51	None	replace
124	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	51	None	replace
125	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  cls,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  cls,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  cls,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    cls,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	73	None	replace
126	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns,  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns,  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns,  cls);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    cls,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	73	None	replace
127	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    cls,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	73	None	replace
128	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass));  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass));	  Type[]    typeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
129	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass));  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass));	  Type[]    typeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
130	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType));  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType));	  Type[]    typeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
131	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  ownerType);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  ownerType);	  Type[]    typeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	34	None	replace
132	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeArgs.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeArgs.size()  ]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	35	None	replace
133	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeParameters.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeParameters.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeParameters.size()  ]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	35	None	replace
134	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  Class  <?>)?(Class  <?>)ownerType  :  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  Class  <?>)?(Class  <?>)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  Class  <?>)?(Class  <?>)ownerType  :  null;	  ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  incompatible  types	27	None	replace
135	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)cloneTreeType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)cloneTreeType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)cloneTreeType  :  null;	  ParameterizedType    ownerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	25	None	replace
136	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);	  Type[]    typeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
137	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns);	  Type[]    typeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
138	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	39	None	replace
139	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	39	None	replace
140	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	39	None	replace
141	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  +  1]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  +  1]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  +  1]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[ownerType.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
142	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  -  1]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  -  1]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  -  1]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[ownerType.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
143	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  +  1]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  +  1]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  +  1]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[toClass.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	57	None	replace
144	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[toClass.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[toClass.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[toClass.size()  ]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[toClass.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	57	None	replace
145	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  subtypeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
146	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  subtypeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
147	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  Class)?(Class)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  Class)?(Class)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  Class)?(Class)ownerType  :  getRawType(parameterizedOwnerType,  toClass);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType,    toClass);    	non-compiled	[CE]  inconvertible  types	60	None	replace
148	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  ownerType);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
149	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  ownerType,  toClass);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  ownerType,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  ownerType,  toClass);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
150	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
151	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(cls));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(cls));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(cls));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
152	[BUG]  [BUGGY]  Type[]  typeArgs  =  getTypeParameters(toClass,  toClass,  typeArgs);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  getTypeParameters(toClass,  toClass,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  getTypeParameters(toClass,  toClass,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    typeArgs);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
153	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    typeArgs);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	74	None	replace
154	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(toClass));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  ownerType,  getRawType(toClass));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
155	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  cls,  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  cls,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(toClass,  cls,  typeVarAssigns);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
156	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(parameterizedType,  toClass,  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(parameterizedType,  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(parameterizedType,  toClass,  typeVarAssigns);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
157	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns.length);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns.length);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns.length);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
158	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	23	None	replace
159	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
160	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	58	None	replace
161	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[subtypeVarAssigns.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[subtypeVarAssigns.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[subtypeVarAssigns.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
162	[BUG]  [BUGGY]  Type[]  ownerTypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  ownerTypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  ownerTypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
163	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.toArray(new  Type[typeParams.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.toArray(new  Type[typeParams.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.toArray(new  Type[typeParams.size()  ]);	  Type[]    subtypeVarAssigns    =    ownerType.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
164	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)typeVarAssigns  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)typeVarAssigns  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)typeVarAssigns  :  null;	  ParameterizedType    ownerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	25	None	replace
165	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)parentType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)parentType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)parentType  :  null;	  ParameterizedType    ownerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	25	None	replace
166	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :  parameterizedType.clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :  parameterizedType.clone();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :  parameterizedType.clone();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.clone();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
167	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType!=  null)?  null  :  parameterizedType.clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType!=  null)?  null  :  parameterizedType.clone();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType!=  null)?  null  :  parameterizedType.clone();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.clone();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
168	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)typeParams.clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)typeParams.clone();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)typeParams.clone();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.clone();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
169	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	45	None	replace
170	[BUG]  [BUGGY]  Type[]  ownerTypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  ownerTypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  ownerTypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	45	None	replace
171	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[parameterizedType.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[parameterizedType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[parameterizedType.size()  ]);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[subtypeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	55	None	replace
172	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  typeVarAssigns,  cls);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  typeVarAssigns,  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  typeVarAssigns,  cls);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    cls,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
173	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
174	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
175	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
176	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  typeParams);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    cls);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	68	None	replace
177	[BUG]  [BUGGY]  Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  +  1]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  +  1]);	  Type[]    typeArgs    =    typeVarAssigns.toArray(new    Type[typeArgs.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
178	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(cls));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(cls));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(cls));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	5	None	replace
179	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(toClass,  toClass,  subtypeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    typeArgs);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
180	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType,  parameterizedOwnerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType,  parameterizedOwnerType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType,  parameterizedOwnerType);	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	72	None	replace
181	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(parameterizedType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(parameterizedType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
182	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
183	[BUG]  [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  toClassParams  =  getTypeParameters(toClass,  typeVarAssigns);	  Type[]    toClassParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
184	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
185	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  toClass,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  toClass,  getRawType(toClass));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  toClass,  getRawType(toClass));	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	40	None	replace
186	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	32	None	replace
187	[BUG]  [BUGGY]  Type[]  ownerTypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  ownerTypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  ownerTypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    toClass,    getRawType(toClass));    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	32	None	replace
188	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  cls,  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  cls,  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  cls,  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    cls,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	73	None	replace
189	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType,    toClass);    	non-compiled	[CE]  incompatible  types	60	None	replace
190	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeVarAssigns.size()  ]);	  Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	12	None	replace
191	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  parameterizedOwnerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  parameterizedOwnerType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  parameterizedOwnerType);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType,    ownerType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	50	None	replace
192	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns,    ownerType);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	28	None	replace
193	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType.getActualTypeParameters());  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType.getActualTypeParameters());  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType.getActualTypeParameters());	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
194	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  ownerType,  toClass);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  ownerType,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  ownerType,  toClass);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
195	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(parameterizedType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	53	None	replace
196	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType));  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType));	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedType,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	66	None	replace
197	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)typeVarAssigns  :  null;  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)typeVarAssigns  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)typeVarAssigns  :  null;	  ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	27	None	replace
198	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)owner;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)owner;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)owner;	  ParameterizedType    ownerType    =(parameterizedType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	71	None	replace
199	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType),  cls);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	46	None	replace
200	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneChildren();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneChildren();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneChildren();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.cloneTree();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	replace
201	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneOwnerType();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneOwnerType();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneOwnerType();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.cloneTree();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	replace
202	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
203	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(parameterizedType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
204	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	65	None	replace
205	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType.clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType.clone();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType.clone();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType.clone();    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
206	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[parameterizedType.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[parameterizedType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[parameterizedType.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
207	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[cls.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[cls.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[cls.size()  ]);	  Type[]    typeVarAssigns    =    toClass.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
208	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  ownerType,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  ownerType,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  ownerType,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	47	None	replace
209	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	20	None	replace
210	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	67	None	replace
211	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	51	None	replace
212	[BUG]  [BUGGY]  Type[]  typeArgs  =  ownerType.toArray(new  Type[typeArgs.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeArgs  =  ownerType.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  ownerType.toArray(new  Type[typeArgs.size()  ]);	  Type[]    typeArgs    =    typeVarAssigns.toArray(new    Type[typeArgs.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
213	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns,    ownerType);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	28	None	replace
214	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns,    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	28	None	replace
215	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  parametersType);  [CE]  cannot  find  symbol  parametersType  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  parametersType);  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  parametersType);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType,    ownerType);    	non-compiled	[CE]  cannot  find  symbol  parametersType	50	None	replace
216	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	52	None	replace
217	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  ownerType,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  ownerType,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  ownerType,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
218	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
219	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  initialType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  ParameterizedType  initialType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    ParameterizedType  initialType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  	non-compiled	[CE]  variable  parameterizedOwnerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	26	None	add
220	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(subtypeVarAssigns),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(subtypeVarAssigns),  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(subtypeVarAssigns),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(cls,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
221	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	61	None	replace
222	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();	  ParameterizedType    ownerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	25	None	replace
223	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	33	None	replace
224	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType,  typeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
225	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType,  typeArgs);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType,  typeArgs);	  Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	43	None	replace
226	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns,  ownerType);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns,  ownerType);	  Type[]    typeVarAssigns    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	69	None	replace
227	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ],  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ],  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ],  ownerType);	  Type[]    subtypeVarAssigns    =    toClass.toArray(new    Type[ownerType.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
228	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[parameterizedType.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[parameterizedType.size()  ]);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[parameterizedType.size()  ]);	  Type[]    subtypeVarAssigns    =    ownerType.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	62	None	replace
229	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	39	None	replace
230	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	39	None	replace
231	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  toClass,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	59	None	replace
232	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  toClass);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    cls,    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	73	None	replace
233	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  ownerType);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
234	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  cls);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns,  cls);	  Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
235	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();  [CE]  type  argument  Object  is  not  within  bounds  of  type-variable  D  [FE]    AssertionError    [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  new  TypeVariable  <  Object>();	  ParameterizedType    parameterizedOwnerType    =(ownerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  type  argument  Object  is  not  within  bounds  of  type-variable  D	27	None	replace
236	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  ownerType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]        if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {        [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  ownerType,  typeVarAssigns);  [BUGGY]      ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  ownerType,  typeVarAssigns);	  Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass,    ownerType);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
