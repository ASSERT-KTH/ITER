bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	49	None	replace
2	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	49	None	replace
3	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType);	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	49	None	replace
4	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  upperBounds  [FE]          AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	  	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  	non-compiled	[CE]  cannot  find  symbol  upperBounds	49	None	replace
5	[BUG]  [BUGGY]    Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);		non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
6	[BUG]  [BUGGY]    Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds);		non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
7	[BUG]  [BUGGY]    Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);		non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
8	[BUG]  [BUGGY]    Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds);		non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	add	Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  	compilable	  [FE]  AssertionError  	49	2	replace
10	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  	compilable	  [FE]  AssertionError  	49	2	replace
11	[BUG]  [BUGGY]    Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType);		non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
12	[BUG]  [BUGGY]    Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType);		non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
13	[BUG]  [BUGGY]    Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType);		non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	add
14	[BUG]  [BUGGY]    Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]    if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  [BUGGY]    Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType);  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	    Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType);		non-compiled	[CE]  cannot  find  symbol	50	None	add
