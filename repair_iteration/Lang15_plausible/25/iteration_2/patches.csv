bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	39	None	replace
2	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	39	None	replace
3	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toLowerBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
4	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	48	None	replace
5	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  type);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	48	None	replace
6	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	replace
7	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	replace
8	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	replace
9	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
10	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	34	None	replace
11	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  type);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  type);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	15	None	replace
12	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	15	None	replace
13	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	15	None	replace
14	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    +    1]);    	non-compiled	[CE]  ']'  expected	31	None	replace
15	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWillcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
16	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWillcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
17	[BUG]  [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(toWildcardType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
18	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  toWildcardType);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  toWildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(toWildcardType);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
19	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	26	None	replace
20	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	26	None	replace
21	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toWildcardType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
22	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
23	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
24	[BUG]  [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
25	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType,  typeVarAssigns);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
26	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns,  toLowerBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns,  toLowerBounds);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
27	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	30	None	replace
28	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[type.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[type.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[type.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	30	None	replace
29	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitToUpperBounds(wildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
30	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
31	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
32	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type.toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type.toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type.toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
33	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerType);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	45	None	replace
34	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	25	None	replace
35	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
36	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
37	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toLowerBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	51	None	replace
38	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toUpperBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	51	None	replace
39	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    lowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
40	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    lowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
41	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    topBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
42	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    topBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
43	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
44	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
45	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
46	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	38	None	replace
47	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	38	None	replace
48	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
49	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
50	[BUG]  [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    toWildcardType);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
51	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType,  type);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType,  type);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    toWildcardType);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
52	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  wildcardType);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  wildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    toWildcardType);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
53	[BUG]  [BUGGY]  Type[]  toWildcardTypeVariables  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardTypeVariables  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardTypeVariables  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    toWildcardType);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
54	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
55	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
56	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  type);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	13	None	replace
57	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
58	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
59	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toWildcardType);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
60	[BUG]  [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  type);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  type);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    type);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
61	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  type);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(toWildcardType,  type);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    type);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
62	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    toUpperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	32	None	replace
63	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	  Type[]    toUpperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	32	None	replace
64	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toLowerBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toLowerBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toUpperBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
65	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	17	None	replace
66	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	17	None	replace
67	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
68	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
69	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(toLowerBounds,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
70	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	24	None	replace
71	[BUG]  [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.type);  [CE]  cannot  find  symbol  type  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.type);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType.type);    	non-compiled	[CE]  cannot  find  symbol  type	52	None	replace
72	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType.type);  [CE]  cannot  find  symbol  type  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType.type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  toWildcardType.type);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType.type);    	non-compiled	[CE]  cannot  find  symbol  type	52	None	replace
73	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.toWildcardType);  [CE]  cannot  find  symbol  toWildcardType  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType.toWildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType.type);    	non-compiled	[CE]  cannot  find  symbol  toWildcardType	52	None	replace
74	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
75	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	6	None	replace
76	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
77	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBound);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBound);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toUpperBound);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toUpperBound);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	42	None	replace
78	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	16	None	replace
79	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	add
80	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType);	  	non-compiled	[CE]  '.class'  expected	46	None	add
81	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	add
82	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  typeVarAssigns  =  getImplicitLowerBounds(type);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  typeVarAssigns  =  getImplicitLowerBounds(type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  typeVarAssigns  =  getImplicitLowerBounds(type);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	add
83	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound,  wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound,  wildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
84	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  topBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  topBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    Type[]  topBounds  =  getImplicitLowerBounds(wildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	add
85	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	add
86	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toUpperBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toUpperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds,  typeVarAssigns,  toUpperBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
87	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
88	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	17	None	replace
89	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
90	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds,  wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds,  wildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
91	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
92	[BUG]  [BUGGY]  Type[]  toWildcardType  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toWildcardType  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toWildcardType  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWillcardType);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
93	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  type);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	add	Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	compilable	  [FE]  AssertionError  	47	2	replace
95	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitLowerBounds(wildcardType);    	compilable	  [FE]  AssertionError  	47	2	replace
96	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toUpperBound);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toUpperBound);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toUpperBound);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	15	None	replace
97	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(wildcardType,  toUpperBounds);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	15	None	replace
98	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);	  Type[]    toUpperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	32	None	replace
99	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toUpperBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  toUpperBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  toUpperBounds.toArray(new  Type[toUpperBounds.size()  ]);	  Type[]    toUpperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	32	None	replace
100	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  typeVarAssigns.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  typeVarAssigns.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  typeVarAssigns.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	39	None	replace
101	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  2]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  2]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  2]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    +    1]);    	non-compiled	[CE]  ']'  expected	31	None	replace
102	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
103	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds,  type);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds,  type);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	45	None	replace
104	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  types);  [CE]  cannot  find  symbol  types  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  types);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  types);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    type);    	non-compiled	[CE]  cannot  find  symbol  types	23	None	replace
105	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	replace
106	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns,  toWildcardType);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns,  toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  typeVarAssigns,  toWildcardType);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
107	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType,  type);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType,  type);	  Type[]    upperBounds    =    getImplicitUpperBounds(toLowerBounds,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
108	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(toLowerBounds,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
109	[BUG]  [BUGGY]  Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardType  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);	  Type[]    wildcardType    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    +    1]);    	non-compiled	[CE]  ']'  expected	49	None	replace
110	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitTopBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitTopBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  topBounds  =  getImplicitTopBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    topBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
111	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitFunctionBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitFunctionBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitFunctionBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    for    (Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	27	None	replace
112	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  ';'  expected	30	None	replace
113	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	26	None	replace
114	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  toLowerBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
115	[BUG]  [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  this.typeVarAssigns);  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  this.typeVarAssigns);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  wildcardTypeVarAssigns  =  getImplicitWildcardTypeVariables(wildcardType,  this.typeVarAssigns);	  Type[]    wildcardTypeVarAssigns    =    getImplicitWildcardTypeVariables(wildcardType,    type);    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	23	None	replace
116	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toWildcardType);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	16	None	replace
117	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  wildcardType.toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  wildcardType.toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  wildcardType.toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
118	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type.toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type.toLowerBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type.toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
119	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[wildcardType.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[wildcardType.size()  ]);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[wildcardType.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	39	None	replace
120	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWillcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWillcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWillcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWillcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
121	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWillcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWillcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWillcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(toWillcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitUpperBounds(toWillcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
122	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  toUpperBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  toUpperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  toUpperBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType,    toUpperBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	43	None	replace
123	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  type.toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;      [BUGGY]  Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  type.toLowerBounds);  [BUGGY]      Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);      [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	Type[]  toLowerBounds  =  getImplicitVowerBounds(wildcardType,  type.toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitVowerBounds(wildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
