bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>()    :    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  incompatible  types	22	None	replace
2	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>()    :    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  incompatible  types	22	None	replace
3	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>()    :    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  '('  or  '['  expected	22	None	replace
4	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(ownerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(ownerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(ownerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parmeterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	72	None	replace
5	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parmeterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parmeterizedOwnerType  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parmeterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parmeterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parmeterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parmeterizedOwnerType	72	None	replace
6	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  toClass  ==  null?  new  TypeVariable  <?>[];  [CE]  array  dimension  missing  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  toClass  ==  null?  new  TypeVariable  <?>[];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeParams  =  toClass  ==  null?  new  TypeVariable  <?>[];	  TypeVariable    <?>[]    subtypeParams    =    typeVarAssigns    ==    null?    new    TypeVariable    <?>[];    	non-compiled	[CE]  array  dimension  missing	56	None	replace
7	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  TypeVariable  <?>[];  [CE]  array  dimension  missing  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  TypeVariable  <?>[];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  TypeVariable  <?>[];	  TypeVariable    <?>[]    subtypeParams    =    typeVarAssigns    ==    null?    new    TypeVariable    <?>[];    	non-compiled	[CE]  array  dimension  missing	56	None	replace
8	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  parameterizedOwnerType  ==  null?  new  TypeVariable  <?>[];  [CE]  array  dimension  missing  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  parameterizedOwnerType  ==  null?  new  TypeVariable  <?>[];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeParams  =  parameterizedOwnerType  ==  null?  new  TypeVariable  <?>[];	  TypeVariable    <?>[]    subtypeParams    =    typeVarAssigns    ==    null?    new    TypeVariable    <?>[];    	non-compiled	[CE]  array  dimension  missing	56	None	replace
9	[BUG]  [BUGGY]  }  else  if(toClass  instanceof  TypeVariable  <?>  ||  toClass  instanceof  TypeVariable  <?>)  {  [CE]  inconvertible  types  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClass  instanceof  TypeVariable  <?>  ||  toClass  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass  instanceof  TypeVariable  <?>  ||  toClass  instanceof  TypeVariable  <?>)  {	  }    else    if(typeVarAssigns    instanceof    TypeVariable    <?>    ||    typeVarAssigns    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  inconvertible  types	14	None	replace
10	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	59	None	replace
11	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  :  expected	59	None	replace
12	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(toClass);	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	59	None	replace
13	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	59	None	replace
14	[BUG]  [BUGGY]  }  else  if(typeParams  ==  null)  {  [CE]  cannot  find  symbol  typeParams  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeParams  ==  null)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeParams  ==  null)  {	  }    else    if(subtypeVarAssigns    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  typeParams	12	None	replace
15	[BUG]  [BUGGY]  typeParameters  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameters  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameters  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParams    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	53	None	replace
16	[BUG]  [BUGGY]  typeParassigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParassigns  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParassigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParassigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParams    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	53	None	replace
17	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>,  Type>)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>,  Type>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  TypeVariable  <?>,  Type>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
18	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
19	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>[]  subtypeVarAssigns)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>[]  subtypeVarAssigns)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>[]  subtypeVarAssigns)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
20	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	  TypeVariable    <?>[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  :  expected	84	None	replace
21	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);	  TypeVariable    <?>[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
22	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeVarAssigns);	  TypeVariable    <?>[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
23	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(toClass);	  TypeVariable    <?>[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	84	None	replace
24	[BUG]  [BUGGY]  }  else  if(typeParams  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  typeParams  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeParams  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeParams  instanceof  TypeVariable  <?>)  {	  }    else    if(typeVarAssigns    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  typeParams	23	None	replace
25	[BUG]  [BUGGY]  typeParas  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParas  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParas  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParas  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParas    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParas	67	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	8	2	add
27	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	8	2	add
28	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeV  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeV  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeV	  	non-compiled	[CE]  not  a  statement	8	None	add
29	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVar  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVar  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVar	  	non-compiled	[CE]  not  a  statement	8	None	add
30	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAs  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAs  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAs	  	non-compiled	[CE]  not  a  statement	8	None	add
31	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeV  [CE]  not  a  statement  [FE]            AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeV  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeV	  	non-compiled	[CE]  not  a  statement	8	None	add
32	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Map<TypeVariable<?>,Type>,ParameterizedType)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Map<TypeVariable<?>,Type>,ParameterizedType)	78	None	replace
33	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	78	None	replace
34	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)	78	None	replace
35	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,ParameterizedType,Map<TypeVariable<?>,Type>)	78	None	replace
36	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)	30	None	replace
37	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeParams);  [CE]  cannot  find  symbol  subtypeParams  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeParams);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeParams);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  subtypeParams	30	None	replace
38	[BUG]  [BUGGY]  }  else  if(!toClass.contains(typeVarAssigns))  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(typeVarAssigns))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(typeVarAssigns))  {	  }    else    if(!parameterizedOwnerType.contains(typeVarAssigns))    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
39	[BUG]  [BUGGY]  }  else  if(parameterizedOwnerType  instanceof  TypeVariable  <?>  ||  parameterizedOwnerType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(parameterizedOwnerType  instanceof  TypeVariable  <?>  ||  parameterizedOwnerType  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parameterizedOwnerType  instanceof  TypeVariable  <?>  ||  parameterizedOwnerType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeParams    instanceof    TypeVariable    <?>    ||    typeParams    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	15	None	replace
40	[BUG]  [BUGGY]  }  else  if(typeParassigns  instanceof  TypeVariable  <?>  ||  typeParassigns  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  typeParassigns  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeParassigns  instanceof  TypeVariable  <?>  ||  typeParassigns  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeParassigns  instanceof  TypeVariable  <?>  ||  typeParassigns  instanceof  TypeVariable  <?>)  {	  }    else    if(typeParams    instanceof    TypeVariable    <?>    ||    typeParams    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	15	None	replace
41	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
42	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
43	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
44	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  cls);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  cls);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
45	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArgs  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArgs    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	52	None	replace
46	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArgs    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	52	None	replace
47	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    ownerType);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	70	None	replace
48	[BUG]  [BUGGY]  }  else  if(!ownerType.contains(subtypeVarAssigns))  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!ownerType.contains(subtypeVarAssigns))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!ownerType.contains(subtypeVarAssigns))  {	  }    else    if(!ownerType.contains(typeVarAssigns))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
49	[BUG]  [BUGGY]  }  else  if(!toClass.contains(parameterizedType))  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(parameterizedType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(parameterizedType))  {	  }    else    if(!parameterizedType.contains(typeVarAssigns))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
50	[BUG]  [BUGGY]  }  else  if(!toClass.contains(parameterizedType,  typeVarAssigns))  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(parameterizedType,  typeVarAssigns))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(parameterizedType,  typeVarAssigns))  {	  }    else    if(!parameterizedType.contains(typeVarAssigns))    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
51	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [CE]  cannot  find  symbol  typeParams  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  cannot  find  symbol  typeParams	7	None	replace
52	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>)	31	None	replace
53	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,ParameterizedType)	31	None	replace
54	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	31	None	replace
55	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  parametersOwnerType  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  parametersOwnerType	31	None	replace
56	[BUG]  [BUGGY]  typeArgs  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParas    =    getTypeParameters(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	68	None	replace
57	[BUG]  [BUGGY]  typeParas  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParas  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParas  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParas  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParas    =    getTypeParameters(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParas	68	None	replace
58	[BUG]  [BUGGY]  typeParams  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  cannot  find  symbol  typeParams  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParams  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParams  =  new  HashMap  <  TypeVariable  <?>,  Type>();	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    CategoryVariable    <?>,    Type>();    }    	non-compiled	[CE]  cannot  find  symbol  typeParams	69	None	replace
59	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  CategoryVariable  <?>,  Type>();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  CategoryVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  CategoryVariable  <?>,  Type>();	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    CategoryVariable    <?>,    Type>();    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
60	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  getTypeParameters(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
61	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  getTypeParameters(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
62	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
63	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(typeVarAssigns),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(typeVarAssigns),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(typeVarAssigns),  parameterizedOwnerType);	  Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)	79	None	replace
64	[BUG]  [BUGGY]  }  else  if(toClass  ==  null  ||  toClass.isPrimitive())  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClass  ==  null  ||  toClass.isPrimitive())  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass  ==  null  ||  toClass.isPrimitive())  {	  }    else    if(toClass    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	13	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	6	2	add
66	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	6	2	add
67	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeV  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeV  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeV	  	non-compiled	[CE]  not  a  statement	6	None	add
68	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVar  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVar  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVar	  	non-compiled	[CE]  not  a  statement	6	None	add
69	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAs  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAs  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAs	  	non-compiled	[CE]  not  a  statement	6	None	add
70	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
71	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArgs  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	83	None	replace
72	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArgs  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	83	None	replace
73	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArgs  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	83	None	replace
74	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParassigns    =    getTypeParameters(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
75	[BUG]  [BUGGY]  typeParassigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeParassigns  [FE]                        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParassigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParassigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeParassigns    =    getTypeParameters(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	44	None	replace
76	[BUG]  [BUGGY]  typeVarAssigns  =  new  LinkedHashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  LinkedHashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  LinkedHashMap  <  TypeVariable  <?>();	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	55	None	replace
77	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>(),  toClass);  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>(),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>(),  toClass);	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	55	None	replace
78	[BUG]  [BUGGY]  }  else  if(!toClass.contains(ownerType))  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(ownerType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(ownerType))  {	  }    else    if(!toClass.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
79	[BUG]  [BUGGY]  }  else  if(!toClass.contains(cls))  {  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(cls))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(cls))  {	  }    else    if(!toClass.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
80	[BUG]  [BUGGY]  }  else  if(!toClass.contains(parentType))  {  [CE]  cannot  find  symbol  parentType  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(parentType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(parentType))  {	  }    else    if(!toClass.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol  parentType	35	None	replace
81	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns.getParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns.getParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns.getParameters();	  Type[]    subtypeParams    =    parameterizedOwnerType.getParameters();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
82	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType,  toClass.getParameters();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType,  toClass.getParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType,  toClass.getParameters();	  Type[]    subtypeParams    =    parameterizedOwnerType.getParameters();    	non-compiled	[CE]  ';'  expected	45	None	replace
83	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getParameters();  [CE]  cannot  find  symbol  parametersType  [FE]                        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  parametersType.getParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  parametersType.getParameters();	  Type[]    subtypeParams    =    parameterizedOwnerType.getParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	45	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	46	2	add
85	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	46	2	add
86	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>  [CE]  '('  or  '['  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>	  	non-compiled	[CE]  '('  or  '['  expected	46	None	add
87	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(type  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(type  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(type	  	non-compiled	[CE]  ')'  expected	46	None	add
88	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  	  	non-compiled	[CE]  illegal  start  of  type	46	None	add
89	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()	  	non-compiled	[CE]  ';'  expected	46	None	add
90	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeParams);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
91	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeParams);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
92	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>  ||  typeVarAssigns  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>  ||  typeVarAssigns  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  TypeVariable  <?>  ||  typeVarAssigns  instanceof  TypeVariable  <?>)  {	  }    else    if(typeVarAssigns    instanceof    TypeVariable    <?>    ||    ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	61	None	replace
93	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
94	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [Delete]  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [Delete]  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [Delete]	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
95	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <  }	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
96	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  {  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <  {	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
97	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns,  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns,  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns,  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
98	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
99	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  Type  <?>)  {  [CE]  type  Type  does  not  take  parameters  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  instanceof  Type  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  Type  <?>)  {	  }    else    if(ownerType    instanceof    Type    <?>)    {    	non-compiled	[CE]  type  Type  does  not  take  parameters	27	None	replace
100	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  Type  <?>  ||  ownerType  instanceof  Type  <?>)  {  [CE]  type  Type  does  not  take  parameters  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(ownerType  instanceof  Type  <?>  ||  ownerType  instanceof  Type  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  Type  <?>  ||  ownerType  instanceof  Type  <?>)  {	  }    else    if(ownerType    instanceof    Type    <?>)    {    	non-compiled	[CE]  type  Type  does  not  take  parameters	27	None	replace
101	[BUG]  [BUGGY]  }  else  if(parameterizedOwnerType  instanceof  Type  <?>)  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(parameterizedOwnerType  instanceof  Type  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parameterizedOwnerType  instanceof  Type  <?>)  {	  }    else    if(ownerType    instanceof    Type    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	27	None	replace
102	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	1	2	add
103	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	1	2	add
104	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterized  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterized  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterized	  	non-compiled	[CE]  ')'  expected	1	None	add
105	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
106	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(para  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(para  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(para	  	non-compiled	[CE]  ')'  expected	1	None	add
107	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameter  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameter  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameter	  	non-compiled	[CE]  ')'  expected	1	None	add
108	[BUG]  [BUGGY]  typeParassigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParassigns  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParassigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParassigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParameters    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	38	None	replace
109	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
110	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
111	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
112	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  toClass  ==  null?  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
113	[BUG]  [BUGGY]  typeArgs  =  getTypeParameters(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArgs  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeParameters(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeParameters(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeArgs    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	42	None	replace
114	[BUG]  [BUGGY]  typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArgs  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArgs    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	42	None	replace
115	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArg  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeArg    =    getTypeArguments(typeParameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	37	None	replace
116	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(type,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(type,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(type,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArg    =    getTypeArguments(typeParameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	37	None	replace
117	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeArgs);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeArgs);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns    ==    null)    {    typeVarAssigned    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  cannot  find  symbol  typeArgs	75	None	replace
118	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  toClass,  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(typeVarAssigns),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)	57	None	replace
119	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(typeVarAssigns),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	57	None	replace
120	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(typeVarAssigns),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(typeVarAssigns),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(typeVarAssigns),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(typeVarAssigns),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)	57	None	replace
121	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);	  }    else    if(typeVarAssigns    instanceof    Class    <?>)    {    	non-compiled	[CE]  ')'  expected	25	None	replace
122	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns));  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns));	  }    else    if(typeVarAssigns    instanceof    Class    <?>)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
123	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArg  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArg    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	36	None	replace
124	[BUG]  [BUGGY]  typeParameters  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameters  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameters  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParameters    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	85	None	replace
125	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeVarAssigns);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeVarAssigns);	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  ';'  expected	20	None	replace
126	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>(),  toClass);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>(),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>(),  toClass);	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  ';'  expected	20	None	replace
127	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeParams);  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeParams);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(typeParams);	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  ';'  expected	20	None	replace
128	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
129	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
130	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeParams);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
131	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameterizedOwnerType  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getrawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameterizedOwnerType	73	None	replace
132	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArg    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	39	None	replace
133	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeArg    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	39	None	replace
134	[BUG]  [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  parentType  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(parentType  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parentType  instanceof  TypeVariable  <?>)  {	  }    else    if(parameterizedOwnerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  parentType	24	None	replace
135	[BUG]  [BUGGY]  }  else  if(!typeVarAssigns.contains(toClass))  {  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!typeVarAssigns.contains(toClass))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!typeVarAssigns.contains(toClass))  {	  }    else    if(!typeVarAssigns.contains(propertyType))    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
136	[BUG]  [BUGGY]  typeParameters  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  cannot  find  symbol  typeParameters  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameters  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  new  HashMap  <  TypeVariable  <?>,  Type>();	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns    ==    null)    {    typeVarAssigneds    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  cannot  find  symbol  typeParameters	51	None	replace
137	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
138	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(toClass,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
139	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
140	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  typeVarAssigns;  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  typeVarAssigns;  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  typeVarAssigns;	  TypeVariable    <?>[]    subtypeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	77	None	replace
141	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  typeVarAssigns);  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  typeVarAssigns);	  TypeVariable    <?>[]    subtypeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	77	None	replace
142	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  LinkedHashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  LinkedHashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  new  LinkedHashMap  <  TypeVariable  <?>();	  TypeVariable    <?>[]    subtypeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	77	None	replace
143	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();	  TypeVariable    <?>[]    subtypeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	77	None	replace
144	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  toClass;  [CE]  cannot  find  symbol  typeParams  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  toClass;  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  toClass;	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  cannot  find  symbol  typeParams	21	None	replace
145	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParameters.size()  ];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParameters.size()  ];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParameters.size()  ];	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  :  expected	21	None	replace
146	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  +  1];  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  +  1];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  +  1];	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  :  expected	21	None	replace
147	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,ParameterizedType)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,ParameterizedType)	40	None	replace
148	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	40	None	replace
149	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  cannot  find  symbol  typeParameterizedOwnerType  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameterizedOwnerType	40	None	replace
150	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	33	None	replace
151	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeParams);  [CE]  cannot  find  symbol  subtypeParams  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeParams);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeParams);	  typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  subtypeParams	33	None	replace
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	48	2	add
153	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	48	2	add
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	48	2	add
155	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	48	2	add
156	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>	  	non-compiled	[CE]  '('  or  '['  expected	48	None	add
157	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(type  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(type  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(type	  	non-compiled	[CE]  ')'  expected	48	None	add
158	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  	  	non-compiled	[CE]  illegal  start  of  type	48	None	add
159	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArg  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArg	76	None	replace
160	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArg  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArg	76	None	replace
161	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArg  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArg	76	None	replace
162	[BUG]  [BUGGY]  }  else  if(ownerType!=  null)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(ownerType!=  null)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType!=  null)  {	  }    else    if(ownerType    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	11	None	replace
163	[BUG]  [BUGGY]  }  else  if(!subtypeVarAssigns.contains(parameterizedOwnerType))  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!subtypeVarAssigns.contains(parameterizedOwnerType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!subtypeVarAssigns.contains(parameterizedOwnerType))  {	  }    else    if(!subtypeVarAssigns.contains(parameterizedType))    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	74	None	replace
164	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
165	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
166	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
167	[BUG]  [BUGGY]  typeParassigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeParassigns  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParassigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParassigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeParassigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	41	None	replace
168	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  Class  <?>,  Type>)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  instanceof  Class  <?>,  Type>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  Class  <?>,  Type>)  {	  }    else    if(ownerType    instanceof    Class    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
169	[BUG]  [BUGGY]  }  else  if(toClass  instanceof  TypeVariable  <?>,  Type>  subtypeVarAssigns)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClass  instanceof  TypeVariable  <?>,  Type>  subtypeVarAssigns)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass  instanceof  TypeVariable  <?>,  Type>  subtypeVarAssigns)  {	  }    else    if(ownerType    instanceof    Class    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
170	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Type)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Type)	58	None	replace
171	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	58	None	replace
172	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns    ==    null)    {    typeVarAssigneds    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  :  expected	51	None	replace
173	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedType);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,ParameterizedType)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,ParameterizedType)	40	None	replace
174	[BUG]  [BUGGY]  Type  ownerType  =  parameterizedOwnerType.getParameterType(parameterizedOwnerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type  ownerType  =  parameterizedOwnerType.getParameterType(parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type  ownerType  =  parameterizedOwnerType.getParameterType(parameterizedOwnerType);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
175	[BUG]  [BUGGY]  Type  ownerType  =  parameterizedOwnerType.getRawType(parameterizedOwnerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type  ownerType  =  parameterizedOwnerType.getRawType(parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type  ownerType  =  parameterizedOwnerType.getRawType(parameterizedOwnerType);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
176	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType,  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Map<TypeVariable<?>,Type>,Type,Class<CAP#2>)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType,  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType,  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Map<TypeVariable<?>,Type>,Type,Class<CAP#2>)	78	None	replace
177	[BUG]  [BUGGY]  }  else  if(!toClass.contains(propertyType))  {  [CE]  cannot  find  symbol  propertyType  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClass.contains(propertyType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(propertyType))  {	  }    else    if(!toClass.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol  propertyType	35	None	replace
178	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	add
179	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParams  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol  typeParams	1	None	add
180	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameters  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol  typeParameters	1	None	add
181	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  >>  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  >>  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <  >>	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
182	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  >=  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  >=  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <  >=	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
183	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parentType,  getRawType(parentType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parentType  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parentType,  getRawType(parentType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parentType,  getRawType(parentType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parmeterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parentType	72	None	replace
184	[BUG]  [BUGGY]  }  else  if(nameVarAssigns  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  nameVarAssigns  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(nameVarAssigns  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(nameVarAssigns  instanceof  TypeVariable  <?>)  {	  }    else    if(parameterizedOwnerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  nameVarAssigns	24	None	replace
185	[BUG]  [BUGGY]  }  else  if(!typeVarAssigns.contains(name))  {  [CE]  cannot  find  symbol  name  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!typeVarAssigns.contains(name))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!typeVarAssigns.contains(name))  {	  }    else    if(!typeVarAssigns.contains(propertyType))    {    	non-compiled	[CE]  cannot  find  symbol  name	81	None	replace
186	[BUG]  [BUGGY]  Type[]  subtypeParams  =  ownerType.getParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  ownerType.getParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  ownerType.getParameters();	  Type[]    subtypeParams    =    parameterizedOwnerType.getParameters();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
187	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedOwnerType.getParameters();  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  parametersizedOwnerType.getParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  parametersizedOwnerType.getParameters();	  Type[]    subtypeParams    =    parameterizedOwnerType.getParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	45	None	replace
188	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  Class  <?>)  {  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  Class  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  instanceof  Class  <?>)  {	  }    else    if(typeVarAssigns    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	25	None	replace
189	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>[]  subtypeVarAssigns);  [CE]  array  dimension  missing  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>[]  subtypeVarAssigns);  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>[]  subtypeVarAssigns);	  }    else    if(typeVarAssigns    instanceof    Class    <?>)    {    	non-compiled	[CE]  array  dimension  missing	25	None	replace
190	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeParameters,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(typeParameters,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeParameters,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArg    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	36	None	replace
191	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
192	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  parameterizedType);	  Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	60	None	replace
193	[BUG]  [BUGGY]  typeParameters  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameters  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameters  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParameters    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	85	None	replace
194	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  Class  <?>,  Type>)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  Class  <?>,  Type>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  instanceof  Class  <?>,  Type>)  {	  }    else    if(ownerType    instanceof    Class    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	82	None	replace
195	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArg    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	39	None	replace
196	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedParameterizedType);  [CE]  cannot  find  symbol  typeArg  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedParameterizedType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedParameterizedType);	  typeArg    =    getTypeArguments(typeParameterizedType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	65	None	replace
197	[BUG]  [BUGGY]  Type[]  subtypeParams  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>()    :    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  incompatible  types	22	None	replace
198	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Map<TypeVariable<?>,Type>,Class<CAP#2>)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(typeVarAssigns),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Map<TypeVariable<?>,Type>,Class<CAP#2>)	57	None	replace
199	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(typeVarAssigns),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	57	None	replace
200	[BUG]  [BUGGY]  Type[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  Type[typeParams.size()  ];  [CE]  :  expected  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  Type[typeParams.size()  ];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  subtypeVarAssigns  ==  null?  new  Type[typeParams.size()  ];	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  :  expected	21	None	replace
201	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[subtypeVarAssigns.size()  ];  [CE]  :  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[subtypeVarAssigns.size()  ];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[subtypeVarAssigns.size()  ];	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  :  expected	21	None	replace
202	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  cannot  find  symbol  typeParams  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  cannot  find  symbol  typeParams	21	None	replace
203	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>  ||  subtypeVarAssigns  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>  ||  subtypeVarAssigns  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>  ||  subtypeVarAssigns  instanceof  TypeVariable  <?>)  {	  }    else    if(typeParams    instanceof    TypeVariable    <?>    ||    typeParams    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	15	None	replace
204	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>  ||  typeParams  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  typeParams  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>  ||  typeParams  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  TypeVariable  <?>  ||  typeParams  instanceof  TypeVariable  <?>)  {	  }    else    if(typeParams    instanceof    TypeVariable    <?>    ||    typeParams    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  typeParams	15	None	replace
205	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)	31	None	replace
206	[BUG]  [BUGGY]  typeParas  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParas  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParas  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParas  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeParams    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParas	53	None	replace
207	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	3	None	replace
208	[BUG]  [BUGGY]  typeParas  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeParas  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParas  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParas  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeParas    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParas	67	None	replace
209	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeVarAssigns    instanceof    TypeVariable    <?>    ||    ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	61	None	replace
210	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	  TypeVariable    <?>[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  :  expected	84	None	replace
211	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	  TypeVariable    <?>[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  :  expected	84	None	replace
212	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  type  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  type  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  type	  	non-compiled	[CE]  not  a  statement	6	None	add
213	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssign  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssign  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssign	  	non-compiled	[CE]  not  a  statement	6	None	add
214	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parametersizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parametersizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  parametersizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	58	None	replace
215	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
216	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
217	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterized  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterized  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterized	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	2	None	replace
218	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ';'  expected	2	None	replace
219	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRa  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRa  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRa	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	2	None	replace
220	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArgs  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(typeVarAssigns,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeArgs    =    getTypeArguments(typeParameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	54	None	replace
221	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArg  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArg	76	None	replace
222	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	71	None	replace
223	[BUG]  [BUGGY]  Type[]  subtypeVars  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVars  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVars  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    subtypeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
224	[BUG]  [BUGGY]  }  else  if(!ownerType.contains(typeVarAssigns)||!subtypeVarAssigns.contains(ownerType))  {  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!ownerType.contains(typeVarAssigns)||!subtypeVarAssigns.contains(ownerType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!ownerType.contains(typeVarAssigns)||!subtypeVarAssigns.contains(ownerType))  {	  }    else    if(!ownerType.contains(typeVarAssigns))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
225	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArg  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(typeArg,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	43	None	replace
226	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>)  {	  }    else    if(typeVarAssigns    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	23	None	replace
227	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>	  	non-compiled	[CE]  >  expected	46	None	add
228	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>[0];  [CE]  :  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>[0];  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>[0];	  TypeVariable    <?>[]    subtypeParams    =    typeVarAssigns    ==    null?    new    TypeVariable    <?>[];    	non-compiled	[CE]  :  expected	56	None	replace
229	[BUG]  [BUGGY]  typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(typeVarAssigns),  parameterizedOwnerType);  [CE]  cannot  find  symbol  typeArgs  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(typeVarAssigns),  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(typeVarAssigns),  parameterizedOwnerType);	  typeArgs    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	42	None	replace
230	[BUG]  [BUGGY]  }  else  if(!ownerType.contains(parameterizedOwnerType))  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!ownerType.contains(parameterizedOwnerType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!ownerType.contains(parameterizedOwnerType))  {	  }    else    if(!parameterizedOwnerType.contains(typeVarAssigns))    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	34	None	replace
231	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()	  	non-compiled	[CE]  ';'  expected	48	None	add
232	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>	  	non-compiled	[CE]  >  expected	48	None	add
233	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
234	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
235	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>,  Type>)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>,  Type>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  instanceof  TypeVariable  <?>,  Type>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>,    Type>    subtypeVarAssigns)    {    	non-compiled	[CE]  ')'  expected	80	None	replace
236	[BUG]  [BUGGY]  Type  ownerType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type  ownerType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type  ownerType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
237	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	19	None	replace
238	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  :  expected	59	None	replace
239	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	59	None	replace
240	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(typeParameters,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(typeParameters,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(typeParameters,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArgs    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	52	None	replace
241	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
242	[BUG]  [BUGGY]  typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeAssigns);  [CE]  cannot  find  symbol  typeParams  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeAssigns);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns    ==    null)    {    typeVarAssigned    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  cannot  find  symbol  typeParams	75	None	replace
243	[BUG]  [BUGGY]  typeParameters  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeParameters  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameters  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeParameters    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	85	None	replace
244	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>(subtypeVarAssigns);	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    	non-compiled	[CE]  ';'  expected	20	None	replace
245	[BUG]  [BUGGY]  Type[]  typeParams  =  parameterizedOwnerType.getParameters();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  parameterizedOwnerType.getParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  parameterizedOwnerType.getParameters();	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
246	[BUG]  [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterized  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterized  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterized	  	non-compiled	[CE]  ')'  expected	1	None	add
247	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.typeParameters();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.typeParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.typeParameters();	  Type[]    subtypeParams    =    parameterizedOwnerType.getParameters();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
248	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArgs  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeArgs  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	83	None	replace
249	[BUG]  [BUGGY]  typeVarAssigned  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeVarAssigned  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigned  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigned  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns    ==    null)    {    typeVarAssigned    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	75	None	replace
250	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVari  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVari  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVari	  	non-compiled	[CE]  >  expected	48	None	add
251	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?	  	non-compiled	[CE]  >  expected	48	None	add
252	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);	  Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
253	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
254	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getSubtypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getSubtypeParameters();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getSubtypeParameters();	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	47	None	replace
255	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  cls);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  cls);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  cls);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	31	None	replace
256	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns,  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns,  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns,  ownerType);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
257	[BUG]  [BUGGY]  }  else  if(!subtypeVarAssigns.contains(typeVarAssigns))  {  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!subtypeVarAssigns.contains(typeVarAssigns))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!subtypeVarAssigns.contains(typeVarAssigns))  {	  }    else    if(!subtypeVarAssigns.contains(parameterizedType))    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
258	[BUG]  [BUGGY]  typeParameterizedType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameterizedType  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameterizedType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameterizedType  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeArg    =    getTypeArguments(typeParameterizedType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameterizedType	65	None	replace
259	[BUG]  [BUGGY]  }  else  if(typeParassigns  instanceof  TypeVariable  <?>  ||  typeParas  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  typeParassigns  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeParassigns  instanceof  TypeVariable  <?>  ||  typeParas  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeParassigns  instanceof  TypeVariable  <?>  ||  typeParas  instanceof  TypeVariable  <?>)  {	  }    else    if(typeParams    instanceof    TypeVariable    <?>    ||    typeParams    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	15	None	replace
260	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  null;  [CE]  cannot  find  symbol  typeParams  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  null;  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ]  :  null;	  Type[]    subtypeParams    =    typeVarAssigns    ==    null?    new    Type[typeParams.size()    ];    	non-compiled	[CE]  cannot  find  symbol  typeParams	21	None	replace
261	[BUG]  [BUGGY]  }  else  if(parameterizedType  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(parameterizedType  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parameterizedType  instanceof  TypeVariable  <?>)  {	  }    else    if(parameterizedOwnerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	24	None	replace
262	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  cls);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  cls);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    typeParams);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
263	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  types);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  types);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  types);	  Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	19	None	replace
264	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  toClass);	  typeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
265	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
266	[BUG]  [BUGGY]  }  else  if(toClassParams  ==  null)  {  [CE]  cannot  find  symbol  toClassParams  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClassParams  ==  null)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClassParams  ==  null)  {	  }    else    if(subtypeVarAssigns    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  toClassParams	12	None	replace
267	[BUG]  [BUGGY]  }  else  if(toClassParameters  ==  null)  {  [CE]  cannot  find  symbol  toClassParameters  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClassParameters  ==  null)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClassParameters  ==  null)  {	  }    else    if(subtypeVarAssigns    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  toClassParameters	12	None	replace
268	[BUG]  [BUGGY]  }  else  if(!toClassVarAssigns.contains(ownerType))  {  [CE]  cannot  find  symbol  toClassVarAssigns  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(!toClassVarAssigns.contains(ownerType))  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClassVarAssigns.contains(ownerType))  {	  }    else    if(!subtypeVarAssigns.contains(ownerType))    {    	non-compiled	[CE]  cannot  find  symbol  toClassVarAssigns	62	None	replace
269	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArgu  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArgu  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArgu	  	non-compiled	[CE]  ';'  expected	8	None	add
270	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments	  	non-compiled	[CE]  ';'  expected	8	None	add
271	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssign  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssign  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssign	  	non-compiled	[CE]  not  a  statement	8	None	add
272	[BUG]  [BUGGY]  typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeParameters  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeParameters    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	38	None	replace
273	[BUG]  [BUGGY]  }  else  if(parameterizedType  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                  AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(parameterizedType  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parameterizedType  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {	  }    else    if(typeVarAssigns    instanceof    TypeVariable    <?>    ||    ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	61	None	replace
274	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]    typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
275	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?	  	non-compiled	[CE]  >  expected	46	None	add
276	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVari  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVari  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        new        HashMap        <        TypeVariable        <?>,        Type>();        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVari	  	non-compiled	[CE]  >  expected	46	None	add
277	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  Map  <?>)  {  [CE]  wrong  number  of  type  arguments;  required  2  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  instanceof  Map  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  Map  <?>)  {	  }    else    if(typeVarAssigns    instanceof    Class    <?>)    {    	non-compiled	[CE]  wrong  number  of  type  arguments;  required  2	25	None	replace
278	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  Class  <?>  ||  typeVarAssigns  instanceof  Class  <?>)  {  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(typeVarAssigns  instanceof  Class  <?>  ||  typeVarAssigns  instanceof  Class  <?>)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  Class  <?>  ||  typeVarAssigns  instanceof  Class  <?>)  {	  }    else    if(typeVarAssigns    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	25	None	replace
279	[BUG]  [BUGGY]  }  else  if(parameterizedType  ==  null)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(parameterizedType  ==  null)  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parameterizedType  ==  null)  {	  }    else    if(ownerType    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	11	None	replace
280	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	9	None	replace
281	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeVarAssigns);	  Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
282	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArgu  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArgu  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArgu	  	non-compiled	[CE]  ';'  expected	6	None	add
283	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments	  	non-compiled	[CE]  ';'  expected	6	None	add
284	[BUG]  [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  nu  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  nu  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	                if(typeVarAssigns        ==        null)        {        typeVarAssigns        =        getTypeArguments(parameterizedOwnerType,        getRawType(parameterizedOwnerType),        subtypeVarAssigns);        }        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  nu	  	non-compiled	[CE]  ')'  expected	6	None	add
285	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterized  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterized  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterized	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	2	None	replace
286	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRa  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRa  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRa	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	2	None	replace
287	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns!=  null?  new  HashMap  <  TypeVariable  <?>()  :  new  HashMap  <  TypeVariable  <?>();	  Type[]    subtypeVarAssigns    =    typeVarAssigns    ==    null?    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	64	None	replace
288	[BUG]  [BUGGY]  typeVarAssigns  =  new  TreeMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  new  TreeMap  <  TypeVariable  <?>();  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  TreeMap  <  TypeVariable  <?>();	  typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    	non-compiled	[CE]  >  expected	55	None	replace
289	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	49	None	replace
290	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  else  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]      AssertionError    [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  else  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  else  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	          if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	49	None	replace
291	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)  [FE]        AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns,  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)	78	None	replace
292	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Type,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType,  subtypeVarAssigns);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Type,Map<TypeVariable<?>,Type>)	78	None	replace
293	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns,  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]            AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns,  parameterizedOwnerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns,  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns,    ownerType);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	78	None	replace
294	[BUG]  [BUGGY]  }  else  if(toClass.isPrimitive())  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                    AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClass.isPrimitive())  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass.isPrimitive())  {	  }    else    if(toClass    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	13	None	replace
295	[BUG]  [BUGGY]  }  else  if(toClass.isPrimitive()  ||  toClass.isPrimitive())  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                      AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  }  else  if(toClass.isPrimitive()  ||  toClass.isPrimitive())  {  [BUGGY]        typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass.isPrimitive()  ||  toClass.isPrimitive())  {	  }    else    if(toClass    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	13	None	replace
296	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Type)  [FE]              AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  ownerType);	  typeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Type)	33	None	replace
297	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(par  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);      [BUGGY]  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(par  [BUGGY]      }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(par	          typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns    =    getTypeArguments(parmeterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  ')'  expected	72	None	replace
