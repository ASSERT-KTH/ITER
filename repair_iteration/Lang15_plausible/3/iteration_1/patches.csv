bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	2	2	add
2	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	2	2	add
3	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
4	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
5	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	5	2	add
7	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	5	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	5	2	add
9	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	compilable	  [FE]  AssertionError  	5	2	add
10	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	non-compiled	[CE]  not  a  statement	5	None	add
11	[BUG]  [BUGGY]  }  else  if(ownerType  ==  null)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(ownerType  ==  null)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  ==  null)  {	  }    else    if(typeVarAssigns    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	10	None	replace
12	[BUG]  [BUGGY]  }  else  if(subtypeVarAssigns  ==  null)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(subtypeVarAssigns  ==  null)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(subtypeVarAssigns  ==  null)  {	  }    else    if(typeVarAssigns    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	10	None	replace
13	[BUG]  [BUGGY]  }  else  if(toClass  ==  null)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]                AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(toClass  ==  null)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass  ==  null)  {	  }    else    if(typeVarAssigns    ==    null)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	10	None	replace
14	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>  ||  typeVarAssigns  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>  ||  typeVarAssigns  instanceof  TypeVariable  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  TypeVariable  <?>  ||  typeVarAssigns  instanceof  TypeVariable  <?>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>    ||    ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	11	None	replace
15	[BUG]  [BUGGY]  }  else  if(typeParams  instanceof  TypeVariable  <?>  ||  typeParams  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  typeParams  [FE]                AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(typeParams  instanceof  TypeVariable  <?>  ||  typeParams  instanceof  TypeVariable  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeParams  instanceof  TypeVariable  <?>  ||  typeParams  instanceof  TypeVariable  <?>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>    ||    ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  typeParams	11	None	replace
16	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
17	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	      Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
18	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeParams);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeParams);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeParams);	      Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
19	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
20	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	14	None	replace
21	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ];  [CE]  :  expected  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ];  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  Type[typeParams.size()  ];	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  :  expected	14	None	replace
22	[BUG]  [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>()  :  new  HashMap  <  TypeVariable  <?>,  Type>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  incompatible  types	14	None	replace
23	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  TypeVariable  <?>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	8	None	replace
24	[BUG]  [BUGGY]  }  else  if(parameterizedOwnerType  instanceof  TypeVariable  <?>)  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(parameterizedOwnerType  instanceof  TypeVariable  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(parameterizedOwnerType  instanceof  TypeVariable  <?>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	8	None	replace
25	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  Class  <?>)  {  [CE]  inconvertible  types  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(typeVarAssigns  instanceof  Class  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  Class  <?>)  {	  }    else    if(ownerType    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	15	None	replace
26	[BUG]  [BUGGY]  }  else  if(toClass  instanceof  TypeVariable  <?>)  {  [CE]  inconvertible  types  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(toClass  instanceof  TypeVariable  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(toClass  instanceof  TypeVariable  <?>)  {	  }    else    if(ownerType    instanceof    Class    <?>)    {    	non-compiled	[CE]  inconvertible  types	15	None	replace
27	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  Type  <?>)  {  [CE]  type  Type  does  not  take  parameters  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(ownerType  instanceof  Type  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  Type  <?>)  {	  }    else    if(ownerType    instanceof    Class    <?>)    {    	non-compiled	[CE]  type  Type  does  not  take  parameters	15	None	replace
28	[BUG]  [BUGGY]  }  else  if(!typeVarAssigns.contains(ownerType))  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!typeVarAssigns.contains(ownerType))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!typeVarAssigns.contains(ownerType))  {	  }    else    if(!typeVarAssigns.contains(parameterizedType))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
29	[BUG]  [BUGGY]  }  else  if(!parameterizedType.contains(typeVarAssigns))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!parameterizedType.contains(typeVarAssigns))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!parameterizedType.contains(typeVarAssigns))  {	  }    else    if(!typeVarAssigns.contains(parameterizedType))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
30	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	3	None	replace
31	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>)  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	      typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>)	3	None	replace
32	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(type,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  type  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(type,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(type,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
33	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	3	None	replace
34	[BUG]  [BUGGY]  }  else  if(!parameterizedOwnerType.contains(typeVarAssigns))  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!parameterizedOwnerType.contains(typeVarAssigns))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!parameterizedOwnerType.contains(typeVarAssigns))  {	  }    else    if(!typeVarAssigns.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	9	None	replace
35	[BUG]  [BUGGY]  }  else  if(!toClass.contains(parameterizedOwnerType))  {  [CE]  cannot  find  symbol  parameterizedOwnerType  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!toClass.contains(parameterizedOwnerType))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!toClass.contains(parameterizedOwnerType))  {	  }    else    if(!typeVarAssigns.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol  parameterizedOwnerType	9	None	replace
36	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArg  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	12	None	replace
37	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArg  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	12	None	replace
38	[BUG]  [BUGGY]  typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameters  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	12	None	replace
39	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	12	None	replace
40	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  typeVarAssigns);	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	6	None	replace
41	[BUG]  [BUGGY]  typeParassigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParassigns  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParassigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParassigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	4	None	replace
42	[BUG]  [BUGGY]  typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	4	None	replace
43	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
44	[BUG]  [BUGGY]  typeParassigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParassigns  [FE]                  AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParassigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParassigns  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParassigns	4	None	replace
45	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getParameters();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeParams  =  parameterizedOwnerType.getParameters();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeParams  =  parameterizedOwnerType.getParameters();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    else    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	13	2	add
47	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	13	2	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	13	2	add
49	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns!=  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	compilable	  [FE]  AssertionError  	13	2	add
50	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	non-compiled	[CE]  not  a  statement	13	None	add
51	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigneds  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigneds  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigneds  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	13	None	add
52	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	1	None	replace
53	[BUG]  [BUGGY]  typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParams  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParams  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	1	None	replace
54	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArgs  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArgs  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(typeParameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	1	None	replace
55	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    }    	non-compiled	[CE]  >  expected	18	None	replace
56	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>[];  [CE]  array  dimension  missing  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  TypeVariable  <?>[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>[];  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeParams  =  typeVarAssigns  ==  null?  new  TypeVariable  <?>[];	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    }    	non-compiled	[CE]  array  dimension  missing	18	None	replace
57	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(typeVarAssigns),  subtypeVarAssigns);	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Map<TypeVariable<?>,Type>)	6	None	replace
58	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Type)  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);	      typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Type)	3	None	replace
59	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  :  expected	14	None	replace
60	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
61	[BUG]  [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {  [CE]  variable  typeVarAssigns  might  not  have  been  initialized  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(typeVarAssigns  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(typeVarAssigns  instanceof  TypeVariable  <?>  ||  ownerType  instanceof  TypeVariable  <?>)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>    ||    ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  variable  typeVarAssigns  might  not  have  been  initialized	11	None	replace
62	[BUG]  [BUGGY]  }  else  if(!subtypeVarAssigns.contains(ownerType))  {  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!subtypeVarAssigns.contains(ownerType))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!subtypeVarAssigns.contains(ownerType))  {	  }    else    if(!typeVarAssigns.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
63	[BUG]  [BUGGY]  }  else  if(!ownerType.contains(typeVarAssigns))  {  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!ownerType.contains(typeVarAssigns))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!ownerType.contains(typeVarAssigns))  {	  }    else    if(!typeVarAssigns.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
64	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    }    	non-compiled	[CE]  >  expected	18	None	replace
65	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(typeParameterizedType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeArg  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArg  =  getTypeArguments(typeParameterizedType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(typeParameterizedType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	12	None	replace
66	[BUG]  [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [CE]  >  expected  [FE]                AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  new  HashMap  <  TypeVariable  <  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  new  HashMap  <  TypeVariable  <	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    else    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <    	non-compiled	[CE]  >  expected	7	None	replace
67	[BUG]  [BUGGY]  typeParas  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParas  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParas  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParas  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParas	4	None	replace
68	[BUG]  [BUGGY]  typeParas  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParas  [FE]              AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParas  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParas  =  getTypeParameters(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParas	4	None	replace
69	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  CategoryVariable  <?>,  Type>();  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  TypeVariable  <?>,  Type>();  }  if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  CategoryVariable  <?>,  Type>();  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  new  HashMap  <  CategoryVariable  <?>,  Type>();  }	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
70	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  ownerType);	      Type[]    subtypeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
71	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
72	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parmeterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parmeterizedOwnerType  [FE]      AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parmeterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parmeterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol  parmeterizedOwnerType	2	None	add
73	[BUG]  [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getrawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getrawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getrawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	2	None	add
74	[BUG]  [BUGGY]  }  else  if(!subtypeVarAssigns.contains(parameterizedType))  {  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!subtypeVarAssigns.contains(parameterizedType))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!subtypeVarAssigns.contains(parameterizedType))  {	  }    else    if(!typeVarAssigns.contains(parameterizedType))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
75	[BUG]  [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigned  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]      if(typeVarAssigns  ==  null)  {  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  if(typeVarAssigns  ==  null)  {  typeVarAssigned  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	        if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    if(typeVarAssigns  ==  null)  {  typeVarAssigned  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	5	None	add
76	[BUG]  [BUGGY]  typeArg  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArg  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArg  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArg  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	      typeArg    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArg	12	None	replace
77	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>();  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  new  HashMap  <  TypeVariable  <?>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>();    }    	non-compiled	[CE]  >  expected	18	None	replace
78	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Map<TypeVariable<?>,Type>,Type)  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	      typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Map<TypeVariable<?>,Type>,Type)	3	None	replace
79	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	Type[]  typeParams  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
80	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>  subtypeVarAssigns)  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>  subtypeVarAssigns)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  TypeVariable  <?>,  Type>  subtypeVarAssigns)  {	  }    else    if(ownerType    instanceof    TypeVariable    <?>)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
81	[BUG]  [BUGGY]  }  else  if(!typeVarAssigns.contains(propertyType))  {  [CE]  cannot  find  symbol  propertyType  [FE]          AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(!typeVarAssigns.contains(propertyType))  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(!typeVarAssigns.contains(propertyType))  {	  }    else    if(!typeVarAssigns.contains(parameterizedOwnerType))    {    	non-compiled	[CE]  cannot  find  symbol  propertyType	9	None	replace
82	[BUG]  [BUGGY]  }  else  if(ownerType  instanceof  Class  <?>,  Type>  subtypeVarAssigns)  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  }  else  if(ownerType  instanceof  Class  <?>,  Type>  subtypeVarAssigns)  {  [BUGGY]      typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	}  else  if(ownerType  instanceof  Class  <?>,  Type>  subtypeVarAssigns)  {	  }    else    if(ownerType    instanceof    Class    <?>)    {    	non-compiled	[CE]  ')'  expected	15	None	replace
83	[BUG]  [BUGGY]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  typeArgs  [FE]        AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeArgs  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	      typeArgs    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	1	None	replace
84	[BUG]  [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [CE]  :  expected  [FE]    AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	TypeVariable  <?>[]  subtypeVarAssigns  =  typeVarAssigns  ==  null?  new  HashMap  <  TypeVariable  <?>,  Type>();	      if(typeVarAssigns    ==    null)    {    typeVarAssigns    =    new    HashMap    <    TypeVariable    <?>,    Type>();    }    	non-compiled	[CE]  :  expected	14	None	replace
85	[BUG]  [BUGGY]  typeParameters  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParameters  [FE]            AssertionError    [CONTEXT]    if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);    [BUGGY]  typeParameters  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	typeParameters  =  getTypeParameters(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      typeParams    =    getTypeParameters(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParameters	4	None	replace
