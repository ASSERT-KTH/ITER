bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.cloneTree();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toBound.cloneTree();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toBound.cloneTree();	      Type[]    lowerBounds    =    toLowerBounds.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.clone();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.clone();	      Type[]    lowerBounds    =    toLowerBounds.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.cloneTypeTree();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.cloneTypeTree();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.cloneTypeTree();	      Type[]    lowerBounds    =    toLowerBounds.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
5	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  Type  lowerBounds  =  toLowerBounds.get(toBound);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toLowerBounds.get(toBound);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toLowerBounds.get(toBound);	      Type    lowerBounds    =    toLowerBounds.get(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
8	[BUG]  [BUGGY]  Type  lowerBounds  =  toLowerBounds.get(typeVarAssigns,  toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toLowerBounds.get(typeVarAssigns,  toBound);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toLowerBounds.get(typeVarAssigns,  toBound);	      Type    lowerBounds    =    toLowerBounds.get(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
9	[BUG]  [BUGGY]  Type  lowerBounds  =  toLowerBounds.get(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toLowerBounds.get(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toLowerBounds.get(toBound,  typeVarAssigns);	      Type    lowerBounds    =    toLowerBounds.get(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
10	[BUG]  [BUGGY]  for  (Type  toBound  :  toLowerBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  toBound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for  (Type  toBound  :  toLowerBounds)  {	  for    (Type    bound    :    toBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
11	[BUG]  [BUGGY]  for  (Type  bound  :  toWildcardType.toBounds)  {  [CE]  cannot  find  symbol  toBounds  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  toWildcardType.toBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for  (Type  bound  :  toWildcardType.toBounds)  {	  for    (Type    bound    :    toBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toBounds	7	None	replace
12	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getUpperBounds();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toBound.getUpperBounds();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toBound.getUpperBounds();	      Type[]    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.getLowerBounds();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  toBound.getLowerBounds();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  upperBounds  =  toBound.getLowerBounds();	      Type[]    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getLeftBounds();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toBound.getLeftBounds();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toBound.getLeftBounds();	      Type[]    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  for  (Type  bound  :  toBound.type)  {  [CE]  cannot  find  symbol  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  toBound.type)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for  (Type  bound  :  toBound.type)  {	  for    (Type    bound    :    toBound)    {    	non-compiled	[CE]  cannot  find  symbol  type	8	None	replace
16	[BUG]  [BUGGY]  for  (Type  bound  :  toBound.types)  {  [CE]  cannot  find  symbol  types  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  toBound.types)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for  (Type  bound  :  toBound.types)  {	  for    (Type    bound    :    toBound)    {    	non-compiled	[CE]  cannot  find  symbol  types	8	None	replace
17	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(toBound,  toBound,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  Type  lowerBounds  =  replaceTypeVariables(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  replaceTypeVariables(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  replaceTypeVariables(toBound,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
20	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  For(Type  bound  :  toLowerBounds)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  For(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    For(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  ')'  expected	17	None	add
21	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toUpperBounds)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    for(Type  bound  :  toUpperBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
22	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  =  toLowerBounds)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  for(Type  bound  =  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    for(Type  bound  =  toLowerBounds)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
23	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  ';'  expected	5	None	replace
25	[BUG]  [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	      Type    lowerBound    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
26	[BUG]  [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds,  typeVarAssigns);	      Type    lowerBound    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
27	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	      Type    lowerBound    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toUpperBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toUpperBounds);	      Type    lowerBound    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  Type  lowerBound  =  toBound.subtractTypeVariables(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  toBound.subtractTypeVariables(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  toBound.subtractTypeVariables(typeVarAssigns);	      Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  Type  lowerBound  =  replaceTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  replaceTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  replaceTypeVariables(toBound,  toLowerBounds);	      Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  Type  lowerBound  =  toBound.stripTypeVariables(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  toBound.stripTypeVariables(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  toBound.stripTypeVariables(typeVarAssigns);	      Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]));  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]));	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  ';'  expected	2	None	replace
34	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.subtract(typeVarAssigns,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.subtract(typeVarAssigns,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.subtract(typeVarAssigns,  toLowerBounds);	      Type    lowerBounds    =    toBound.subtract(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
35	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.subtract(typeVarAssigns,  toBound);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.subtract(typeVarAssigns,  toBound);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.subtract(typeVarAssigns,  toBound);	      Type    lowerBounds    =    toBound.subtract(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.subtract(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.subtract(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.subtract(toBound,  typeVarAssigns);	      Type    lowerBounds    =    toBound.subtract(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
37	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.subtract(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toBound.subtract(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toBound.subtract(typeVarAssigns);	      Type    lowerBounds    =    toBound.subtract(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  Type  toLowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  toLowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  toLowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  Type[]  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  Type  toBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  toBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  toBounds  =  substituteTypeVariables(toBound,  toLowerBounds);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type  toBound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
42	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType.toLowerBounds)  {  [CE]  cannot  find  symbol  toLowerBounds  [FE]      AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toWildcardType.toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type  bound  :  toWildcardType.toLowerBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	non-compiled	[CE]  cannot  find  symbol  toLowerBounds	18	None	replace
43	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.getRawClass(),  typeVarAssigns);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.getRawClass(),  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.getRawClass(),  typeVarAssigns);	      Type    lowerBounds    =    toBound.getRawClass();    	non-compiled	[CE]  ';'  expected	16	None	replace
44	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.getRawClass(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.getRawClass(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.getRawClass(typeVarAssigns);	      Type    lowerBounds    =    toBound.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.getRawType();  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.getRawType();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.getRawType();	      Type    lowerBounds    =    toBound.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
46	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.getUpperBounds();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.getUpperBounds();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.getUpperBounds();	      Type    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  Type  upperBounds  =  toBound.getLowerBounds();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  toBound.getLowerBounds();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  upperBounds  =  toBound.getLowerBounds();	      Type    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.getLeftBounds();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.getLeftBounds();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.getLeftBounds();	      Type    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	add
50	[BUG]  [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	add
51	[BUG]  [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  replaceTypeVariables(toBound,  typeVarAssigns);  [CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  replaceTypeVariables(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  lowerBound  =  replaceTypeVariables(toBound,  typeVarAssigns);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	add
52	[BUG]  [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds);  [CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	add
53	[BUG]  [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  toWildcardType);  [CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  lowerBound  =  substituteTypeVariables(toBound,  toWildcardType);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  lowerBound  =  substituteTypeVariables(toBound,  toWildcardType);	  	non-compiled	[CE]  variable  lowerBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	add
54	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.getLowerBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.getLowerBounds(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.getLowerBounds(typeVarAssigns);	      Type    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
55	[BUG]  [BUGGY]  for  (Type  bound  :  toWildcardType)  {  [CE]  for-each  not  applicable  to  expression  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  toWildcardType)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for  (Type  bound  :  toWildcardType)  {	  for    (Type    bound    :    toBounds)    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	7	None	replace
56	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.cloneType();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.cloneType();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toLowerBounds.cloneType();	      Type[]    lowerBounds    =    toLowerBounds.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toBound);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toBound);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toBound);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toBound,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
60	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(upperBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(upperBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(upperBound,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(toBound,  toUpperBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(toBound,  toUpperBounds);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  Type  upperBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  upperBounds  =  substituteTypeVariables(toBound,  toLowerBounds);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  Type[]  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  substituteTypeVariables(toBound,  toLowerBounds);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
64	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.subtract(toLowerBounds);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.subtract(toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.subtract(toLowerBounds);	      Type    lowerBounds    =    toBound.subtract(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
65	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  :  toLowerBounds)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  ';'  expected	17	None	add
66	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
67	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getLowerBounds(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  toBound.getLowerBounds(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  toBound.getLowerBounds(typeVarAssigns);	      Type[]    lowerBounds    =    toBound.getLowerBounds();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
68	[BUG]  [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds,  toLowerBounds);	      Type    lowerBound    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
69	[BUG]  [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  wildcardType);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  wildcardType);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  substituteTypeVariables(toBound,  toLowerBounds,  wildcardType);	      Type    lowerBound    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  Type  lowerBound  =  replacementTypeVariables(toBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  replacementTypeVariables(toBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  replacementTypeVariables(toBound,  toLowerBounds);	      Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  substituteTypeVariables(toBound,  toUpperBounds);	      Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  Type  upperBounds  =  toLowerBounds.get(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  toLowerBounds.get(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  upperBounds  =  toLowerBounds.get(typeVarAssigns);	      Type    lowerBounds    =    toLowerBounds.get(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  upperBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	add	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  upperBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  	compilable	  [FE]  AssertionError  	3	2	add
74	[BUG]  [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  upperBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]      Type  lowerBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  Type  upperBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	        Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    Type  upperBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  	compilable	  [FE]  AssertionError  	3	2	add
75	[BUG]  [BUGGY]  Type[]  lowerBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type[]  lowerBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type[]  lowerBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toLowerBounds);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toLowerBounds);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toLowerBounds);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  substituteTypeVariables(lowerBound,  toLowerBounds,  typeVarAssigns);	      Type    lowerBounds    =    substituteTypeVariables(lowerBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
78	[BUG]  [BUGGY]  Type  lowerBounds  =  toBound.subtract(toLowerBounds,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBounds  =  toBound.subtract(toLowerBounds,  typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBounds  =  toBound.subtract(toLowerBounds,  typeVarAssigns);	      Type    lowerBounds    =    toBound.subtract(typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
79	[BUG]  [BUGGY]  Type  upperBounds  =  toBound.getRawClass();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  upperBounds  =  toBound.getRawClass();  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  upperBounds  =  toBound.getRawClass();	      Type    lowerBounds    =    toBound.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
80	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  lowerBounds  =  toLowerBounds.keySet();  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  lowerBounds  =  toLowerBounds.keySet();  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  lowerBounds  =  toLowerBounds.keySet();  for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
81	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  lowerBounds  =  toLowerBounds.values();  for(Type  bound  :  toLowerBounds)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  lowerBounds  =  toLowerBounds.values();  for(Type  bound  :  toLowerBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  lowerBounds  =  toLowerBounds.values();  for(Type  bound  :  toLowerBounds)  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
82	[BUG]  [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toLowerBounds)  {  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type    bound    :    toLowerBounds)    {    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
83	[BUG]  [BUGGY]  for  (Type  bound  :  toWildcardType.assigns)  {  [CE]  cannot  find  symbol  assigns  [FE]        AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for  (Type  bound  :  toWildcardType.assigns)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for  (Type  bound  :  toWildcardType.assigns)  {	  for    (Type    bound    :    toBounds)    {    	non-compiled	[CE]  cannot  find  symbol  assigns	7	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	add	for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	compilable	  [FE]  AssertionError  	18	2	replace
85	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  for(Type  bound  :  toUpperBounds)  {  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	for(Type  bound  :  toUpperBounds)  {	  for(Type    bound    :    toLowerBounds)    {    	compilable	  [FE]  AssertionError  	18	2	replace
86	[BUG]  [BUGGY]  Type  lowerBound  =  toBound.removeTypeVariables(typeVarAssigns);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);        [BUGGY]  Type  lowerBound  =  toBound.removeTypeVariables(typeVarAssigns);  [BUGGY]    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	Type  lowerBound  =  toBound.removeTypeVariables(typeVarAssigns);	      Type    lowerBound    =    substituteTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
