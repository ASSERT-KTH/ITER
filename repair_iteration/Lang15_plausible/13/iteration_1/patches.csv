bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
2	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  typeVarAssigns.get(0);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
4	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  typeVarAssigns.get(0);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	2	2	replace
6	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	2	2	replace
7	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	2	None	replace
8	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
9	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
10	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
11	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
12	[BUG]  [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
13	[BUG]  [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
14	[BUG]  [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  fromTypeVarAssigns.isEmpty())  {	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
15	[BUG]  [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  fromTypeVarAssigns.isEmpty())  {  return  false;	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
16	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type,  toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type,  toClass);	      Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	27	None	replace
17	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(toClass);	      Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	27	None	replace
18	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass);	      Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	25	None	replace
19	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass);	      Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	25	None	replace
20	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
21	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  byTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
22	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
23	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);	      Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	21	None	replace
24	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());	      Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	21	None	replace
25	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey());	      Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	21	None	replace
26	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	6	None	add
27	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	6	None	add
28	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
29	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	23	None	replace
30	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
31	[BUG]  [BUGGY]  typeVarAssigns.put(type,  fromTypeVarAssigns);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  typeVarAssigns.put(type,  fromTypeVarAssigns);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(type,  fromTypeVarAssigns);	      typeVarAssigns.put(type,    toTypeVarAssigns);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	5	None	replace
32	[BUG]  [BUGGY]  typeVarAssigns.put(toTypeArg,  toTypeVarAssigns);  [CE]  cannot  find  symbol  toTypeArg  [FE]                AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  typeVarAssigns.put(toTypeArg,  toTypeVarAssigns);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(toTypeArg,  toTypeVarAssigns);	      typeVarAssigns.put(type,    toTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toTypeArg	5	None	replace
33	[BUG]  [BUGGY]  typeVarAssigns.put(type,  toParameterizedType);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  typeVarAssigns.put(type,  toParameterizedType);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(type,  toParameterizedType);	      typeVarAssigns.put(type,    toTypeVarAssigns);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	5	None	replace
34	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(type);	      Type    toParameterizedType    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	4	None	replace
35	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(type,  fromTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(type,  fromTypeVarAssigns);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(type,  fromTypeVarAssigns);	      Type    toParameterizedType    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	4	None	replace
36	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	24	None	replace
37	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	24	None	replace
38	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  +  1]);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  +  1]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  +  1]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	24	None	replace
39	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	22	None	replace
40	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	22	None	replace
41	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	22	None	replace
42	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toClass);	      Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	replace
43	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(type,  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  toTypeVarAssigns.get(type,  toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(type,  toClass);	      Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	replace
44	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);	      Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
45	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());	      Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
46	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey());	      Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
47	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(toClass);	      Type    type    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	20	None	replace
48	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeArg);	      Type    type    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	20	None	replace
49	[BUG]  [BUGGY]  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  typeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
50	[BUG]  [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  false;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  false;  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toTypeVarAssigns.isEmpty())  {  return  false;	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
51	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(typeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  aughtExceptionHandler.handleMissingClass(typeVarAssigns);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	aughtExceptionHandler.handleMissingClass(typeVarAssigns);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	13	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	14	2	add
53	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	14	2	add
54	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  If(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  If(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	14	None	add
55	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
56	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigneds.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  fromTypeVarAssigneds  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigneds.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigneds.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  fromTypeVarAssigneds	14	None	add
57	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(typeVarAssigns))  {  return  false;  }	  return    false;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  return    false;    	compilable	  [FE]  AssertionError  	9	2	replace
59	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  return    false;    	compilable	  [FE]  AssertionError  	9	2	replace
60	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(0);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(0);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(0);	      Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	12	2	add
62	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	12	2	add
63	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  If(typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  If(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    false;    }    If(typeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	12	None	add
64	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    false;    }    typeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	12	None	add
65	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    false;    }    Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	12	None	add
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	16	2	add
67	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	16	2	add
68	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  If(!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  If(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())    {    return    true;    }    If(!typeVarAssigns.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  ';'  expected	16	None	add
69	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigneds.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigneds.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigneds.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	16	None	add
70	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toClass);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toClass);	      Type    toParameterizedType    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	19	None	replace
71	[BUG]  [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!typeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
72	[BUG]  [BUGGY]  parent  ==  null  ||!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  ||!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||!typeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
73	[BUG]  [BUGGY]  parent  ==  null  &&!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  &&!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  &&!typeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
74	[BUG]  [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!typeVarAssigns.isEmpty())  {  return  false;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	10	2	add
76	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	10	2	add
77	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  If(typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  If(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    true;    }    If(typeVarAssigns.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  ';'  expected	10	None	add
78	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigneds.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigneds.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	10	None	add
79	[BUG]  [BUGGY]  return  false;  Type  type  =  toTypeVarAssigns.get(type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  type  =  toTypeVarAssigns.get(type);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  type  =  toTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
80	[BUG]  [BUGGY]  return  false;  Type  toParameterizedType  =  fromTypeVarAssigns.get(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  toParameterizedType  =  fromTypeVarAssigns.get(type);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  toParameterizedType  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
81	[BUG]  [BUGGY]  return  false;  Type  toTypeVarAssigns  =  getTypeArguments(type,  toClass);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  toTypeVarAssigns  =  getTypeArguments(type,  toClass);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  toTypeVarAssigns  =  getTypeArguments(type,  toClass);	  	non-compiled	[CE]  incompatible  types	8	None	add
82	[BUG]  [BUGGY]  return  false;  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  toParameterizedType  =  getTypeArguments(type,  toClass);	  	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
83	[BUG]  [BUGGY]  return  false;  Type  toParameterizedType  =  fromTypeVarAssigns.get(0);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  toParameterizedType  =  fromTypeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  toParameterizedType  =  fromTypeVarAssigns.get(0);	  	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
84	[BUG]  [BUGGY]  parent!=  typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent!=  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  typeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
85	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	16	None	add
86	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	  	compilable	  [FE]  AssertionError  	1	2	add
88	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	  	compilable	  [FE]  AssertionError  	1	2	add
89	[BUG]  [BUGGY]  return(typeVarAssigns!=  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns!=  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns!=  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	24	None	replace
90	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	      Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	replace
91	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigneds.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	12	None	add
92	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(toTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(toTypeVarAssigns);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(toTypeVarAssigns);	      Type    toParameterizedType    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	4	None	replace
93	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
94	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
95	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
97	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
99	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	compilable	  [FE]  AssertionError  	7	2	replace
100	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
101	[BUG]  [BUGGY]  parent!=  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent!=  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  typeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
102	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	22	None	replace
103	[BUG]  [BUGGY]  typeVarAssigns.put(type,  toTypeArg);  [CE]  cannot  find  symbol  toTypeArg  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  typeVarAssigns.put(type,  toTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(type,  toTypeArg);	      typeVarAssigns.put(type,    toTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toTypeArg	5	None	replace
104	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toParameterizedType);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toParameterizedType);	      Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	21	None	replace
105	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.get(0);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.get(0);	  return    false;    	non-compiled	[CE]  incompatible  types	9	None	replace
106	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getKey());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getKey());	      Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
107	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toTypeArg);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  toTypeVarAssigns.get(toTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toTypeArg);	      Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	replace
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	2	2	replace
109	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	2	2	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  typeVarAssigns.get(type);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	2	2	replace
111	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  typeVarAssigns.get(type);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	2	2	replace
112	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(toParameterizedType);	      Type    type    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	20	None	replace
113	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg);	      Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	25	None	replace
114	[BUG]  [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(type);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  type  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
115	[BUG]  [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
116	[BUG]  [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
117	[BUG]  [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));	  	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
118	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    true;    }    Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	10	None	add
119	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type);	      Type    toParameterizedType    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
120	[BUG]  [BUGGY]  parent  ==  null  ||!typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  ||!typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||!typeVarAssigns.isEmpty())  {  return  false;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
121	[BUG]  [BUGGY]  parent  ==  null  &&!typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  &&!typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  &&!typeVarAssigns.isEmpty())  {  return  false;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
122	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey());	      Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
123	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeArg);	      Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	replace
124	[BUG]  [BUGGY]  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
125	[BUG]  [BUGGY]  parent  ==  null  &&  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  &&  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  &&  typeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	13	None	replace
126	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	13	None	replace
127	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg);  [CE]  cannot  find  symbol  fromTypeArg  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg);	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  fromTypeArg	2	None	replace
128	[BUG]  [BUGGY]  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
129	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()?  true  :  false;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  typeVarAssigns.isEmpty()?  true  :  false;  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()?  true  :  false;	  if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
130	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeArg);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeArg);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeArg);	      Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	27	None	replace
131	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey());	      Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	replace
132	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(0);	  return    false;    	non-compiled	[CE]  incompatible  types	9	None	replace
133	[BUG]  [BUGGY]  return(fromTypeVarAssigns!=  null)?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(fromTypeVarAssigns!=  null)?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns!=  null)?  null  :  fromTypeVarAssigns.get(0);	  return    false;    	non-compiled	[CE]  incompatible  types	9	None	replace
134	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	6	None	add
135	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  inTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
136	[BUG]  [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  getTypeVarAssigns(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]      Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  getTypeVarAssigns(type);  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	        Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  getTypeVarAssigns(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
137	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigned.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigned.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigned.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	12	None	add
138	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]    return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());	      Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
139	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	22	None	replace
140	[BUG]  [BUGGY]  return  false;  if(typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    if(typeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  unreachable  statement	8	None	add
141	[BUG]  [BUGGY]  return  false;  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
142	[BUG]  [BUGGY]  return  false;  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	add
143	[BUG]  [BUGGY]  return  false;  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  return  false;  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return    false;    if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
144	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(parent))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(parent))  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(parent))  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
145	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(parent);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(parent);  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(parent);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
146	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(toParameterizedType.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {    [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(toParameterizedType.isEmpty())  {  return  false;  }  [BUGGY]    }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(toParameterizedType.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
