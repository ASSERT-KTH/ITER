bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParameters();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getSubtypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getAssignments();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  toClass.getAssignments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getAssignments();	      Type[]    subtypeParams    =    parameterizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
3	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getDeclaredTypeParameters();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getDeclaredTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getDeclaredTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
4	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getConstructorParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getConstructorParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getConstructorParameters();	      Type[]    subtypeVarAssigns    =    parameterizedType.getOwnerTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
5	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeParameters();	      Type[]    subtypeVarAssigns    =    parameterizedType.getOwnerTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
6	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
7	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
8	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getReturnTypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
9	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getConstructorArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getConstructorArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getConstructorArguments();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
10	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  toClass.getActualTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getActualTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
11	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getActualTypeParameters();  [CE]  cannot  find  symbol  parametersType  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersType.getActualTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getActualTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	15	None	replace
12	[BUG]  [BUGGY]  Type[]  subtypeParams  =  ownerType.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  ownerType.getActualTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  ownerType.getActualTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
13	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>)  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Class<CAP#3>)	12	None	replace
14	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	12	None	replace
15	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,ParameterizedType)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,ParameterizedType)	12	None	replace
16	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	12	None	replace
17	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
18	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	compilable	  [FE]  NullPointerException  	9	2	replace
19	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  NullPointerException  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	compilable	  [FE]  NullPointerException  	9	2	replace
20	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
21	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersType  [FE]                  AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(toClass),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersType	9	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	6	2	add
23	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	6	2	add
24	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	6	None	add
25	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeParams  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	6	None	add
26	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  types  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	6	None	add
27	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,Map<TypeVariable<?>,Type>)	8	None	replace
28	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Class<CAP#2>,Map<TypeVariable<?>,Type>)	8	None	replace
29	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType,Map<TypeVariable<?>,Type>)	8	None	replace
30	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>,Type)	8	None	replace
31	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubTypeParameters();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getSubTypeParameters();	      Type[]    subtypeParams    =    parameterizedOwnerType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
32	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getSubTypeParameters();  [CE]  cannot  find  symbol  parametersizedType  [FE]                  AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getSubTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getSubTypeParameters();	      Type[]    subtypeParams    =    parameterizedOwnerType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	5	None	replace
33	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getSubTypeParameters();  [CE]  cannot  find  symbol  parametersType  [FE]                    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersType.getSubTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getSubTypeParameters();	      Type[]    subtypeParams    =    parameterizedOwnerType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	5	None	replace
34	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getParameterizedTypeArguments();	      Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
35	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getRawTypeArguments();	      Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
36	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeArguments();	      Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
37	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getConstructorArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getConstructorArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getConstructorArguments();	      Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
38	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeParameters();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
39	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeParameters();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
40	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
41	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getAssignedTypeParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  toClass.getAssignedTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getAssignedTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
42	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getAssignedTypeParameters();  [CE]  cannot  find  symbol  parametersType  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersType.getAssignedTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getAssignedTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	3	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	10	2	add
44	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	compilable	  [FE]  AssertionError  	10	2	add
45	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	add
46	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	10	None	add
47	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  types  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	10	None	add
48	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getActualTypeParameters();  [CE]  cannot  find  symbol  parametersizedType  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getActualTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getActualTypeParameters();	      Type[]    subtypeParams    =    parameterizedOwnerType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	2	None	replace
49	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getSubtypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getSubtypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getSubtypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedOwnerType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
50	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getParameterizedTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getParameterizedTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getParameterizedTypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedOwnerType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
51	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parameterizedOwnerType,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,ParameterizedType,Map<TypeVariable<?>,Type>)	7	None	replace
52	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  parametersType  [FE]      NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  parametersType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  parametersType	7	None	replace
53	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Type)  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(ownerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Type)	11	None	replace
54	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)  [FE]      AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Type,Class<CAP#1>,Class<CAP#2>)	11	None	replace
55	[BUG]  [BUGGY]  Type[]  subtypeParams  =  toClass.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  toClass.getConstructorParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  toClass.getConstructorParameters();	      Type[]    subtypeParams    =    parameterizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
56	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersType.getConstructorParameters();  [CE]  cannot  find  symbol  parametersType  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersType.getConstructorParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersType.getConstructorParameters();	      Type[]    subtypeParams    =    parameterizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersType	1	None	replace
57	[BUG]  [BUGGY]  Type[]  subtypeParams  =  ownerType.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  ownerType.getConstructorParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  ownerType.getConstructorParameters();	      Type[]    subtypeParams    =    parameterizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
58	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getOwnerTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parametersizedType.getOwnerTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parametersizedType.getOwnerTypeParameters();	      Type[]    subtypeVarAssigns    =    parameterizedType.getOwnerTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
59	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>)	7	None	replace
60	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getRawTypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
61	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables();	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
62	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type  ownerType  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	add
63	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeArgs  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	10	None	add
64	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getConstructorParameters();  [CE]  cannot  find  symbol  parametersizedType  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getConstructorParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getConstructorParameters();	      Type[]    subtypeParams    =    parameterizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	1	None	replace
65	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedOwnerType.getSubTypeParameters();  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedOwnerType.getSubTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedOwnerType.getSubTypeParameters();	      Type[]    subtypeParams    =    parameterizedOwnerType.getSubTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	5	None	replace
66	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getAssignments();  [CE]  cannot  find  symbol  parametersizedType  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getAssignments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getAssignments();	      Type[]    subtypeParams    =    parameterizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	4	None	replace
67	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	add
68	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  incompatible  types  [FE]      NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeArgs  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  incompatible  types	6	None	add
69	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedOwnerType.getActualTypeParameters();  [CE]  cannot  find  symbol  parametersizedOwnerType  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedOwnerType.getActualTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedOwnerType.getActualTypeParameters();	      Type[]    subtypeParams    =    parameterizedOwnerType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedOwnerType	2	None	replace
70	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getAssignedTypeParameters();  [CE]  cannot  find  symbol  parametersizedType  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parametersizedType.getAssignedTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parametersizedType.getAssignedTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getAssignedTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  parametersizedType	3	None	replace
71	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  typeParams  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(typeParams,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typeParams	11	None	replace
72	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameterizedType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
73	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parametersType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
74	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]                AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  ownerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
75	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType)  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(parameterizedOwnerType),  parameterizedOwnerType);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Class<CAP#2>,Class<CAP#3>,ParameterizedType)	12	None	replace
76	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getRawTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getRawTypeArguments();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getRawTypeArguments();	      Type[]    subtypeVarAssigns    =    parameterizedOwnerType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
77	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVariables();	      Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
78	[BUG]  [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getSubtypeVarAssigns();	      Class    <?>[]    subtypeVarAssigns    =    parameterizedType.getActualTypeArguments();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	18	None	replace
79	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getConstructorParameters(toClass);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getConstructorParameters(toClass);  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getConstructorParameters(toClass);	      Type[]    subtypeParams    =    parameterizedType.getConstructorParameters();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
80	[BUG]  [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParams();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  parameterizedType.getSubtypeParams();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  parameterizedType.getSubtypeParams();	      Type[]    subtypeParams    =    parameterizedType.getAssignments();    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
81	[BUG]  [BUGGY]  Type[]  subtypeParams  =  paramizedType.getActualTypeParameters();  [CE]  cannot  find  symbol  paramizedType  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeParams  =  paramizedType.getActualTypeParameters();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeParams  =  paramizedType.getActualTypeParameters();	      Type[]    subtypeParams    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  cannot  find  symbol  paramizedType	15	None	replace
82	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    toClass,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)	8	None	replace
83	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  toClass);	  typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	7	None	replace
84	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass);  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters(toClass);	      Type[]    subtypeVarAssigns    =    parameterizedType.getActualTypeParameters();    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
85	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	add
86	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(ownerType,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
87	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns    =    getTypeArguments(cls,    getRawType(parameterizedOwnerType),    subtypeVarAssigns);    Type[]  typeParams  =  getTypeParameters(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
88	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [CE]  cannot  find  symbol  typeParams  [FE]        AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeParams);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass,  typeParams);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeParams	12	None	replace
89	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]            AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  toClass,  subtypeVarAssigns);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
90	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameters);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]              AssertionError    [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;    [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameters);  [BUGGY]    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns,  parameters);	  typeVarAssigns    =    getTypeArguments(parameterizedOwnerType,    getRawType(toClass),    subtypeVarAssigns);    	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	9	None	replace
