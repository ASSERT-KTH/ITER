bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getConstructorParameters();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getConstructorParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeParams  =  parameterizedType.getConstructorParameters();		non-compiled	[CE]  cannot  find  symbol	4	None	add
2	[BUG]  [BUGGY]    Type[]  subtypeParams  =  parameterizedOwnerType.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeParams  =  parameterizedOwnerType.getActualTypeParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeParams  =  parameterizedOwnerType.getActualTypeParameters();		non-compiled	[CE]  cannot  find  symbol	4	None	add
3	[BUG]  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getAssignedTypeParameters();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getAssignedTypeParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeParams  =  parameterizedType.getAssignedTypeParameters();		non-compiled	[CE]  cannot  find  symbol	4	None	add
4	[BUG]  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getAssignments();  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getAssignments();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeParams  =  parameterizedType.getAssignments();		non-compiled	[CE]  cannot  find  symbol	4	None	add
5	[BUG]  [BUGGY]    Type[]  subtypeParams  =  parameterizedOwnerType.getSubTypeParameters();  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeParams  =  parameterizedOwnerType.getSubTypeParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeParams  =  parameterizedOwnerType.getSubTypeParameters();		non-compiled	[CE]  cannot  find  symbol	4	None	add
6	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	compilable	  [FE]  NullPointerException  	3	2	replace
7	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  NullPointerException  [FE]    AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	compilable	  [FE]  NullPointerException  	3	2	replace
8	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>,Map<TypeVariable<?>,Type>)	3	None	replace
9	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)  [FE]        AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(toClass),  subtypeVarAssigns);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	non-compiled	[CE]  no  suitable  method  found  for  getRawType(Class<CAP#1>)	3	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	compilable	  [FE]  AssertionError  	3	2	replace
11	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(ownerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	compilable	  [FE]  AssertionError  	3	2	replace
12	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>)  [FE]    AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);  [BUGGY]  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  toClass);	typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,    getRawType(parameterizedOwnerType),  subtypeVarAssigns);  	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(ParameterizedType,Class<CAP#1>,Class<CAP#2>)	3	None	replace
13	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeArguments();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeArguments();		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	add
14	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getActualTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getActualTypeArguments();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeVarAssigns  =  parameterizedOwnerType.getActualTypeArguments();		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	add
15	[BUG]  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getActualTypeParameters();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeParams  =  parameterizedType.getActualTypeParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeParams  =  parameterizedType.getActualTypeParameters();		non-compiled	[CE]  cannot  find  symbol	4	None	add
16	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeVarAssigns  =  parameterizedType.getActualTypeParameters();		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	add
17	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedType.getOwnerTypeParameters();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Type[]  subtypeVarAssigns  =  parameterizedType.getOwnerTypeParameters();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Type[]  subtypeVarAssigns  =  parameterizedType.getOwnerTypeParameters();		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	add
18	[BUG]  [BUGGY]    Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeArguments();  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]  if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  [BUGGY]    Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeArguments();  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,      getRawType(parameterizedOwnerType),  subtypeVarAssigns);  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	    Class  <?>[]  subtypeVarAssigns  =  parameterizedType.getActualTypeArguments();		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	add
