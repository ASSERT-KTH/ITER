bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [CE]  <identifier>  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
4	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
5	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	9	None	replace
6	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
7	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
8	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(type);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(type);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(type);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
9	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(bound);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(bound);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.isAssignableFrom(bound);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
10	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.getLowerBounds();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  bound.getLowerBounds();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.getLowerBounds();	      Type[]    lowerBounds    =    toWildcardType.getLowerBounds();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
11	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getUpperBounds();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getUpperBounds();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getUpperBounds();	      Type[]    lowerBounds    =    toWildcardType.getLowerBounds();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
12	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound);	      Type[]    lowerBounds    =    toWildcardType.getLowerBounds();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
13	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
14	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
15	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	23	2	add
17	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	23	2	add
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	23	2	add
19	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	23	2	add
20	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
21	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getType()));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getType()));  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " ".equals(bound.getType()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
22	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound));  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " ".equals(bound));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	4	None	replace
23	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  typeVarAssigns.getValue();  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  bound,  typeVarAssigns.getValue();  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  typeVarAssigns.getValue();	  return(bound    ==    null)?    null    :    bound.getValue();    	non-compiled	[CE]  ';'  expected	27	None	replace
24	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.getValue();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  toBound.getValue();  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.getValue();	  return(bound    ==    null)?    null    :    bound.getValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
25	[BUG]  [BUGGY]  return(bound!=  null)?  null  :  bound.getValue();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound!=  null)?  null  :  bound.getValue();  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound!=  null)?  null  :  bound.getValue();	  return(bound    ==    null)?    null    :    bound.getValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
26	[BUG]  [BUGGY]  for(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
27	[BUG]  [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	10	None	replace
28	[BUG]  [BUGGY]  for(Type  toBound  :  bound.typeVarAssigns)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  toBound  :  bound.typeVarAssigns)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bound.typeVarAssigns)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
29	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	3	None	add
31	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	3	None	add
32	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
33	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
34	[BUG]  [BUGGY]      return  toWildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      return  toWildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        return  toWildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
35	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	        if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	  	compilable	  [FE]  AssertionError  	7	2	add
37	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	  	compilable	  [FE]  AssertionError  	7	2	add
38	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  missing  return  value  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	  	non-compiled	[CE]  missing  return  value	7	None	add
39	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
40	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
41	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
42	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toLowerBounds))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
43	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
44	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
45	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
46	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns);	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
47	[BUG]  [BUGGY]  tryOffsets(toBound,  upperBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  upperBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  upperBounds,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
48	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
49	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
50	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toBound.getName());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toBound.getName());  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toBound.getName());	  return    true;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
51	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toWildcardType.getName());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toWildcardType.getName());  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toWildcardType.getName());	  return    true;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
52	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
53	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
54	[BUG]  [BUGGY]  for(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	13	None	replace
55	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
57	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.values();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.values();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.values();	      Type[]    lowerBounds    =    toUpperBounds.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
58	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.values();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  bound.values();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.values();	      Type[]    lowerBounds    =    toUpperBounds.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
59	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.values();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.values();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.values();	      Type[]    lowerBounds    =    toUpperBounds.values();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
60	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.keySet().iterator().next();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.keySet().iterator().next();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.keySet().iterator().next();	      Type[]    lowerBounds    =    toUpperBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	25	None	replace
61	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.keySet().iterator().next();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  bound.keySet().iterator().next();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.keySet().iterator().next();	      Type[]    lowerBounds    =    toUpperBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	25	None	replace
62	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));  [CE]  cannot  find  symbol  degrees  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  degrees.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	24	None	replace
63	[BUG]  [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
64	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  [Delete]  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
65	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds));  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(toBound,  toLowerBounds));	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	24	None	replace
66	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
67	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[size()  -  1]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[size()  -  1]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
68	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
69	[BUG]  [BUGGY]  return  true;  return  true;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  return  true;  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    return  true;	  	non-compiled	[CE]  unreachable  statement	1	None	add
70	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
71	[BUG]  [BUGGY]  return  true;  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
72	[BUG]  [BUGGY]  return  true;  if(!isAssignable(toBound,  toLowerBounds))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(toBound,  toLowerBounds))  {  return  true;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(toBound,  toLowerBounds))  {  return  true;  }	  	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	1	None	add
73	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
74	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
75	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	16	2	add
77	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	16	2	add
78	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
79	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
80	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[lowerBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
81	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[lowerBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
82	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[upperBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[upperBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[upperBounds.size()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[lowerBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
83	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
84	[BUG]  [BUGGY]  safeGet(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  safeGet(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
85	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
86	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	5	None	replace
87	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
88	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	16	None	add
89	[BUG]  [BUGGY]  for(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
90	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	3	None	add
91	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	4	2	replace
92	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	4	2	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  AssertionError  	23	2	add
94	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  AssertionError  	23	2	add
95	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	13	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	        if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionError  	7	2	add
97	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	  	compilable	  [FE]  AssertionError  	7	2	add
98	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.getLowerBounds();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toWildcardType.getLowerBounds();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toWildcardType.getLowerBounds();	      Type[]    lowerBounds    =    toWildcardType.getLowerBounds();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
99	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[size()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[size()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
100	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  not  a  statement	15	None	replace
101	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
102	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[upperBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[upperBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[upperBounds.size()  ]);	      Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[lowerBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
103	[BUG]  [BUGGY]  return  true;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
104	[BUG]  [BUGGY]  return  true;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }	  	non-compiled	[CE]  ';'  expected	1	None	add
105	[BUG]  [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (typeVarAssigns  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
106	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
107	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
108	[BUG]  [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (typeVarAssigns  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
109	[BUG]  [BUGGY]  if(!isAssignable(toLowerBounds,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toLowerBounds,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toLowerBounds,  toBound,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
110	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().next();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().next();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().next();	      Type[]    lowerBounds    =    toUpperBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	25	None	replace
111	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	6	None	replace
112	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.toString();  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  bound.toString();  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.toString();	  return(bound    ==    null)?    null    :    bound.getValue();    	non-compiled	[CE]  incompatible  types	27	None	replace
113	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	11	None	replace
114	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
115	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
116	[BUG]  [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  ==  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	17	None	replace
117	[BUG]  [BUGGY]  for(Type  toBound  :  bounds)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  toBound  :  bounds)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bounds)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
118	[BUG]  [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
119	[BUG]  [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
120	[BUG]  [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
121	[BUG]  [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
122	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.cloneTree();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound  ==  null)?  null  :  bound.cloneTree();  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.cloneTree();	  return(bound    ==    null)?    null    :    bound.getValue();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
123	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }	  	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	add
124	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }	  	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	add
125	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return    true;    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
126	[BUG]  [BUGGY]  return  new  IllegalArgumentException( " ");  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  incompatible  types	4	None	replace
127	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ", ");  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ", ");  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ", ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
128	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getLowerBounds  [CE]  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getLowerBounds  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getLowerBounds	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  	15	None	replace
129	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
130	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
131	[BUG]  [BUGGY]  allowSupported(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  allowSupported(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSupported(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
132	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  allowSuppressWarnings( "unchecked "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSuppressWarnings( "unchecked "))  {  throw  new  IllegalArgumentException( " ");  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
133	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked ",  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  allowSuppressWarnings( "unchecked ",  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSuppressWarnings( "unchecked ",  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
134	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.keySet();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.keySet();  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.keySet();	      Type[]    lowerBounds    =    toUpperBounds.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	19	None	replace
135	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName());  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound.getName());	  return    true;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  AssertionError( "Unknown  type: "  +  bound);	  return    true;    	compilable	  [FE]  AssertionError  	2	2	replace
137	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound);	  return    true;    	compilable	  [FE]  AssertionError  	2	2	replace
138	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
139	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.BLOCK);  [BUGGY]    }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
140	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	12	None	replace
141	[BUG]  [BUGGY]  for(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  for(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	      for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
142	[BUG]  [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]      if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigneds))  {  return  false;  }  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigneds))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	16	None	add
143	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(typeVarAssigns  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(typeVarAssigns  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
144	[BUG]  [BUGGY]  if(!isAssignable(toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  typeVarAssigns))  {	      if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
