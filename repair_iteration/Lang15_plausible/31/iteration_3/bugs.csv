bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getName()));  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getName()));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " ".equals(bound.getName()));	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
2	[BUG]  [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (typeVarAssigns  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  }	  parent!=    (typeVarAssigns    ==    null)&&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
3	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[size()  *  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[size()  *  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[size()  *  1]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[size()    -    1]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	67	None	replace
4	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.keySet().iterator().next();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBound.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toBound.keySet().iterator().next();	  Type[]    lowerBounds    =    bound.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	61	None	replace
5	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound,  bound.keySet().iterator().next();  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBound,  bound.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toBound,  bound.keySet().iterator().next();	  Type[]    lowerBounds    =    bound.keySet().iterator().next();    	non-compiled	[CE]  ';'  expected	61	None	replace
6	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.keySet().iterator().next();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  bound.keySet().iterator().next();	  Type[]    lowerBounds    =    bound.keySet().iterator().next();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	61	None	replace
7	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
8	[BUG]  [BUGGY]  safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  cause  =  new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	31	2	replace
10	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ". ");  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	31	2	replace
11	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound));	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	31	None	replace
12	[BUG]  [BUGGY]  Context.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));  [CE]  cannot  find  symbol  Context  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Context.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  cannot  find  symbol  Context	79	None	replace
13	[BUG]  [BUGGY]  Context.checkState(!toWildcardType.isVarAssignable()  ||!toWildcardType.isVarAssignable());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!toWildcardType.isVarAssignable()  ||!toWildcardType.isVarAssignable());  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Context.checkState(!toWildcardType.isVarAssignable()  ||!toWildcardType.isVarAssignable());	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
14	[BUG]  [BUGGY]  Context.checkState(!toWildcardType.isVarAssignable(),  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!toWildcardType.isVarAssignable(),  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Context.checkState(!toWildcardType.isVarAssignable(),  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
15	[BUG]  [BUGGY]  Context.checkState(!toWildcardType.isVarAssign()  ||!toWildcardType.isVarAssign());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!toWildcardType.isVarAssign()  ||!toWildcardType.isVarAssign());  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Context.checkState(!toWildcardType.isVarAssign()  ||!toWildcardType.isVarAssign());	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	}  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
17	[BUG]  [BUGGY]  }  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	}  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	}  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
19	[BUG]  [BUGGY]  }  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	}  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	}  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
21	[BUG]  [BUGGY]  }  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	}  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	}  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
23	[BUG]  [BUGGY]  }  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	}  else  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	88	2	replace
24	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	111	None	replace
25	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
26	[BUG]  [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
27	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
28	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  continue  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
29	[BUG]  [BUGGY]  for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
30	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
31	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  + "'  for  wildcard  type: "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  + "'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  + "'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toBound.getName());    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
32	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toBound.getName());  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toBound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toBound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toBound.getName());    	non-compiled	[CE]  <identifier>  expected	50	None	replace
33	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  + ",'  for  wildcard  type: "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  + ",'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  + ",'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toBound.getName());    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
34	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + "'  for  wildcard  type: "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + "'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + "'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toWildcardType.getName());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
35	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toWildcardType.getName());  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toWildcardType.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  bound.getName()  + "'  for  wildcard  type: "  +  toWildcardType.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toWildcardType.getName());    	non-compiled	[CE]  <identifier>  expected	51	None	replace
36	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + "'  for  wildcard  type: "  +  bound.getName());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + "'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + "'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toWildcardType.getName());    	non-compiled	[CE]  <identifier>  expected	51	None	replace
37	[BUG]  [BUGGY]  degrees.add(typeVarAssigns);  [CE]  cannot  find  symbol  degrees  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.add(typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.add(typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	19	None	replace
38	[BUG]  [BUGGY]  degrees.checkState(typeVarAssigns.contains(toBound));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(typeVarAssigns.contains(toBound));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(typeVarAssigns.contains(toBound));	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
39	[BUG]  [BUGGY]  degrees.put(bound,  typeVarAssigns);  [CE]  cannot  find  symbol  degrees  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.put(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.put(bound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	19	None	replace
40	[BUG]  [BUGGY]  degrees.checkState(typeVarAssigns.contains(toBound),  typeVarAssigns.contains(toBound));  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(typeVarAssigns.contains(toBound),  typeVarAssigns.contains(toBound));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(typeVarAssigns.contains(toBound),  typeVarAssigns.contains(toBound));	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
41	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(bound,  toBound,  toLowerBounds));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(bound,  toBound,  toLowerBounds));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(bound,  toBound,  toLowerBounds));	  degrees.checkState(!isAssignable(toBound,    toLowerBounds));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	65	None	replace
42	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));	  degrees.checkState(!isAssignable(toBound,    toLowerBounds));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	65	None	replace
43	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toBound,  typeVarAssigns));  [CE]  cannot  find  symbol  degrees  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  toBound,  typeVarAssigns));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(toBound,  toBound,  typeVarAssigns));	  degrees.checkState(!isAssignable(bound,    toBound,    typeVarAssigns));    	non-compiled	[CE]  cannot  find  symbol  degrees	62	None	replace
44	[BUG]  [BUGGY]  checkState(!isAssignable(toBound,  toBound,  typeVarAssigns));  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  checkState(!isAssignable(toBound,  toBound,  typeVarAssigns));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	checkState(!isAssignable(toBound,  toBound,  typeVarAssigns));	  degrees.checkState(!isAssignable(bound,    toBound,    typeVarAssigns));    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
45	[BUG]  [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  return;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
46	[BUG]  [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
47	[BUG]  [BUGGY]  allowUnknownType(toBound,  toLowerBounds))  {  return;  }  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowUnknownType(toBound,  toLowerBounds))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowUnknownType(toBound,  toLowerBounds))  {  return;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  ';'  expected	38	None	replace
48	[BUG]  [BUGGY]  if(toBound  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(toBound  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(toBound  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(typeVarAssigns    ==    null    ||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
49	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null  ||!isAssignable(toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns  ==  null  ||!isAssignable(toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(typeVarAssigns  ==  null  ||!isAssignable(toBound,  typeVarAssigns))  {	  if(typeVarAssigns    ==    null    ||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
50	[BUG]  [BUGGY]  if(toLowerBounds  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(toLowerBounds  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(toLowerBounds  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(typeVarAssigns    ==    null    ||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
51	[BUG]  [BUGGY]  throw  new  AssertionError(   "Unknown  type:   "  +  bound);  throw  new  AssertionError(   "Unknown  type:   "  +  bound);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError(   "Unknown  type:   "  +  bound);  throw  new  AssertionError(   "Unknown  type:   "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw    new    AssertionError(   "Unknown    type:   "    +    bound);    throw  new  AssertionError(   "Unknown  type:   "  +  bound);	  	non-compiled	[CE]  unreachable  statement	136	None	add
52	[BUG]  [BUGGY]  throw  new  AssertionError(   "Unknown  type:   "  +  bound);  Throw  new  AssertionError(   "Unknown  type:   "  +  bound);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError(   "Unknown  type:   "  +  bound);  Throw  new  AssertionError(   "Unknown  type:   "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw    new    AssertionError(   "Unknown    type:   "    +    bound);    Throw  new  AssertionError(   "Unknown  type:   "  +  bound);	  	non-compiled	[CE]  not  a  statement	136	None	add
53	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(type,  toBound);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(type,  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(type,  toBound);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
54	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(type);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(type);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.isAssignableFrom(type);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
55	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  type);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  type);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  type);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
56	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	124	None	replace
57	[BUG]  [BUGGY]  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	124	None	replace
58	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
59	[BUG]  [BUGGY]  Class  <?>[]  lowerBounds  =  toWildcardType.getRawClass();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>[]  lowerBounds  =  toWildcardType.getRawClass();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>[]  lowerBounds  =  toWildcardType.getRawClass();	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	124	None	replace
60	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length.size()  ]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[upperBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	102	None	replace
61	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
62	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  <identifier>  expected	101	None	replace
63	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	18	None	add
64	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
65	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	18	None	add
66	[BUG]  [BUGGY]  for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
67	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	86	None	replace
68	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked ",  bound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSuppressWarnings( "unchecked ",  bound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSuppressWarnings( "unchecked ",  bound))  {  throw  new  IllegalArgumentException( " ");  }	  allowSuppressWarnings(   "unchecked   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	132	None	replace
69	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();	  Type[]    lowerBounds    =    toLowerBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	110	None	replace
70	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.values().iterator().next();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.values().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.values().iterator().next();	  Type[]    lowerBounds    =    toLowerBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	110	None	replace
71	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
72	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  ')'  expected	119	None	replace
73	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  ')'  expected	119	None	replace
74	[BUG]  [BUGGY]  allowNonLoaded(toBound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNonLoaded(toBound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(toBound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  allowNonLoaded(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
75	[BUG]  [BUGGY]  allowNonLoaded(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNonLoaded(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNonLoaded(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
76	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[upperBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	82	None	replace
77	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[length.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[length.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[length.size()  ]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[upperBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	82	None	replace
78	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
79	[BUG]  [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
80	[BUG]  [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
81	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getType()));  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getType()));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getType()));	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
82	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.getType());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.getType());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " "  +  bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
83	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound.getType());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound.getType());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
84	[BUG]  [BUGGY]  safely(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(toBound,  toLowerBounds,  typeVarAssigns))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	107	None	replace
85	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  typeVarAssigns))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	107	None	replace
86	[BUG]  [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  lowerBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	107	None	replace
87	[BUG]  [BUGGY]  safely(bound,  toBound,  upperBounds))  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  upperBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  upperBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	107	None	replace
88	[BUG]  [BUGGY]  tryOffsets(toWildcardType,  toLowerBounds,  upperBounds);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toWildcardType,  toLowerBounds,  upperBounds);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toWildcardType,  toLowerBounds,  upperBounds);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
89	[BUG]  [BUGGY]  tryOffsets(toBound,  upperBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  upperBounds,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
90	[BUG]  [BUGGY]  tryOffsets(toWildcardType,  toLowerBounds,  upperBounds));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toWildcardType,  toLowerBounds,  upperBounds));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toWildcardType,  toLowerBounds,  upperBounds));	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
91	[BUG]  [BUGGY]  allowSupported(toBound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSupported(toBound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSupported(toBound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  allowSupported(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
92	[BUG]  [BUGGY]  degrees.put(typeVarAssigns,  bound);  [CE]  cannot  find  symbol  degrees  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.put(typeVarAssigns,  bound);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.put(typeVarAssigns,  bound);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	17	None	replace
93	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  may  have  side  effects  and  can't  be  removed. ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  may  have  side  effects  and  can't  be  removed. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  may  have  side  effects  and  can't  be  removed. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
94	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "',  must  be  in  the  range  [ "  +  toBound.getName  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "',  must  be  in  the  range  [ "  +  toBound.getName  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "',  must  be  in  the  range  [ "  +  toBound.getName	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  <identifier>  expected	127	None	replace
95	[BUG]  [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	3	None	replace
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	  	compilable	  [FE]  AssertionError  	36	2	add
97	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	  	compilable	  [FE]  AssertionError  	36	2	add
98	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  continue;  }	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
99	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
100	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toLowerBounds))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	72	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    toLowerBounds))    {    return    true;    }    	compilable	  [FE]  AssertionError  	72	2	replace
102	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    toLowerBounds))    {    return    true;    }    	compilable	  [FE]  AssertionError  	72	2	replace
103	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  toLowerBounds))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  toLowerBounds))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	72	None	replace
104	[BUG]  [BUGGY]  result.add(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  result  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result.add(toBound,  toLowerBounds);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result.add(toBound,  toLowerBounds);	  return    true;    if(!isAssignable(toBound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	72	None	replace
105	[BUG]  [BUGGY]  triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	130	None	replace
106	[BUG]  [BUGGY]  triesCandidate(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  triesCandidate(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	triesCandidate(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	130	None	replace
107	[BUG]  [BUGGY]  return(bound!=  null)?  null  :  toBound.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound!=  null)?  null  :  toBound.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound!=  null)?  null  :  toBound.getValue();	  return(bound!=    null)?    null    :    bound.getValue();    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
108	[BUG]  [BUGGY]  keepFunctionDeclaration(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  keepFunctionDeclaration(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	keepFunctionDeclaration(bound,  toBound,  typeVarAssigns);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
109	[BUG]  [BUGGY]  keepFunctionDeclaration(bound,  toBound,  typeVarAssigns));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  keepFunctionDeclaration(bound,  toBound,  typeVarAssigns));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	keepFunctionDeclaration(bound,  toBound,  typeVarAssigns));	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  ';'  expected	73	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	96	2	add
111	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }	  	compilable	  [FE]  AssertionError  	96	2	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	96	2	add
113	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ".   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ".   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ".   ");  }	  	compilable	  [FE]  AssertionError  	96	2	add
114	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
115	[BUG]  [BUGGY]  safeGet(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }	  safeGet(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	84	None	replace
116	[BUG]  [BUGGY]  safeGet(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }	  safeGet(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	84	None	replace
117	[BUG]  [BUGGY]  safeGet(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safeGet(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	84	None	replace
118	[BUG]  [BUGGY]  for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  continue  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
119	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMissingException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMissingException( " ");	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	104	None	replace
120	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissing(typeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMissing(typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMissing(typeVarAssigns);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	104	None	replace
121	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( "Unexpected  typeVarAssigns: "  +  toBound);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.throwAssertionError( "Unexpected  typeVarAssigns: "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.throwAssertionError( "Unexpected  typeVarAssigns: "  +  toBound);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	104	None	replace
122	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
123	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBounds.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [CE]  cannot  find  symbol  toBounds  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBounds.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBounds.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol  toBounds	33	None	replace
124	[BUG]  [BUGGY]  Throwables.warning( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.warning( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.warning( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
125	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	93	None	add
126	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
127	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	93	None	add
128	[BUG]  [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  (typeVarAssigns  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (typeVarAssigns  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;	  parent!=    (typeVarAssigns    ==    null)&&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	108	None	replace
129	[BUG]  [BUGGY]  try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  '{'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  '{'  expected	37	None	replace
130	[BUG]  [BUGGY]  keepFunctionDeclaration(bound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  keepFunctionDeclaration(bound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	keepFunctionDeclaration(bound,  toLowerBounds,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
131	[BUG]  [BUGGY]  try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  [CE]  '{'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  '{'  expected	37	None	replace
132	[BUG]  [BUGGY]  Throwable  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	90	None	replace
133	[BUG]  [BUGGY]  Return  toWildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Return  toWildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Return  toWildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();	          return    toWildcardType.isAssignable()?    null    :    toWildcardType.isAssignable();    	non-compiled	[CE]  ';'  expected	34	None	replace
134	[BUG]  [BUGGY]  return  toWildcardType.isAssignable()?  null  :  toWildcardType.isStatic();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  toWildcardType.isAssignable()?  null  :  toWildcardType.isStatic();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  toWildcardType.isAssignable()?  null  :  toWildcardType.isStatic();	          return    toWildcardType.isAssignable()?    null    :    toWildcardType.isAssignable();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
135	[BUG]  [BUGGY]  return  toWildcardType.isAssignable()?  null  :  wildcardType.isAssignable();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  toWildcardType.isAssignable()?  null  :  wildcardType.isAssignable();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  toWildcardType.isAssignable()?  null  :  wildcardType.isAssignable();	          return    toWildcardType.isAssignable()?    null    :    toWildcardType.isAssignable();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
136	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.getLowerBounds();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBound.getLowerBounds();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toBound.getLowerBounds();	  Type[]    lowerBounds    =    bound.getLowerBounds();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
137	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.getUpperBounds();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  bound.getUpperBounds();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.getUpperBounds();	  Type[]    lowerBounds    =    bound.getLowerBounds();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
138	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.getLowerBounds();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.getLowerBounds();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  bound.getLowerBounds();	  Type[]    lowerBounds    =    bound.getLowerBounds();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
139	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
140	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
141	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
142	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
143	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    }    	non-compiled	[CE]  ')'  expected	118	None	replace
144	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    }    	non-compiled	[CE]  ')'  expected	118	None	replace
145	[BUG]  [BUGGY]  if(!isAssignable(toLowerBound,  toBound))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toLowerBound,  toBound))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toLowerBound,  toBound))  {	  if(!isAssignable(toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
146	[BUG]  [BUGGY]  if(!toLowerBounds.isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!toLowerBounds.isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!toLowerBounds.isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
147	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
148	[BUG]  [BUGGY]  safe(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
149	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  +  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  +  1]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
150	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  -  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.size()  -  1]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
151	[BUG]  [BUGGY]  return(toBound  ==  null)?  null  :  bound.getValue();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound  ==  null)?  null  :  bound.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound  ==  null)?  null  :  bound.getValue();	  return(bound    ==    null)?    null    :    toBound.getValue();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
152	[BUG]  [BUGGY]  return(toBound  ==  null)?  null  :  toBound.getValue();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound  ==  null)?  null  :  toBound.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound  ==  null)?  null  :  toBound.getValue();	  return(bound    ==    null)?    null    :    toBound.getValue();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
153	[BUG]  [BUGGY]  return  new  IllegalArgumentException( "Unknown  type: "  +  bound);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  new  IllegalArgumentException( "Unknown  type: "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException( "Unknown  type: "  +  bound);	  return    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  incompatible  types	126	None	replace
154	[BUG]  [BUGGY]  return  new  IllegalArgumentException( "Unknown  type: ");  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  new  IllegalArgumentException( "Unknown  type: ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException( "Unknown  type: ");	  return    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  incompatible  types	126	None	replace
155	[BUG]  [BUGGY]  return  new  IllegalArgumentException( " "  +  toBound);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException( " "  +  toBound);	  return    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  incompatible  types	126	None	replace
156	[BUG]  [BUGGY]  try  >>  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  >>  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  >>  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	116	None	replace
157	[BUG]  [BUGGY]  try  ==  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  ==  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  ==  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	116	None	replace
158	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.   ");	  Throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  not  a  statement	100	None	replace
159	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");	  Throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  not  a  statement	100	None	replace
160	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toLowerBounds))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	142	None	replace
161	[BUG]  [BUGGY]  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
162	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	142	None	replace
163	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	142	None	replace
164	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	123	None	replace
165	[BUG]  [BUGGY]  Class  <?>[]  lowerBounds  =  toWildcardType.getLowerBounds();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>[]  lowerBounds  =  toWildcardType.getLowerBounds();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>[]  lowerBounds  =  toWildcardType.getLowerBounds();	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	123	None	replace
166	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
167	[BUG]  [BUGGY]  Class  <?>[]  lowerBounds  =  toWildcardType.getRawClasses();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Class  <?>[]  lowerBounds  =  toWildcardType.getRawClasses();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Class  <?>[]  lowerBounds  =  toWildcardType.getRawClasses();	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	123	None	replace
168	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.isAssignableFrom(typeVarAssigns);	  return(bound    ==    null)?    null    :    toBound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
169	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(toBound);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.isAssignableFrom(toBound);	  return(bound    ==    null)?    null    :    toBound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
170	[BUG]  [BUGGY]  return(bound!=  null)?  null  :  bound.toString();  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound!=  null)?  null  :  bound.toString();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound!=  null)?  null  :  bound.toString();	  return(bound    ==    null)?    null    :    bound.toString();    	non-compiled	[CE]  incompatible  types	112	None	replace
171	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.toString();  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound.toString();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.toString();	  return(bound    ==    null)?    null    :    bound.toString();    	non-compiled	[CE]  incompatible  types	112	None	replace
172	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  toLowerBounds);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  toLowerBounds);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(toBound);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
174	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: ");  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toUpperBounds: "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  cause  =  new  IllegalArgumentException( "Failed  toUpperBounds: "  +  bound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
176	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toUpperBounds: "  +  bound);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toUpperBounds: "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( "Failed  toUpperBounds: "  +  bound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
177	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: "  +  bound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
178	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: "  +  bound);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( "Failed  toAssignable: "  +  bound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
179	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
180	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
181	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.getUpperBounds();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.getUpperBounds();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toWildcardType.getUpperBounds();	  Type[]    upperBounds    =    toWildcardType.getLowerBounds();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	98	None	replace
182	[BUG]  [BUGGY]  if(!isAssignable(lowerBound,  toLowerBounds))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lowerBound,  toLowerBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lowerBound,  toLowerBounds))  {	  if(!isAssignable(toBound,    toLowerBounds))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
183	[BUG]  [BUGGY]  if(!isAssignable(lowerBounds,  toLowerBounds))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lowerBounds,  toLowerBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lowerBounds,  toLowerBounds))  {	  if(!isAssignable(toBound,    toLowerBounds))    {    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
184	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  toLowerBounds,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
185	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	78	None	replace
186	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.length()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.length()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bound.length()  ]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
187	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  -  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  -  1]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
188	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  +  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[length()  +  1]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	76	2	add
190	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	76	2	add
191	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
192	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	76	2	add
193	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	76	2	add
194	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false	  	non-compiled	[CE]  ';'  expected	76	None	add
195	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
196	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result  |=!isAssignable(bound,  toBound,  typeVarAssigns);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	70	None	replace
197	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  result;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  result;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result  |=!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  result;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
198	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
199	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.BLOCK);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
200	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
201	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
202	[BUG]  [BUGGY]  for(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bound.typeVarAssigns)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
203	[BUG]  [BUGGY]  for(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bound.typeVarAssigns)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
204	[BUG]  [BUGGY]  for(Type  toBound  :  bound.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  bound.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bound.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bound.typeVarAssigns)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
205	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bound.typeVarAssigns)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	28	None	replace
206	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  typeVarAssigns))  {	  tryOffsets(toBound,    upperBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
207	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {	  tryOffsets(toBound,    upperBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
208	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  upperBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  upperBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  upperBounds,  typeVarAssigns))  {	  tryOffsets(toBound,    upperBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
209	[BUG]  [BUGGY]  tryOffsets(toBound,  bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  bound,  typeVarAssigns))  {	  tryOffsets(toBound,    upperBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
210	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
211	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
212	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
213	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");	  Throwables.throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
214	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");	  Throwables.throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
215	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ");	  Throwables.throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
216	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.keySet();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.keySet();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.keySet();	  Type[]    upperBounds    =    toUpperBounds.values();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	59	None	replace
217	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	30	None	replace
218	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
219	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
220	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
221	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
222	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
223	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
224	[BUG]  [BUGGY]  if(!isAssignable(toLowerBound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toLowerBound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toLowerBound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toLowerBounds,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
225	[BUG]  [BUGGY]  if(!isAssignable(lowerBounds,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lowerBounds,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lowerBounds,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toLowerBounds,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
226	[BUG]  [BUGGY]  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toLowerBounds,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
227	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	140	None	replace
228	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(toWildcardType,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	140	None	replace
229	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
230	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
231	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  ')'  expected	120	None	replace
232	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBound.values();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBound.values();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toBound.values();	  Type[]    lowerBounds    =    bound.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
233	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.getValues();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  bound.getValues();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.getValues();	  Type[]    lowerBounds    =    bound.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
234	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.values();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.values();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  bound.values();	  Type[]    lowerBounds    =    bound.values();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
235	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.cloneTree();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound.cloneTree();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.cloneTree();	  return(bound    ==    null)?    null    :    bound.cloneTree();    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
236	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  typeVarAssigns.cloneTree();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound,  typeVarAssigns.cloneTree();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  typeVarAssigns.cloneTree();	  return(bound    ==    null)?    null    :    bound.cloneTree();    	non-compiled	[CE]  ';'  expected	122	None	replace
237	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound.cloneTree();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound.cloneTree();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  toBound.cloneTree();	  return(bound    ==    null)?    null    :    bound.cloneTree();    	non-compiled	[CE]  ';'  expected	122	None	replace
238	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  toBound);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  toBound);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  toBound);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
239	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  toUpperBounds);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  toUpperBounds);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  toUpperBounds);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
240	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  wildcardType);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  wildcardType);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  wildcardType);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
241	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  upperBounds);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  upperBounds);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound,  upperBounds);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
242	[BUG]  [BUGGY]  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    for(Type[]    lowerBounds    =    toUpperBounds;    lowerBounds!=    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
243	[BUG]  [BUGGY]  For(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    for(Type[]    lowerBounds    =    toUpperBounds;    lowerBounds!=    null;    }    	non-compiled	[CE]  '.class'  expected	35	None	replace
244	[BUG]  [BUGGY]  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds  ==  null;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds  ==  null;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds  ==  null;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    for(Type[]    lowerBounds    =    toUpperBounds;    lowerBounds!=    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
245	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	16	None	add
246	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
247	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
248	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	16	None	add
249	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
250	[BUG]  [BUGGY]  ensureLowerBounds(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  ensureLowerBounds(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	ensureLowerBounds(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
251	[BUG]  [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    toBound    :    bound)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
252	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    toBound    :    bound)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
253	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    toBound    :    bound)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
254	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
255	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getLowerBounds  [CE]  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getLowerBounds  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  bound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getLowerBounds	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getLowerBounds    	non-compiled	[CE]  	128	None	replace
256	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getL  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getL  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getL	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getLowerBounds    	non-compiled	[CE]  <identifier>  expected	128	None	replace
257	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(bound));  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(bound));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(bound));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
258	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalStateException( " ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
259	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ". ");  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( ". ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
260	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.size()  + "] ");  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
261	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  <identifier>  expected	32	None	replace
262	[BUG]  [BUGGY]  Throwables.warning( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.warning( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.warning( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
263	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound.getValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  toBound.getValue();	  return(bound    ==    null)?    null    :    bound,    typeVarAssigns.getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
264	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound,  typeVarAssigns.getValue();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound,  typeVarAssigns.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound,  typeVarAssigns.getValue();	  return(bound    ==    null)?    null    :    bound,    typeVarAssigns.getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
265	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  toWildcardType.getValue();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound,  toWildcardType.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  toWildcardType.getValue();	  return(bound    ==    null)?    null    :    bound,    typeVarAssigns.getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
266	[BUG]  [BUGGY]  Pentru(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Pentru(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Pentru(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
267	[BUG]  [BUGGY]  if(!isAssignable(toWildcardType,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toWildcardType,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toWildcardType,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
268	[BUG]  [BUGGY]  if(!isAssignable(toLowerBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toLowerBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toLowerBound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
269	[BUG]  [BUGGY]  if(!isAssignable(toUpperBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toUpperBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toUpperBound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
270	[BUG]  [BUGGY]  if(!isAssignable(lowerBounds,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lowerBounds,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lowerBounds,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
271	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
272	[BUG]  [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    break;    }    	non-compiled	[CE]  ')'  expected	121	None	replace
273	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    break;    }    	non-compiled	[CE]  ')'  expected	121	None	replace
274	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound.getName());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound.getName());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
275	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName(),  toBound);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName(),  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound.getName(),  toBound);	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
276	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
277	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns))  {	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	48	None	replace
278	[BUG]  [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	48	None	replace
279	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet();	  Type[]    lowerBounds    =    toUpperBounds.keySet();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	134	None	replace
280	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( "Unexpected  typeVarAssigns: "  +  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.throwAssertionError( "Unexpected  typeVarAssigns: "  +  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.throwAssertionError( "Unexpected  typeVarAssigns: "  +  toBound,  typeVarAssigns);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	103	None	replace
281	[BUG]  [BUGGY]  result.add(typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result.add(typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result.add(typeVarAssigns);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	103	None	replace
282	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  &&!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	  parent    ==    null    &&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
283	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  typeVarAssigns);	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
284	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns);	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
285	[BUG]  [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(toBound,  toWildcardType,  typeVarAssigns);	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
286	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	85	None	replace
287	[BUG]  [BUGGY]  safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	85	None	replace
288	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  +  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  +  1]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
289	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  -  1]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  -  1]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
290	[BUG]  [BUGGY]  for(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }	  for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
291	[BUG]  [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bound)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }	  for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
292	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }	  for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
293	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }	  for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
294	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    toBound    :    bound)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	89	None	replace
295	[BUG]  [BUGGY]  for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bound)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
296	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  AssertionError( "Unknown  type: "  +  toBound);	  throw    new    AssertionError(   "Unknown    type:   "    +    bound);    	compilable	  [FE]  AssertionError  	137	2	replace
297	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  toBound);	  throw    new    AssertionError(   "Unknown    type:   "    +    bound);    	compilable	  [FE]  AssertionError  	137	2	replace
298	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound);  [CE]  no  suitable  constructor  found  for  AssertionError(String,Type)  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound);	  throw    new    AssertionError(   "Unknown    type:   "    +    bound);    	non-compiled	[CE]  no  suitable  constructor  found  for  AssertionError(String,Type)	137	None	replace
299	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound,  bound);  [CE]  no  suitable  constructor  found  for  AssertionError(String,Type)  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound,  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  toBound,  bound);	  throw    new    AssertionError(   "Unknown    type:   "    +    bound);    	non-compiled	[CE]  no  suitable  constructor  found  for  AssertionError(String,Type)	137	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	22	2	replace
301	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	22	2	replace
302	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	22	2	replace
303	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	22	2	replace
304	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound,  toBound));  [CE]  no  suitable  method  found  for  equals(Type,Type)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound,  toBound));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " ".equals(bound,  toBound));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	non-compiled	[CE]  no  suitable  method  found  for  equals(Type,Type)	22	None	replace
305	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns,  toBound);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns,  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns,  toBound);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
306	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  typeVarAssigns);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
307	[BUG]  [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	97	None	replace
308	[BUG]  [BUGGY]  allowNegated(toBound,  toLowerBounds))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNegated(toBound,  toLowerBounds))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNegated(toBound,  toLowerBounds))  {  throw  new  IllegalStateException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	97	None	replace
309	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
310	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
311	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked ",  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSuppressWarnings( "unchecked ",  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSuppressWarnings( "unchecked ",  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  allowSuppressWarnings(   "unchecked   ",    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	133	None	replace
312	[BUG]  [BUGGY]  result  |=  toBound.isAssignableFrom(bound);  [CE]  cannot  find  symbol  result  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result  |=  toBound.isAssignableFrom(bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result  |=  toBound.isAssignableFrom(bound);	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	71	None	replace
313	[BUG]  [BUGGY]  result.put(bound,  toBound);  [CE]  cannot  find  symbol  result  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result.put(bound,  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result.put(bound,  toBound);	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	71	None	replace
314	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toLowerBounds.values();	  Type[]    lowerBounds    =    toLowerBounds.values();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	57	None	replace
315	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  ||!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	  parent    ==    null    ||!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	115	None	replace
316	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	add
317	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ".   ");  [CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ".   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( ".   ");	  	non-compiled	[CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	add
318	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ",   ");  [CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ",   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( ",   ");	  	non-compiled	[CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	add
319	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException(. "   ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException(. "   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException(. "   ");	  	non-compiled	[CE]  illegal  start  of  expression	91	None	add
320	[BUG]  [BUGGY]  safe(bound,  toBound,  upperBounds))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  upperBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  upperBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	107	None	replace
321	[BUG]  [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  lowerBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	107	None	replace
322	[BUG]  [BUGGY]  safe(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  upperBounds))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
323	[BUG]  [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  lowerBounds))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
324	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  AssertionError  	130	2	replace
325	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  AssertionError  	130	2	replace
326	[BUG]  [BUGGY]  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
327	[BUG]  [BUGGY]  if(!isAssignable(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Map<TypeVariable<?>,Type>)	130	None	replace
328	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
329	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds: ");  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds: ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds: ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
330	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
331	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	30	2	replace
332	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	30	2	replace
333	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	124	None	replace
334	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  bound  =  toWildcardType.getRawClass();  return  bound.isAssignableFrom(wildcardType);  }  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  bound  =  toWildcardType.getRawClass();  return  bound.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  bound  =  toWildcardType.getRawClass();  return  bound.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	124	None	replace
335	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	124	None	replace
336	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  wildcardType.isAssignableFrom(wildcardType	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  ')'  expected	124	None	replace
337	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.BLOCK);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	111	None	replace
338	[BUG]  [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
339	[BUG]  [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  '{'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  ==  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	116	None	replace
340	[BUG]  [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	116	None	replace
341	[BUG]  [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	try  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	116	None	replace
342	[BUG]  [BUGGY]  if(!isAssignable(upperBound,  toLowerBounds))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(upperBound,  toLowerBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(upperBound,  toLowerBounds))  {	  if(!isAssignable(toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
343	[BUG]  [BUGGY]  if(!isAssignable(lowerBound,  toBound))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lowerBound,  toBound))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lowerBound,  toBound))  {	  if(!isAssignable(toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
344	[BUG]  [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	55	None	replace
345	[BUG]  [BUGGY]  allowSuppressWarnings( "unchecked ",  bound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSuppressWarnings( "unchecked ",  bound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSuppressWarnings( "unchecked ",  bound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowSuppressWarnings(   "unchecked   ",    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	133	None	replace
346	[BUG]  [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  break;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    break;    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.toString());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  AssertionError( "Unknown  type: "  +  bound.toString());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	compilable	  [FE]  AssertionError  	135	2	replace
348	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.toString());  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.toString());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound.toString());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	compilable	  [FE]  AssertionError  	135	2	replace
349	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	140	None	replace
350	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	140	None	replace
351	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.getLowerBounds(bound);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.getLowerBounds(bound);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toWildcardType.getLowerBounds(bound);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
352	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound  -  1);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound  -  1);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toWildcardType.getLowerBounds(bound  -  1);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
353	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	142	None	replace
354	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	142	None	replace
355	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	142	2	replace
356	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	142	2	replace
357	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	142	None	replace
358	[BUG]  [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	19	None	replace
359	[BUG]  [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	19	None	replace
360	[BUG]  [BUGGY]  safeTreeBuilder().registerAssignment(typeVarAssigns,  bound);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeTreeBuilder().registerAssignment(typeVarAssigns,  bound);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeTreeBuilder().registerAssignment(typeVarAssigns,  bound);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
361	[BUG]  [BUGGY]  safeGet(typeVarAssigns,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(typeVarAssigns,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(typeVarAssigns,  toBound))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	19	None	replace
362	[BUG]  [BUGGY]  for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
363	[BUG]  [BUGGY]  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
364	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
365	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  ToBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [CE]  cannot  find  symbol  ToBound  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  ToBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  ToBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  ToBound	96	None	add
366	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ",   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ",   ");  }	  	compilable	  [FE]  AssertionError  	96	2	add
367	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ",   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ",   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( ",   ");  }	  	compilable	  [FE]  AssertionError  	96	2	add
368	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  toBound);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  toBound);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
369	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  bound);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
370	[BUG]  [BUGGY]  allowSuppressWarnings(bound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSuppressWarnings(bound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSuppressWarnings(bound))  {  throw  new  IllegalArgumentException( " ");  }	  allowSuppressWarnings(   "unchecked   "))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	132	None	replace
371	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  binding.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  binding.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  binding.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
372	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound.toString();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound.toString();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  toBound.toString();	  return(bound    ==    null)?    null    :    bound.toString();    	non-compiled	[CE]  ';'  expected	112	None	replace
373	[BUG]  [BUGGY]  Type[]  lowerBounds  =  typeVarAssigns.values();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  typeVarAssigns.values();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  typeVarAssigns.values();	  Type[]    lowerBounds    =    bound.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
374	[BUG]  [BUGGY]  return(bound!=  null)?  null  :  bound,  typeVarAssigns.getValue();  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound!=  null)?  null  :  bound,  typeVarAssigns.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound!=  null)?  null  :  bound,  typeVarAssigns.getValue();	  return(bound!=    null)?    null    :    bound.getValue();    	non-compiled	[CE]  ';'  expected	25	None	replace
375	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
376	[BUG]  [BUGGY]  result  =  true;  if(!isAssignable(bound,  toBound,  toLowerBounds))  {  return  true;  }  [CE]  cannot  find  symbol  result  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  result  =  true;  if(!isAssignable(bound,  toBound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	result  =  true;  if(!isAssignable(bound,  toBound,  toLowerBounds))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	72	None	replace
377	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  upperBounds.size()  + "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  not  a  statement	32	None	replace
378	[BUG]  [BUGGY]  parent!=  (bound  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  (bound  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (bound  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	  parent!=    (typeVarAssigns    ==    null)&&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	108	None	replace
379	[BUG]  [BUGGY]  parent!=  (bound  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  (bound  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (bound  ==  null)&&!isAssignable(toBound,  typeVarAssigns))  {  return  false;	  parent!=    (typeVarAssigns    ==    null)&&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	108	None	replace
380	[BUG]  [BUGGY]  safeToJavaType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeToJavaType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeToJavaType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
381	[BUG]  [BUGGY]  parent!=  null;  for(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  for(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  for(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	103	None	replace
382	[BUG]  [BUGGY]  parent!=  null;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	103	None	replace
383	[BUG]  [BUGGY]  parent!=  null;  for(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  for(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  for(Type  bound  :  toWildcardType)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	103	None	replace
384	[BUG]  [BUGGY]  parent!=  null;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  for(Type  bound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	103	None	replace
385	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	86	None	replace
386	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.toArray(new  Type[bound.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  bound.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.toArray(new  Type[bound.size()  ]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	81	None	replace
387	[BUG]  [BUGGY]  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    for(Type[]    lowerBounds    =    toUpperBounds;    lowerBounds!=    null;    }    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
388	[BUG]  [BUGGY]  For(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type[]  lowerBounds  =  toUpperBounds;  lowerBounds!=  null;	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    for(Type[]    lowerBounds    =    toUpperBounds;    lowerBounds!=    null;    }    	non-compiled	[CE]  '.class'  expected	35	None	replace
389	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  upperBound,  typeVarAssigns.getValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  upperBound,  typeVarAssigns.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  upperBound,  typeVarAssigns.getValue();	  return(bound    ==    null)?    null    :    bound,    typeVarAssigns.getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
390	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardType.typeVarAssigns)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bound.typeVarAssigns)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
391	[BUG]  [BUGGY]  Type[]  upperBounds  =  typeVarAssigns.values();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  typeVarAssigns.values();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  typeVarAssigns.values();	  Type[]    upperBounds    =    toUpperBounds.values();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	59	None	replace
392	[BUG]  [BUGGY]  if(!isAssignable(upperBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(upperBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(upperBound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
393	[BUG]  [BUGGY]  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
394	[BUG]  [BUGGY]  if(!isAssignable(lowerBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lowerBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lowerBound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
395	[BUG]  [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
396	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.getUpperBounds();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.getUpperBounds();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  bound.getUpperBounds();	  Type[]    lowerBounds    =    toWildcardType.getUpperBounds();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
397	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
398	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
399	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
400	[BUG]  [BUGGY]  allowSupported(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSupported(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSupported(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowSupported(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
401	[BUG]  [BUGGY]  allowNonLoaded(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowNonLoaded(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowNonLoaded(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNonLoaded(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	63	None	replace
402	[BUG]  [BUGGY]  Type[]  lowerBounds  =  new  Type[bound.keySet().iterator().next();  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  new  Type[bound.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  new  Type[bound.keySet().iterator().next();	  Type[]    lowerBounds    =    bound.keySet().iterator().next();    	non-compiled	[CE]  ']'  expected	61	None	replace
403	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
404	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
405	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
406	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  lowBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  lowBounds  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  lowBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  lowBounds,  typeVarAssigns);	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	46	None	replace
407	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  upperBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  upperBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  upperBounds,  typeVarAssigns);	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
408	[BUG]  [BUGGY]  safeGet(bound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safeGet(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	84	None	replace
409	[BUG]  [BUGGY]  return  toWildcardType.isAssignable()?  null  :  type.isAssignable();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  toWildcardType.isAssignable()?  null  :  type.isAssignable();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  toWildcardType.isAssignable()?  null  :  type.isAssignable();	          return    toWildcardType.isAssignable()?    null    :    toWildcardType.isAssignable();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
410	[BUG]  [BUGGY]  return  toWildcardType.isAssignable()?  null  :  bound.isAssignable();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  toWildcardType.isAssignable()?  null  :  bound.isAssignable();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  toWildcardType.isAssignable()?  null  :  bound.isAssignable();	          return    toWildcardType.isAssignable()?    null    :    toWildcardType.isAssignable();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
411	[BUG]  [BUGGY]  return  wildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  wildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  wildcardType.isAssignable()?  null  :  toWildcardType.isAssignable();	          return    toWildcardType.isAssignable()?    null    :    toWildcardType.isAssignable();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
412	[BUG]  [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    }    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
413	[BUG]  [BUGGY]  for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toBound  :  toWildcardType)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    toBound    :    bounds)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
414	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  wildcardType  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	123	None	replace
415	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  bound  =  getWildcardType();  return  bound.isAssignableFrom(wildcardType);  }  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  bound  =  getWildcardType();  return  bound.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  bound  =  getWildcardType();  return  bound.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	123	None	replace
416	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  currType  =  getWildcardType();  return  currType.isAssignableFrom(wildcardType);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  currType  =  getWildcardType();  return  currType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  currType  =  getWildcardType();  return  currType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
417	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  boundType  =  getWildcardType();  return  boundType.isAssignableFrom(wildcardType);  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  boundType  =  getWildcardType();  return  boundType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  boundType  =  getWildcardType();  return  boundType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
418	[BUG]  [BUGGY]  forceForInstantiation(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  forceForInstantiation(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	forceForInstantiation(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
419	[BUG]  [BUGGY]  forceForInstantiation(bound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  forceForInstantiation(bound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	forceForInstantiation(bound,  toLowerBounds,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
420	[BUG]  [BUGGY]  forceForInstantiation(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  forceForInstantiation(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	forceForInstantiation(bound,  toLowerBounds,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
421	[BUG]  [BUGGY]  forceForSlot(typeVarAssigns,  toBound,  upperBounds))  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  forceForSlot(typeVarAssigns,  toBound,  upperBounds))  {  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	forceForSlot(typeVarAssigns,  toBound,  upperBounds))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
422	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    return    true;    	compilable	  [FE]  AssertionError  	69	2	replace
423	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    return    true;    	compilable	  [FE]  AssertionError  	69	2	replace
424	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	97	None	replace
425	[BUG]  [BUGGY]  safeGet(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	97	None	replace
426	[BUG]  [BUGGY]  safeGet(bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	97	None	replace
427	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  bound.toArray(new  Type[toUpperBounds.size()  ]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	80	None	replace
428	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	18	None	add
429	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  <identifier>  expected	18	None	add
430	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
431	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().first();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().first();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().first();	  Type[]    lowerBounds    =    toLowerBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	110	None	replace
432	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.getType());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.getType());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " "  +  toBound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
433	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getType());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getType());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
434	[BUG]  [BUGGY]  tryLowerBounds(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryLowerBounds(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryLowerBounds(bound,  toBound,  typeVarAssigns))  {	  tryOffsets(toBound,    upperBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
435	[BUG]  [BUGGY]  tryOffsets(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toLowerBounds,  typeVarAssigns))  {	  tryOffsets(toBound,    upperBounds,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
436	[BUG]  [BUGGY]  For(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    toBound    :    bound)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
437	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ",  toBound);  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ",  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'. ",  toBound);	  Throwables.throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
438	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");  [CE]  <identifier>  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");	  Throwables.throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
439	[BUG]  [BUGGY]  parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
440	[BUG]  [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
441	[BUG]  [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  bound)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
442	[BUG]  [BUGGY]  safeToJavaType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeToJavaType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeToJavaType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  	85	None	replace
443	[BUG]  [BUGGY]  safely(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toLowerBounds,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	77	None	replace
444	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
445	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  parent    ==    null    &&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	114	None	replace
446	[BUG]  [BUGGY]  Parent  <?>  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Parent  <?>  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Parent  <?>  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  parent    ==    null    &&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	114	None	replace
447	[BUG]  [BUGGY]  aughtExceptionHandler.handleMismatch(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMismatch(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMismatch(bound,  toBound,  typeVarAssigns);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	104	None	replace
448	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(typeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMissingName(typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMissingName(typeVarAssigns);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	104	None	replace
449	[BUG]  [BUGGY]  return(bound.getType()  >>  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  >>  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  >>  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
450	[BUG]  [BUGGY]  if(bound  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(bound  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(bound  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(typeVarAssigns    ==    null    ||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
451	[BUG]  [BUGGY]  parent!=  (bound  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  (bound  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  (bound  ==  null)&&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  parent!=    (typeVarAssigns    ==    null)&&!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	105	None	replace
452	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds,  upperBounds));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds,  upperBounds));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(toBound,  toLowerBounds,  upperBounds));	  degrees.checkState(!isAssignable(toBound,    toLowerBounds));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type[])	65	None	replace
453	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	17	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
455	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	92	2	replace
456	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  continue  false;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  continue  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
457	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  continue  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
458	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
459	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
460	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
461	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	88	None	replace
462	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  +   "'  for  wildcard  type: "  +  bound.getName());  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  +   "'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  type  ' "  +  toBound.getName()  +   "'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toBound.getName());    	non-compiled	[CE]  not  a  statement	50	None	replace
463	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[length()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[length()  ]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	99	None	replace
464	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.throwAssertionError( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.throwAssertionError( " ");	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	125	None	replace
465	[BUG]  [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.unreachable.type ",  bound);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.throwAssertionError( "msg.unreachable.type ",  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.throwAssertionError( "msg.unreachable.type ",  bound);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	125	None	replace
466	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
467	[BUG]  [BUGGY]  tryLowerBounds(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryLowerBounds(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryLowerBounds(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
468	[BUG]  [BUGGY]  tryOffsets(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
469	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  return  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
470	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  return  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
471	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns!=  null)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(typeVarAssigns!=  null)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
472	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns  ==  null)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(typeVarAssigns  ==  null)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
473	[BUG]  [BUGGY]  if(!lowerBounds.contains(toBound)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!lowerBounds.contains(toBound)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!lowerBounds.contains(toBound)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
474	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns!=  null)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(typeVarAssigns!=  null)  {  if(!isAssignable(toBound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
475	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  continue  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
476	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	Throwable  throwable  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	29	2	replace
477	[BUG]  [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  throwable  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	29	2	replace
478	[BUG]  [BUGGY]  Throwable  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	90	None	replace
479	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
480	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
481	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
482	[BUG]  [BUGGY]  parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
483	[BUG]  [BUGGY]  parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  ==  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
484	[BUG]  [BUGGY]  return  new  IllegalArgumentException( " "  +  bound);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  new  IllegalArgumentException( " "  +  bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException( " "  +  bound);	  return    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  incompatible  types	126	None	replace
485	[BUG]  [BUGGY]  return  new  IllegalArgumentException(bound);  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(Type)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  new  IllegalArgumentException(bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException(bound);	  return    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(Type)	126	None	replace
486	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
487	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds  of  type. ");  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds  of  type. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds  of  type. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
488	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound,  bound.equals(typeVarAssigns));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,boolean)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound,  bound.equals(typeVarAssigns));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " "  +  toBound,  bound.equals(typeVarAssigns));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,boolean)	22	None	replace
489	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.length()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.length()  ]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
490	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
491	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	78	None	replace
492	[BUG]  [BUGGY]  if(!isAssignable(toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Map<TypeVariable<?>,Type>)	78	None	replace
493	[BUG]  [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( ", ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  	94	None	replace
494	[BUG]  [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( ", ");  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( ", ");  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safeGet(typeVarAssigns,  toWildcardType))  {  throw  new  IllegalArgumentException( ", ");	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  	94	None	replace
495	[BUG]  [BUGGY]  typeVarAssigns.put(bound,  toBound);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  typeVarAssigns.put(bound,  toBound);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	typeVarAssigns.put(bound,  toBound);	  [Delete]    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	64	None	replace
496	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  upperBounds,  typeVarAssigns))  {  return  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
497	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
498	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  +  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  +  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "'.  Must  be  in  the  range  [ "  +  toBound.getName()  +	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
499	[BUG]  [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  continue  false;  }	  for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	54	None	replace
500	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  +   "'  for  wildcard  type: "  +  bound.getName());  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  +   "'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  +   "'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toWildcardType.getName());    	non-compiled	[CE]  not  a  statement	51	None	replace
501	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[bound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  bound.toArray(new  Type[bound.size()  ]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	66	None	replace
502	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
503	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  targetType  =  toWildcardType.getRawClass();  return  targetType.isAssignableFrom(wildcardType);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  targetType  =  toWildcardType.getRawClass();  return  targetType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  targetType  =  toWildcardType.getRawClass();  return  targetType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    toWildcardType.getRawClass();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
504	[BUG]  [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	95	None	replace
505	[BUG]  [BUGGY]  triesCandidate(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  triesCandidate(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	triesCandidate(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	130	None	replace
506	[BUG]  [BUGGY]  triesCandidate(type,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  triesCandidate(type,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	triesCandidate(type,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	130	None	replace
507	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
508	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
509	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
510	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(typeVarAssigns,  typeVarAssigns);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
511	[BUG]  [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	113	None	replace
512	[BUG]  [BUGGY]  For(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  for(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
513	[BUG]  [BUGGY]  Type[]  lowerBounds  =  typeVarAssigns.keySet().iterator().next();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  typeVarAssigns.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  typeVarAssigns.keySet().iterator().next();	  Type[]    lowerBounds    =    bound.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	61	None	replace
514	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	tryOffsets(bound,  toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	49	None	replace
515	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
516	[BUG]  [BUGGY]  >=  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  >=  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	>=  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
517	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null  ||!isAssignable(bound,  toBound,  upperBounds))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns  ==  null  ||!isAssignable(bound,  toBound,  upperBounds))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(typeVarAssigns  ==  null  ||!isAssignable(bound,  toBound,  upperBounds))  {	  if(typeVarAssigns    ==    null    ||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
518	[BUG]  [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
519	[BUG]  [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
520	[BUG]  [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  <!isAssignable(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
521	[BUG]  [BUGGY]  parent  <!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	parent  <!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
522	[BUG]  [BUGGY]  For(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toUpperBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    toBound    :    bound)    {    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	27	None	replace
523	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  IllegalArgumentException( ", ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	20	None	replace
524	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	18	2	add
525	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	18	2	add
526	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	18	2	add
527	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	18	2	add
528	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[outerBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[outerBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[outerBounds.size()  ]);	  Type[]    lowerBounds    =    toUpperBounds.toArray(new    Type[upperBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	102	None	replace
529	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.toString()  + ", ";  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.toString()  + ", ";  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.toString()  + ", ";	  return(bound    ==    null)?    null    :    bound.toString();    	non-compiled	[CE]  incompatible  types	112	None	replace
530	[BUG]  [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
531	[BUG]  [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ')'  expected	55	None	replace
532	[BUG]  [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ')'  expected	5	None	replace
533	[BUG]  [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	16	2	add
535	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	16	2	add
536	[BUG]  [BUGGY]  Type[]  lowerBounds  =  wildcardType.getLowerBounds(bound);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  wildcardType.getLowerBounds(bound);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  wildcardType.getLowerBounds(bound);	  Type[]    lowerBounds    =    toWildcardType.getLowerBounds(bound);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
537	[BUG]  [BUGGY]  ==  [Delete]  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  ==  [Delete]  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	==  [Delete]	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
538	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  >=  [Delete]  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	>=  [Delete]	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
539	[BUG]  [BUGGY]  >>  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  >>  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	>>	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
540	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getType()));  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getType()));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getType()));	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
541	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getName()));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getName()));  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getName()));	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
542	[BUG]  [BUGGY]  if(!isAssignable(lower,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(lower,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(lower,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toLowerBounds,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
543	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  upperBounds.size()  +   "] ");  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  upperBounds.size()  +   "] ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  upperBounds.size()  +   "] ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    upperBounds.size()    +   "]   ");    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
544	[BUG]  [BUGGY]  For(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  toLowerBounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  for(Type    toBound    :    bound)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	89	None	replace
545	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)||!isWildcardType(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
546	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)&&!isWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)&&!isWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)&&!isWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
547	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  curcardType  =  getWildcardType();  return  curcardType.isAssignableFrom(wildcardType);  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  curcardType  =  getWildcardType();  return  curcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>  curcardType  =  getWildcardType();  return  curcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
548	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>[]  lowerBounds  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>[]  lowerBounds  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  else  {  Class  <?>[]  lowerBounds  =  getWildcardType();  return  wildcardType.isAssignableFrom(wildcardType);  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    else    {    Class    <?>    wildcardType    =    getWildcardType();    return    wildcardType.isAssignableFrom(wildcardType);    }    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	123	None	replace
549	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(bound);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMissingClass(bound);	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	71	None	replace
550	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(bound);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMissingName(bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMissingName(bound);	  return    true;    if(!isAssignable(toBound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	71	None	replace
551	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  true;  }	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    true;    }    	non-compiled	[CE]  ';'  expected	104	None	replace
552	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  toBound);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  toBound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound.isAssignableFrom(toBound,  toBound);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(toBound);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
553	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingClass(typeVarAssigns);  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  aughtExceptionHandler.handleMissingClass(typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	aughtExceptionHandler.handleMissingClass(typeVarAssigns);	  return    true;    for(Type    bound    :    toUpperBounds)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	103	None	replace
554	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ", ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
555	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[upperBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	82	None	replace
556	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
557	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	78	None	replace
558	[BUG]  [BUGGY]  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
559	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(bound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  toBound.isAssignableFrom(bound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  toBound.isAssignableFrom(bound,  typeVarAssigns);	  return(bound    ==    null)?    null    :    toBound.isAssignableFrom(bound);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
560	[BUG]  [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	140	None	replace
561	[BUG]  [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  bound  :  toWildcardTypes)  {  if(!isAssignable(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	140	None	replace
562	[BUG]  [BUGGY]  safe(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safe(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	83	None	replace
563	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bounds.size()  ]);  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bounds.size()  ]);	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	99	None	replace
564	[BUG]  [BUGGY]  return  new  IllegalArgumentException( "Unknown  type  ' ");  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return  new  IllegalArgumentException( "Unknown  type  ' ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return  new  IllegalArgumentException( "Unknown  type  ' ");	  return    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  incompatible  types	126	None	replace
565	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns)||!isAssignable(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    toLowerBounds,    typeVarAssigns)||!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
566	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " ".);	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  <identifier>  expected	30	None	replace
567	[BUG]  [BUGGY]  for(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
568	[BUG]  [BUGGY]  safely(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	safely(bound,  toBound,  upperBounds))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	106	None	replace
569	[BUG]  [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException(   "   ");  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalStateException(   "   ");    }    if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalStateException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	96	None	add
570	[BUG]  [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
571	[BUG]  [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
572	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)&&!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)&&!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns)&&!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
573	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  typeVarAssigns)&&!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  typeVarAssigns)&&!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isWildcardType(bound,  typeVarAssigns)&&!isWildcardType(bound,  toBound,  typeVarAssigns))  {	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
574	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound,  typeVarAssigns.getValue();  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  bound,  toBound,  typeVarAssigns.getValue();  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  bound,  toBound,  typeVarAssigns.getValue();	  return(bound    ==    null)?    null    :    bound,    typeVarAssigns.getValue();    	non-compiled	[CE]  ';'  expected	23	None	replace
575	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.keySet();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  bound.keySet();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  bound.keySet();	  Type[]    lowerBounds    =    toUpperBounds.keySet();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	134	None	replace
576	[BUG]  [BUGGY]  allowSupported(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSupported(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSupported(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowSupported(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	131	None	replace
577	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	throw  new  IllegalArgumentException( ". ");	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  	125	2	replace
578	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( ". ");  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( ". ");	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  AssertionError  	125	2	replace
579	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
580	[BUG]  [BUGGY]  if(!isAssignable(toLowerBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toLowerBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(toLowerBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
581	[BUG]  [BUGGY]  if(!isAssignable(upper,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(upper,  toBound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	if(!isAssignable(upper,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
582	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds. ");	  Throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  not  a  statement	100	None	replace
583	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].   ");  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].   ");	  Throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  not  a  statement	100	None	replace
584	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	[Delete]  else  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ". ");  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
585	[BUG]  [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
586	[BUG]  [BUGGY]  return(bound  ==  null)?  null  :  type.isAssignableFrom(bound);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound  ==  null)?  null  :  type.isAssignableFrom(bound);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound  ==  null)?  null  :  type.isAssignableFrom(bound);	  return(bound    ==    null)?    null    :    bound.isAssignableFrom(type);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
587	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].  Must  be  in  the  range  [ "  +  toBound.getUpperBounds  [CE]  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].  Must  be  in  the  range  [ "  +  toBound.getUpperBounds  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].  Must  be  in  the  range  [ "  +  toBound.getUpperBounds	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getLowerBounds    	non-compiled	[CE]  	128	None	replace
588	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].  Must  be  in  the  range  [ "  +  toBound.getLowerBounds  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].  Must  be  in  the  range  [ "  +  toBound.getLowerBounds  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "].  Must  be  in  the  range  [ "  +  toBound.getLowerBounds	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getLowerBounds    	non-compiled	[CE]  	128	None	replace
589	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + ",'. ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + ",'. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + ",'  must  be  in  the  range  [ "  +  toBound.getName()  + ",'. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.   ");    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
590	[BUG]  [BUGGY]  For(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  ')'  expected	119	None	replace
591	[BUG]  [BUGGY]  for(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  toWildcardType  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue;  }	          for(Type    toWildcardType    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
592	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(bound.getType());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(bound.getType());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  IllegalArgumentException( " ").equals(bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
593	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns));  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	degrees.checkState(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns));	  degrees.checkState(!isAssignable(toBound,    toLowerBounds));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	65	None	replace
594	[BUG]  [BUGGY]  allowSupported(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSupported(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSupported(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
595	[BUG]  [BUGGY]  allowSupported(bound,  toBound,  typeVarAssigns))  {  continue;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSupported(bound,  toBound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSupported(bound,  toBound,  typeVarAssigns))  {  continue;  }	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
596	[BUG]  [BUGGY]  allowSideEffects(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  allowSideEffects(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	allowSideEffects(bound,  toBound,  typeVarAssigns);	          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue;    }    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
597	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
598	[BUG]  [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ')'  expected	52	None	replace
599	[BUG]  [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	For(Type  toBound  :  bounds)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  For(Type    toBound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	75	None	replace
600	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	93	None	add
601	[BUG]  [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]          if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	                if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	76	None	add
602	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + ",'  for  wildcard  type: "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + ",'  for  wildcard  type: "  +  bound.getName());  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  type  ' "  +  toWildcardType.getName()  + ",'  for  wildcard  type: "  +  bound.getName());	  throw    new    AssertionError(   "Unexpected    type    '   "    +    bound.getName()    +   "'    for    wildcard    type:   "    +    toWildcardType.getName());    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
603	[BUG]  [BUGGY]  Type[]  lowerBounds  =  upperBounds.values();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  upperBounds.values();  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Type[]  lowerBounds  =  upperBounds.values();	  Type[]    lowerBounds    =    bound.values();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
604	[BUG]  [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  continue  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    continue    false;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
605	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  binding.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  binding.getType()  ==  Token.BLOCK);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  binding.getType()  ==  Token.BLOCK);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
606	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",. ");  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",. ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
607	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "],  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "],  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "],  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
608	[BUG]  [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + ",  must  be  in  the  range  [ "  +  toBound.getName()  + ",  upperBounds,   ");	  throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    toBound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.    Must    be    in    the    range    [   "    +    toBound.getName()    +   ",   ");    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
609	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
610	[BUG]  [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "]. ");  [CE]  <identifier>  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "]. ");  [BUGGY]      }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	Throwables.throw  new  AssertionError( "Unexpected  lowerBounds  of  type  ' "  +  toBound.getName()  + "'  must  be  in  the  range  [ "  +  toBound.getName()  + "]. ");	  Throwables.throw    new    AssertionError(   "Unexpected    lowerBounds    of    type    '   "    +    bound.getName()    +   "'    must    be    in    the    range    [   "    +    toBound.getName()    +   "'.       ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
611	[BUG]  [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {      [BUGGY]  for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      return  false;  }  }  }  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	for(Type  bound  :  wildcardTypes)  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  for(Type    bound    :    toWildcardTypes)    {    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
