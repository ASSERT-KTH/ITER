bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(upperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
2	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
3	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toWildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
4	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type,  toWildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type,  toWildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(type,  toWildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
5	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
6	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  type);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	16	None	replace
7	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
8	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
9	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	35	None	replace
10	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  toLowerBounds,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
11	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
12	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
13	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
14	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  type);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
15	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
16	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
17	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	8	None	replace
18	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds,  typeVarAssigns);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBounds,  typeVarAssigns);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toUpperBounds,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	38	None	replace
19	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
20	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
21	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	25	None	replace
22	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(typeVarAssigns,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(typeVarAssigns,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(typeVarAssigns,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	25	None	replace
23	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	47	None	replace
24	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  upperBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  upperBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
25	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
26	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  lowBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  lowBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	45	None	replace
27	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  wildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  wildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  wildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
28	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
29	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
30	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
31	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
32	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
33	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	17	None	replace
34	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(highcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	9	None	replace
35	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBound,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBound,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBound,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
36	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
37	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  toUpperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  toUpperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  toUpperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	36	None	replace
38	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	49	None	replace
39	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	49	None	replace
40	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  lowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	49	None	replace
41	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	49	None	replace
42	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
43	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
44	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  type,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
45	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(type);	  Type[]    upperBounds    =    getImplicitLowerBounds(upperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	52	None	replace
46	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grainType);  [CE]  cannot  find  symbol  grainType  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grainType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(grainType);	  Type[]    upperBounds    =    getImplicitLowerBounds(upperBounds);    	non-compiled	[CE]  cannot  find  symbol  grainType	52	None	replace
47	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(highBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	43	None	replace
48	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highBound,  typeVarAssigns);  [CE]  cannot  find  symbol  highBound  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highBound,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(highBound,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(highBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  highBound	43	None	replace
49	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  lowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  lowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  lowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
50	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
51	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  lowBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  lowBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	27	None	replace
52	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  toLowerBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
53	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toLowerBounds,  typeVarAssigns);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
54	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(type,  toWildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
55	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  type,  toLowerBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  type,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  type,  toLowerBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	10	None	replace
56	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(type,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	15	None	replace
57	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBound,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBound,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBound,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	42	None	replace
58	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns,  toUpperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	42	None	replace
59	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  typeVarAssigns,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	42	None	replace
60	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
61	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
62	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
63	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    Type[]    lowestBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	34	None	replace
64	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(wildcardType);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(upperBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
65	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBound);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBound);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toLowerBound);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(upperBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
66	[BUG]  [BUGGY]  Type[]  lowBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  cannot  find  symbol  lowerBounds  [FE]          AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    Type[]    lowBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  cannot  find  symbol  lowerBounds	32	None	replace
67	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	40	None	replace
68	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(wildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toWildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	53	None	replace
69	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  type,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  type,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  type,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(type,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	37	None	replace
70	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(type,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(type,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	37	None	replace
71	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type,  wildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(type,  wildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(type,  wildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(type,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	37	None	replace
72	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    wildcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	54	None	replace
73	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    wildcardType);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	54	None	replace
74	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowerBound);  [CE]  cannot  find  symbol  lowerBound  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowerBound);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  lowerBound);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    wildcardType);    	non-compiled	[CE]  cannot  find  symbol  lowerBound	54	None	replace
75	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	6	None	replace
76	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
77	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  lowerBound  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBound,  toLowerBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  lowerBound	24	None	replace
78	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBound,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  lowerBound  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBound,  typeVarAssigns,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  lowerBound	24	None	replace
79	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	24	None	replace
80	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType,    toLowerBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	51	None	replace
81	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(lowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(lowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	48	None	replace
82	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
83	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
84	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
85	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  type,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  type,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  type,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	26	None	replace
86	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  wildcardType,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  wildcardType,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  wildcardType,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	26	None	replace
87	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  upperBounds);  [CE]  cannot  find  symbol  grabcardType  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(grabcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    wildcardType);    	non-compiled	[CE]  cannot  find  symbol  grabcardType	55	None	replace
88	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	55	None	replace
89	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
90	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
91	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
92	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
93	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  Type[]  upperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType);    Type[]    upperBounds    =    getImplicitLowerBounds(toWildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
94	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	7	None	replace
95	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBound,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBound,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBound,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerBound);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
96	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(lowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(lowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(lowerBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(upperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	52	None	replace
97	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
98	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highcardType,  type);  [CE]  cannot  find  symbol  highcardType  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highcardType,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(highcardType,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(type,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  highcardType	37	None	replace
99	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBound);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBound);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBound);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
100	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
101	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  typeVarAssigns);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	42	None	replace
102	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(typeVarAssigns,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(typeVarAssigns,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(typeVarAssigns,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	42	None	replace
103	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
104	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  typeVarAssigns,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	24	None	replace
105	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);  [CE]  cannot  find  symbol  upperBound  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(highBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  upperBound	43	None	replace
106	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  upperBound  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  toLowerBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  upperBound	25	None	replace
107	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  upperBound  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  upperBound	25	None	replace
108	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highBound,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  highBound  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(highBound,  typeVarAssigns,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  highBound	25	None	replace
109	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerBounds,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
110	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toLowerType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
111	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  type,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  type,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  type,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    type);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	26	None	replace
112	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound,  wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toUpperBound,  wildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
113	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toWildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	40	None	replace
114	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  upperBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  upperBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBounds,  upperBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(lowerBounds,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
115	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	47	None	replace
116	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBound);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBound);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBound);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	47	None	replace
117	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBoundType);  [CE]  cannot  find  symbol  upperBoundType  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBoundType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBoundType);	  Type[]    lowerBounds    =    getImplicitLowerBounds(highcardType);    	non-compiled	[CE]  cannot  find  symbol  upperBoundType	9	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	add	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(upperBoundType);    	compilable	  [FE]  AssertionError  	39	2	replace
119	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [FE]  AssertionError  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(upperBoundType);    	compilable	  [FE]  AssertionError  	39	2	replace
120	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  topBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  topBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  topBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	12	None	replace
121	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,upperBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,upperBounds);	  Type[]    upperBounds    =    getImplicitUpperBounds(upperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
122	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  upperBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	16	None	replace
123	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  upperBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
124	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds,  typeVarAssigns);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  upperBounds,  typeVarAssigns);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	36	None	replace
125	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBoundType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBoundType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(upperBoundType);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(upperBoundType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
126	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBoundType,  type);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBoundType,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(upperBoundType,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(upperBoundType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
127	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  lowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  lowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  lowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	55	None	replace
128	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  type);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(wildcardType,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(type,    upperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
129	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toWildcardType,  wildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	22	None	replace
130	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highBounds);  [CE]  cannot  find  symbol  highBounds  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(highBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(highBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(upperBounds);    	non-compiled	[CE]  cannot  find  symbol  highBounds	52	None	replace
131	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	41	None	replace
132	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
133	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
134	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  type);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType,  upperBounds,  type);	  Type[]    lowerBounds    =    getImplicitLowerBounds(wildcardType,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	35	None	replace
135	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(wildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toLowerBounds,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	6	None	replace
136	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toLowerBounds,  typeVarAssigns,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(toLowerBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
137	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToUpperBounds(toWildcardType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	47	None	replace
138	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType,  type);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	40	None	replace
139	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns,  toLowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(upperBound,  typeVarAssigns,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(upperBounds,    typeVarAssigns);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	25	None	replace
140	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  toLowerBounds);	  Type[]    toUpperBounds    =    getImplicitUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	11	None	replace
141	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBoundType);  [CE]  cannot  find  symbol  lowerBoundType  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBoundType);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(lowerBoundType);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(upperBoundType);    	non-compiled	[CE]  cannot  find  symbol  lowerBoundType	5	None	replace
142	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toLowerBounds);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	14	None	replace
143	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);  [BUGGY]      Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
144	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  wildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  wildcardType,  upperBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toLowerBounds,  wildcardType,  upperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	36	None	replace
145	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      if  (toWildcardType.equals(type))  {  return  true;  }  Type[]  toUpperBounds  =  getImplicitUpperBounds(toWildcardType);  Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);      [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  toLowerBounds);  [BUGGY]        for  (Type  toBound  :  toUpperBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(upperBounds,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toLowerBounds,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	36	None	replace
