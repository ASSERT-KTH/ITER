bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);		non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
2	[BUG]  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);		non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
3	[BUG]  [BUGGY]    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);		non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
4	[BUG]  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  ]);		non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
5	[BUG]  [BUGGY]    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);		non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  return  true;  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	return  true;	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
7	[BUG]  [BUGGY]  return  true;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  return  true;  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return  true;	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
9	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
11	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
13	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
15	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
17	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
19	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
20	[BUG]  [BUGGY]    Type[]  upperBounds  =  toBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toBounds.toArray(new  Type[toLowerBounds.size()  ]);		non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
21	[BUG]  [BUGGY]    Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  ]);		non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
22	[BUG]  [BUGGY]    Type  wildcardType  =  toBound.getWildcardType();  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type  wildcardType  =  toBound.getWildcardType();  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type  wildcardType  =  toBound.getWildcardType();		non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
23	[BUG]  [BUGGY]    Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound);		non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
24	[BUG]  [BUGGY]    Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  ]);		non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
25	[BUG]  [BUGGY]    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);		non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	72	None	add
26	[BUG]  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {		non-compiled	[CE]  illegal  start  of  expression	72	None	add
27	[BUG]  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,		non-compiled	[CE]  illegal  start  of  expression	72	None	add
28	[BUG]  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]          AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	    Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)		non-compiled	[CE]  ')'  expected	72	None	add
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	throw  new  IllegalArgumentException( " ");	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
30	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ");	return  false;  	compilable	  [FE]  AssertionError  	71	2	replace
31	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	return  false;  	non-compiled	[CE]  cannot  find  symbol	71	None	replace
32	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [BUGGY]  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);	return  false;  	non-compiled	[CE]  cannot  find  symbol	71	None	replace
