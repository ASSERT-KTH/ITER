bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type  toWildcardType  =  toBound.getWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  toWildcardType  =  toBound.getWildcardType();  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toBound.getWildcardType();	      Type    wildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
2	[BUG]  [BUGGY]  Type  toWildcardType  =  bound.getWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  toWildcardType  =  bound.getWildcardType();  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  bound.getWildcardType();	      Type    wildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
3	[BUG]  [BUGGY]  Type  toBoundType  =  toBound.getWildcardType();  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  toBoundType  =  toBound.getWildcardType();  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound.getWildcardType();	      Type    wildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
4	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  [Delete]  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
5	[BUG]  [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  degreesCandidate(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  degreesCandidate(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  degreesCandidate(toBound,  toUpperBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  degreesCandidate(toBound,  toUpperBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  toUpperBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[toUpperBounds.size()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
9	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
10	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
11	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
12	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	30	None	replace
13	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getType()));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getType()));  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ".equals(bound.getType()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
14	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getName()));  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound.getName()));  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ".equals(bound.getName()));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
15	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	29	None	add
16	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	29	None	add
17	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  unreachable  statement	29	None	add
18	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
19	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
20	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
21	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
22	[BUG]  [BUGGY]  return  true;  return  true;  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  return  true;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    return  true;	  	non-compiled	[CE]  unreachable  statement	6	None	add
23	[BUG]  [BUGGY]  return  true;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
24	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }	  	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	6	None	add
25	[BUG]  [BUGGY]  return  true;  if(!isAssignable(toBound,  bound))  {  return  true;  }  [CE]  unreachable  statement  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(toBound,  bound))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(!isAssignable(toBound,  bound))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
26	[BUG]  [BUGGY]  return  true;  if(typeVarAssigns.contains(toBound))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(typeVarAssigns.contains(toBound))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(typeVarAssigns.contains(toBound))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	6	None	add
27	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
28	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
29	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
30	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
31	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	12	None	add
32	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  }	  	non-compiled	[CE]  illegal  start  of  type	12	None	add
33	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	25	None	replace
34	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
35	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	16	2	add
37	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	16	2	add
38	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	16	None	add
39	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	18	2	add
41	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	18	2	add
42	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	18	None	add
43	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typesVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  typesVarAssigns  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typesVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typesVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typesVarAssigns	18	None	add
44	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	28	None	replace
45	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
46	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	28	None	replace
47	[BUG]  [BUGGY]  While(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  While(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
48	[BUG]  [BUGGY]  safely(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
49	[BUG]  [BUGGY]  While(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  While(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
50	[BUG]  [BUGGY]  While(!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  While(!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toWildcard,  bound,  typeVarAssigns))  {	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	8	2	add
52	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	8	2	add
53	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
54	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typesVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  typesVarAssigns  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typesVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typesVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typesVarAssigns	8	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	10	2	add
56	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	10	2	add
57	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	10	2	add
59	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	10	2	add
60	[BUG]  [BUGGY]  try  ==  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  try  ==  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	9	None	replace
61	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
62	[BUG]  [BUGGY]  triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
63	[BUG]  [BUGGY]  try  ==  isAssignable(toBound,  bound,  typeVarAssigns);  [CE]  '{'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  try  ==  isAssignable(toBound,  bound,  typeVarAssigns);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  isAssignable(toBound,  bound,  typeVarAssigns);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	9	None	replace
64	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
65	[BUG]  [BUGGY]  tryOffsets(toBound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  upperBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
66	[BUG]  [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	19	None	replace
67	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	14	2	add
68	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	14	2	add
69	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	14	None	add
70	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	14	None	add
71	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns));  [CE]  cannot  find  symbol  degrees  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns));  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	11	None	replace
72	[BUG]  [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
73	[BUG]  [BUGGY]  allowNull(toBound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  allowNull(toBound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowNull(toBound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    	compilable	  [FE]  AssertionError  	7	2	replace
75	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    	compilable	  [FE]  AssertionError  	7	2	replace
76	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[size()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	24	None	replace
77	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  -  1]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  -  1]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	24	None	replace
78	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	24	None	replace
79	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
80	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
81	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
82	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
83	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
84	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
85	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
86	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
87	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
88	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
89	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(bound);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
90	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
91	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
92	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
93	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	13	None	replace
94	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	13	None	replace
95	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
96	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
97	[BUG]  [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
98	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	9	None	replace
99	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	31	None	replace
100	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
101	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
102	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  unreachable  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
103	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound));  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ".equals(bound));	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	30	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	30	2	replace
105	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	30	2	replace
106	[BUG]  [BUGGY]  Type  wildcardType  =  toBound.getWildcardType(bound);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  wildcardType  =  toBound.getWildcardType(bound);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toBound.getWildcardType(bound);	      Type    wildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
107	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  If(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	18	None	add
108	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
109	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
110	[BUG]  [BUGGY]  safely(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	17	None	replace
111	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
112	[BUG]  [BUGGY]  safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
113	[BUG]  [BUGGY]  safely(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  safely(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	11	None	replace
114	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	non-compiled	[CE]  unreachable  statement	12	None	add
115	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	32	None	replace
116	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.VAR);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
117	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
118	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
119	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
120	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	15	None	replace
121	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns);	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
122	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
123	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
124	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  ||!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
125	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	19	None	replace
126	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
127	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
128	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  throw  new  IllegalArgumentException( "   ");  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwable  throw  new  IllegalArgumentException( "   ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalArgumentException(   "   ");    Throwable  throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  not  a  statement	29	None	add
129	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	28	None	replace
130	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  ')'  expected	27	None	replace
131	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
132	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
133	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
134	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  binding  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  binding	8	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  AssertionError  	10	2	add
136	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ",   ");  }	  	compilable	  [FE]  AssertionError  	10	2	add
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    	compilable	  [FE]  AssertionError  	7	2	replace
138	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    	compilable	  [FE]  AssertionError  	7	2	replace
139	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
140	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
141	[BUG]  [BUGGY]  ==  [Delete]  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  ==  [Delete]  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	==  [Delete]	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
142	[BUG]  [BUGGY]  >>  [Delete]  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  >>  [Delete]  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	>>  [Delete]	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
143	[BUG]  [BUGGY]  >=  [Delete]  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  >=  [Delete]  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	>=  [Delete]	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
144	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
145	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound);	      Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	23	None	replace
146	[BUG]  [BUGGY]  Type  wildcardType  =  toBound.toWildcardType();  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type  wildcardType  =  toBound.toWildcardType();  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toBound.toWildcardType();	      Type    wildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
147	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
148	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	17	None	replace
149	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigneds))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigneds))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	8	None	add
150	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);	      Type[]    upperBounds    =    toBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
151	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
152	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	15	None	replace
153	[BUG]  [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	15	None	replace
154	[BUG]  [BUGGY]  >>  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  >>  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	>>	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
155	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigneds))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigneds))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	14	None	add
156	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
157	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
158	[BUG]  [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	32	None	replace
159	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
160	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  ]);  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
161	[BUG]  [BUGGY]  return  true;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return  true;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return    true;    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  unreachable  statement	6	None	add
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	30	2	replace
163	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ");  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  IllegalStateException( " ");  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	30	2	replace
164	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigneds))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigneds))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	18	None	add
165	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns	      Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ')'  expected	26	None	replace
166	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
167	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigneds))  {  return  false;  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigneds))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	16	None	add
168	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
169	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  ')'  expected	27	None	replace
170	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	12	None	add
171	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	return!isAssignable(bound,  bound,  typeVarAssigns);	  return    true;    	compilable	  [FE]  AssertionError  	7	2	replace
172	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,  bound,  typeVarAssigns);	  return    true;    	compilable	  [FE]  AssertionError  	7	2	replace
173	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {    [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName());  [BUGGY]    }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound.getName());	  return    true;    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
