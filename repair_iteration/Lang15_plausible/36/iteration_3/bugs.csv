bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)	54	None	replace
2	[BUG]  [BUGGY]  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
3	[BUG]  [BUGGY]  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
4	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  false))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,boolean)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  false))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  false))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,boolean)	54	None	replace
5	[BUG]  [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalStateException( " ");	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  <identifier>  expected	163	None	replace
6	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(toBound.getName()));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(toBound.getName()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalStateException( " ".equals(toBound.getName()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
7	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(toBound));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(toBound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalStateException( " ".equals(toBound));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	163	None	replace
8	[BUG]  [BUGGY]  Type  toWildcardType  =  toBound.toWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toBound.toWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toBound.toWildcardType();	  Type    wildcardType    =    toBound.toWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	146	None	replace
9	[BUG]  [BUGGY]  Type  toBoundType  =  toBound.toWildcardType();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toBound.toWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound.toWildcardType();	  Type    wildcardType    =    toBound.toWildcardType();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
10	[BUG]  [BUGGY]  Type  toWildcardType  =  bound.toWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  bound.toWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  bound.toWildcardType();	  Type    wildcardType    =    toBound.toWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	146	None	replace
11	[BUG]  [BUGGY]  allowNull(toBound,  toUpperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowNull(toBound,  toUpperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowNull(toBound,  toUpperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNull(toBound,    toLowerBounds))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
12	[BUG]  [BUGGY]  allowNull(toBound,  bound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowNull(toBound,  bound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowNull(toBound,  bound))  {  throw  new  IllegalArgumentException( " ");  }	  allowNull(toBound,    toLowerBounds))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
13	[BUG]  [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
14	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  toUpperBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  toUpperBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  toUpperBounds))  {  return  false;  }	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
15	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  toLowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  toLowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  toLowerBounds))  {  return  false;  }	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
16	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
17	[BUG]  [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
18	[BUG]  [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
19	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
20	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
21	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;	  parent    ==    null    &&!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	109	None	replace
22	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  return  false;	  parent    ==    null    &&!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	109	None	replace
23	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;	  parent    ==    null    &&!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	109	None	replace
24	[BUG]  [BUGGY]  return  toBound.isAssignable()?  null  :  toBound.isAssignable();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return  toBound.isAssignable()?  null  :  toBound.isAssignable();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return  toBound.isAssignable()?  null  :  toBound.isAssignable();	  >>    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
25	[BUG]  [BUGGY]  if(typeVarAssigns.contains(toBound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(toBound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(toBound))  {  throw  new  IllegalArgumentException( " ");  }	  >>    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
26	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  bound);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  toBound  =  substituteTypeVariables(toBound,  bound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	toBound  =  substituteTypeVariables(toBound,  bound);	  >>    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	154	None	replace
27	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
28	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	51	2	add
30	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	51	2	add
31	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	51	2	add
32	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	51	2	add
33	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
34	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	51	None	add
35	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
36	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toLowerBounds))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toLowerBounds))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	24	None	replace
37	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	24	None	replace
38	[BUG]  [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  true;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	24	None	replace
39	[BUG]  [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(toBound,  bound,  typeVarAssigns))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
40	[BUG]  [BUGGY]  allowReturn(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(toBound,  toLowerBounds,  typeVarAssigns))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
41	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  toUpperBounds))  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  toUpperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  toUpperBounds))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
42	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  toLowerBounds))  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  toLowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  toLowerBounds))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  	compilable	  [FE]  AssertionError  	74	2	add
44	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  	compilable	  [FE]  AssertionError  	74	2	add
45	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
46	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typesVarAssigns))  {  return  true;  }  [CE]  cannot  find  symbol  typesVarAssigns  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typesVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(toBound,  bound,  typesVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typesVarAssigns	74	None	add
47	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  If(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  If(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    If(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  ';'  expected	74	None	add
48	[BUG]  [BUGGY]  return(typeVarAssigns.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(typeVarAssigns.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(typeVarAssigns.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    typeVarAssigns.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
49	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    typeVarAssigns.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
50	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ", ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  	136	None	replace
51	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ", ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ", ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ", ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  	136	None	replace
52	[BUG]  [BUGGY]  while(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  While(!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
53	[BUG]  [BUGGY]  hilst(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  hilst(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	hilst(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  While(!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	49	None	replace
54	[BUG]  [BUGGY]  degrees.put(bound,  new  TypeVariable(toBound,  typeVarAssigns));  [CE]  TypeVariable  is  abstract;  cannot  be  instantiated  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(bound,  new  TypeVariable(toBound,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(bound,  new  TypeVariable(toBound,  typeVarAssigns));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  TypeVariable  is  abstract;  cannot  be  instantiated	30	None	replace
55	[BUG]  [BUGGY]  degrees.put(toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  degrees  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(toBound,  typeVarAssigns);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	30	None	replace
56	[BUG]  [BUGGY]  degrees.put(typeVarAssigns,  toBound);  [CE]  cannot  find  symbol  degrees  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(typeVarAssigns,  toBound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(typeVarAssigns,  toBound);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol  degrees	30	None	replace
57	[BUG]  [BUGGY]  degrees.put(bound,  new  TypeVariable(typeVarAssigns,  toBound));  [CE]  TypeVariable  is  abstract;  cannot  be  instantiated  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(bound,  new  TypeVariable(typeVarAssigns,  toBound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(bound,  new  TypeVariable(typeVarAssigns,  toBound));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  TypeVariable  is  abstract;  cannot  be  instantiated	30	None	replace
58	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  Type[]    upperBounds    =    toLowerBounds.values().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
59	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  Type[]    upperBounds    =    toLowerBounds.values().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
60	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
61	[BUG]  [BUGGY]  triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	53	None	replace
62	[BUG]  [BUGGY]  triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
63	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound));	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	105	None	replace
64	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getType()));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getType()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.getType()));	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
65	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.type));  [CE]  cannot  find  symbol  type  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.type));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " ".equals(bound.type));	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  type	105	None	replace
66	[BUG]  [BUGGY]  safeTree(bound,  toBound,  false))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  toBound,  false))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  toBound,  false))  {  throw  new  IllegalArgumentException( " ");  }	  safeTree(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
67	[BUG]  [BUGGY]  safeTree(bound,  toBound,  0))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  toBound,  0))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  toBound,  0))  {  throw  new  IllegalArgumentException( " ");  }	  safeTree(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
68	[BUG]  [BUGGY]  degreesCandidate(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
69	[BUG]  [BUGGY]  degreesCandidate(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
70	[BUG]  [BUGGY]  degreeCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreeCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreeCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
71	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	27	None	replace
72	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	27	None	replace
73	[BUG]  [BUGGY]  degrees.put(bound,  new  TypeVariable(toBound,  typeVarAssigns)));  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(bound,  new  TypeVariable(toBound,  typeVarAssigns)));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(bound,  new  TypeVariable(toBound,  typeVarAssigns)));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  ';'  expected	114	None	replace
74	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( "   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	104	None	add
75	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ".   ");  [CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ".   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( ".   ");	  	non-compiled	[CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	104	None	add
76	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ",   ");  [CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException( ",   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException( ",   ");	  	non-compiled	[CE]  variable  cause  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	104	None	add
77	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException(. "   ");  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException(   "   ");  Throwable  cause  =  new  IllegalArgumentException(. "   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable    cause    =    new    IllegalArgumentException(   "   ");    Throwable  cause  =  new  IllegalArgumentException(. "   ");	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
78	[BUG]  [BUGGY]  Type  toWildcardType  =  bound.getWildcardType(typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  bound.getWildcardType(typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  bound.getWildcardType(typeVarAssigns);	  Type    toWildcardType    =    bound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
79	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  ==  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
80	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
81	[BUG]  [BUGGY]  safely(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
82	[BUG]  [BUGGY]  safely(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  toWildcardType,  typeVarAssigns))  {	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
83	[BUG]  [BUGGY]  triesAndReturn(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesAndReturn(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesAndReturn(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	57	None	replace
84	[BUG]  [BUGGY]  triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	57	None	replace
85	[BUG]  [BUGGY]  triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(toBound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	57	None	replace
86	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  wildcardType))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,WildcardType,WildcardType)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  wildcardType))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  wildcardType))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,WildcardType,WildcardType)	167	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	167	2	replace
88	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	167	2	replace
89	[BUG]  [BUGGY]  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
90	[BUG]  [BUGGY]  ||!isAssignable(toWildcard,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  ||!isAssignable(toWildcard,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	||!isAssignable(toWildcard,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	167	None	replace
91	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	115	None	replace
92	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  result;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  result;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  result;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
93	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=!isAssignable(bound,  toBound,  typeVarAssigns);	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	102	None	replace
94	[BUG]  [BUGGY]  result  |=!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  result;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  result;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  result;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
95	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  toBound,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=!isAssignable(bound,  toBound,  typeVarAssigns));	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	102	None	replace
96	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
97	[BUG]  [BUGGY]  try  {  replaceTypeVariables(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  replaceTypeVariables(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  replaceTypeVariables(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
98	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
99	[BUG]  [BUGGY]  safe(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
100	[BUG]  [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  bound,  typeVarAssigns))  {  return  false;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
101	[BUG]  [BUGGY]  safe(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
102	[BUG]  [BUGGY]  safely(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
103	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[length()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[length()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[length()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
104	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  -  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
105	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[length()  +  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
106	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  typeVarAssigns);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	127	None	replace
107	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(toBound,  bound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(toBound,  bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(toBound,  bound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	127	None	replace
108	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(type,  toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(type,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(type,  toBound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	127	None	replace
109	[BUG]  [BUGGY]  Throwable  throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	128	None	replace
110	[BUG]  [BUGGY]  Throwable  throw  new  IllegalStateException( " ");  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  throw  new  IllegalStateException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  throw  new  IllegalStateException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	128	None	replace
111	[BUG]  [BUGGY]  Throwable  throw  new  IllegalArgumentException( " ".);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  throw  new  IllegalArgumentException( " ".);	  throw    new    IllegalArgumentException(       "       ");    Throwable    throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	128	None	replace
112	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[bound.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	86	None	replace
113	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  +  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	86	None	replace
114	[BUG]  [BUGGY]  Type[]  toBounds  =  toBounds.toArray(new  Type[bound.size()  ]);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toBounds  =  toBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toBounds  =  toBounds.toArray(new  Type[bound.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
115	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  *  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  *  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  *  1]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    -    1]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	88	None	replace
116	[BUG]  [BUGGY]  While(!isAssignable(toWildcard,  bound,  toUpperBounds))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  While(!isAssignable(toWildcard,  bound,  toUpperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toWildcard,  bound,  toUpperBounds))  {	  While(!isAssignable(toWildcard,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
117	[BUG]  [BUGGY]  while(!isAssignable(toWildcard,  bound,  toUpperBounds))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toWildcard,  bound,  toUpperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toWildcard,  bound,  toUpperBounds))  {	  While(!isAssignable(toWildcard,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
118	[BUG]  [BUGGY]  While(!isAssignable(toWildcard,  bound,  toLowerBounds))  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  While(!isAssignable(toWildcard,  bound,  toLowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toWildcard,  bound,  toLowerBounds))  {	  While(!isAssignable(toWildcard,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
119	[BUG]  [BUGGY]  triesToWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  triesToWildcardType(toBound,    toLowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
120	[BUG]  [BUGGY]  triesToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  triesToWildcardType(toBound,    toLowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
121	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[size()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[size()  -  1]);	  Type[]    lowerBounds    =    toBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	76	None	replace
122	[BUG]  [BUGGY]  Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  typeVarAssigns);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	90	None	replace
123	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  toLowerBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	90	None	replace
124	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds,  typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds,  typeVarAssigns);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	90	None	replace
125	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
126	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  lowerBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  lowerBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  lowerBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	44	None	replace
127	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.size().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.size().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.size().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	44	None	replace
128	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  *  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  *  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[size()  *  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[size()    -    1]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	77	None	replace
129	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getType()));  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getType()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getType()));	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
130	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound.getType());  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound.getType());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  <identifier>  expected	13	None	replace
131	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  ]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	160	None	replace
132	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  +  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	160	None	replace
133	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bounds.size()  -  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	160	None	replace
134	[BUG]  [BUGGY]  try  ==  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [CE]  '{'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  '{'  expected	75	None	replace
135	[BUG]  [BUGGY]  try  ==  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  '{'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  '{'  expected	75	None	replace
136	[BUG]  [BUGGY]  try  ==  substituteTypeVariables(toBound,  toLowerBounds))  {  return  true;  }  [CE]  '{'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  substituteTypeVariables(toBound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  substituteTypeVariables(toBound,  toLowerBounds))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  '{'  expected	75	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	103	2	replace
138	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  bound.equals(typeVarAssigns));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	103	2	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	103	2	replace
140	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  toBound.equals(bound));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	compilable	  [FE]  AssertionError  	103	2	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(toBound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	return!isAssignable(toBound,  bound,  typeVarAssigns);	  return!isAssignable(bound,    bound,    typeVarAssigns);    	compilable	  [FE]  AssertionError  	172	2	replace
142	[BUG]  [BUGGY]  return!isAssignable(toBound,  bound,  typeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(toBound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(toBound,  bound,  typeVarAssigns);	  return!isAssignable(bound,    bound,    typeVarAssigns);    	compilable	  [FE]  AssertionError  	172	2	replace
143	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  toWildcardType,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	return!isAssignable(bound,  toWildcardType,  typeVarAssigns);	  return!isAssignable(bound,    bound,    typeVarAssigns);    	compilable	  [FE]  AssertionError  	172	2	replace
144	[BUG]  [BUGGY]  return!isAssignable(bound,  toWildcardType,  typeVarAssigns);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  toWildcardType,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,  toWildcardType,  typeVarAssigns);	  return!isAssignable(bound,    bound,    typeVarAssigns);    	compilable	  [FE]  AssertionError  	172	2	replace
145	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[toBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	87	None	replace
146	[BUG]  [BUGGY]  Type[]  toBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toBounds  =  toBounds.toArray(new  Type[toBounds.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[toBounds.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
147	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[toBounds.size()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[toBounds.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[toBounds.size()  +  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[toBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	87	None	replace
148	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	  Type[]    upperBounds    =    toLowerBounds.values().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	46	None	replace
149	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.values().iterator().next();	  Type[]    upperBounds    =    toLowerBounds.values().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
150	[BUG]  [BUGGY]  try  ==  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	153	None	replace
151	[BUG]  [BUGGY]  try  >>  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  >>  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  >>  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	153	None	replace
152	[BUG]  [BUGGY]  try  ==  while(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  '{'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  while(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  while(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	153	None	replace
153	[BUG]  [BUGGY]  try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  '{'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  while(!isAssignable(bound,  toBound,  typeVarAssigns))  {	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	153	None	replace
154	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
155	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
156	[BUG]  [BUGGY]  if(typeVarAssigns.contains(toBound))  {  toWildcardType[]  lowerBounds  =  toWildcardType.getRangeBounds();  for(Type  bound  :  lowerBounds)  {  if(!isAs  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(toBound))  {  toWildcardType[]  lowerBounds  =  toWildcardType.getRangeBounds();  for(Type  bound  :  lowerBounds)  {  if(!isAs  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(toBound))  {  toWildcardType[]  lowerBounds  =  toWildcardType.getRangeBounds();  for(Type  bound  :  lowerBounds)  {  if(!isAs	  >=    [Delete]    	non-compiled	[CE]  ')'  expected	143	None	replace
157	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
158	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	155	None	replace
159	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toLowerBounds))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	155	None	replace
160	[BUG]  [BUGGY]  ||!isAssignable(toBound,  toLowerBounds))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  ||!isAssignable(toBound,  toLowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	||!isAssignable(toBound,  toLowerBounds))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
161	[BUG]  [BUGGY]  result.add(toBound);  [CE]  cannot  find  symbol  result  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result.add(toBound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result.add(toBound);	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	25	None	replace
162	[BUG]  [BUGGY]  result.add(typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result.add(typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result.add(typeVarAssigns);	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	25	None	replace
163	[BUG]  [BUGGY]  result  |=  toBound.getType();  [CE]  cannot  find  symbol  result  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=  toBound.getType();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=  toBound.getType();	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	25	None	replace
164	[BUG]  [BUGGY]  degrees.put(bound,  typeVarAssigns);  [CE]  cannot  find  symbol  degrees  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(bound,  typeVarAssigns);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol  degrees	31	None	replace
165	[BUG]  [BUGGY]  degrees.put(typeVarAssigns,  bound);  [CE]  cannot  find  symbol  degrees  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.put(typeVarAssigns,  bound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.put(typeVarAssigns,  bound);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol  degrees	31	None	replace
166	[BUG]  [BUGGY]  degrees(typeVarAssigns,  toBound))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees(typeVarAssigns,  toBound))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees(typeVarAssigns,  toBound))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  ';'  expected	31	None	replace
167	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
168	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
169	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(IllegalArgumentException  e)  {  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(IllegalArgumentException  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(IllegalArgumentException  e)  {  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
170	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
171	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(Exception  e)  {  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(Exception  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(Exception  e)  {  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	52	None	replace
172	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(IllegalArgumentException  e)  {  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(IllegalArgumentException  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(IllegalArgumentException  e)  {  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	134	None	replace
173	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	134	None	replace
174	[BUG]  [BUGGY]  tryOffsets(bound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoSuchElementException  e)  {  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoSuchElementException  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(bound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoSuchElementException  e)  {  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	134	None	replace
175	[BUG]  [BUGGY]  tryOffsets(bound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(bound,  toLowerBounds,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	134	None	replace
176	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  ==  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  ==  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  illegal  line  end  in  character  literal	169	None	replace
177	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound!=  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound!=  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  illegal  line  end  in  character  literal	169	None	replace
178	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  }  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  }  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  }	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  ')'  expected	169	None	replace
179	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  ==  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  ==  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  illegal  line  end  in  character  literal	169	None	replace
180	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  lowerBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  lowerBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  lowerBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
181	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
182	[BUG]  [BUGGY]  triesCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesCandidate(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	166	None	replace
183	[BUG]  [BUGGY]  Context.checkState(!isAssignable(toBound,  toWildcardType,  typeVarAssigns));  [CE]  cannot  find  symbol  Context  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!isAssignable(toBound,  toWildcardType,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Context.checkState(!isAssignable(toBound,  toWildcardType,  typeVarAssigns));	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  Context	38	None	replace
184	[BUG]  [BUGGY]  Context.checkState(!isAssignable(toBound,  bound,  typeVarAssigns));  [CE]  cannot  find  symbol  Context  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!isAssignable(toBound,  bound,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Context.checkState(!isAssignable(toBound,  bound,  typeVarAssigns));	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  Context	38	None	replace
185	[BUG]  [BUGGY]  Constructor  <?>  bound  =  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Constructor  <?>  bound  =  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Constructor  <?>  bound  =  substituteTypeVariables(toBound,  toWildcardType,  typeVarAssigns);	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
186	[BUG]  [BUGGY]  Class  <?>  bound  =  toWildcardType.getRawClass();  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  bound  =  toWildcardType.getRawClass();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Class  <?>  bound  =  toWildcardType.getRawClass();	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	38	None	replace
187	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);	  Type[]    lowerBounds    =    toBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	85	None	replace
188	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;	  parent    ==    null    ||!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	148	None	replace
189	[BUG]  [BUGGY]  allowReturn(toBound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(toBound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(toBound,  toBound,  typeVarAssigns);	  allowReturn(bound,    toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
190	[BUG]  [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(toBound,  bound,  typeVarAssigns);	  allowReturn(bound,    toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
191	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns,  toLowerBounds);	  allowReturn(bound,    toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
192	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  toUpperBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  toUpperBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns,  toUpperBounds);	  allowReturn(bound,    toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
193	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  +  1]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
194	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
195	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  return!isAssignable(bound,  bound,  typeVarAssigns);  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  return!isAssignable(bound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    return!isAssignable(bound,  bound,  typeVarAssigns);	  	non-compiled	[CE]  unreachable  statement	171	None	add
196	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  Return!isAssignable(bound,  bound,  typeVarAssigns);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  Return!isAssignable(bound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    Return!isAssignable(bound,  bound,  typeVarAssigns);	  	non-compiled	[CE]  not  a  statement	171	None	add
197	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  return!isAssignable(bound,  bound,  _typeVarAssigns);  [CE]  cannot  find  symbol  _typeVarAssigns  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  return!isAssignable(bound,  bound,  _typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    return!isAssignable(bound,  bound,  _typeVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol  _typeVarAssigns	171	None	add
198	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  return!isAssignable(bound,  bound,  typesVarAssigns);  [CE]  cannot  find  symbol  typesVarAssigns  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  return!isAssignable(bound,  bound,  typesVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    return!isAssignable(bound,  bound,  typesVarAssigns);	  	non-compiled	[CE]  cannot  find  symbol  typesVarAssigns	171	None	add
199	[BUG]  [BUGGY]  Type  toBoundType  =  bound.getWildcardType();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  bound.getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  bound.getWildcardType();	  Type    toBoundType    =    toBound.getWildcardType();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
200	[BUG]  [BUGGY]  Type  toBoundType  =  toBound,  bound.getWildcardType();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toBound,  bound.getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound,  bound.getWildcardType();	  Type    toBoundType    =    toBound.getWildcardType();    	non-compiled	[CE]  ';'  expected	3	None	replace
201	[BUG]  [BUGGY]  Type  toBoundType  =  toBound.type.getWildcardType();  [CE]  cannot  find  symbol  type  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toBound.type.getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound.type.getWildcardType();	  Type    toBoundType    =    toBound.getWildcardType();    	non-compiled	[CE]  cannot  find  symbol  type	3	None	replace
202	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
203	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	67	2	add
204	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	67	2	add
205	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	67	2	add
206	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	67	2	add
207	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
208	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
209	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAs  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAs  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAs	  	non-compiled	[CE]  ')'  expected	67	None	add
210	[BUG]  [BUGGY]  degrees.checkState(!isVarAssignable(toBound,  bound,  typeVarAssigns));  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isVarAssignable(toBound,  bound,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isVarAssignable(toBound,  bound,  typeVarAssigns));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
211	[BUG]  [BUGGY]  triesToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	56	None	replace
212	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  wildcardType);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  wildcardType);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  wildcardType);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
213	[BUG]  [BUGGY]  Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  toBound);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
214	[BUG]  [BUGGY]  Type  toWildcardType  =  toBound.getFunctionDeclaration(bound,  toWildcardType);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toBound.getFunctionDeclaration(bound,  toWildcardType);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toBound.getFunctionDeclaration(bound,  toWildcardType);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
215	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    type    	non-compiled	[CE]  ')'  expected	129	None	replace
216	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  type	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    type    	non-compiled	[CE]  ')'  expected	129	None	replace
217	[BUG]  [BUGGY]  tryOffsets(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
218	[BUG]  [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
219	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
220	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  toBound);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
221	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(toBound);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(toBound);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
222	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(type);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(type);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(type);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
223	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
224	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
225	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toUpperBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toUpperBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toUpperBounds))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	149	None	replace
226	[BUG]  [BUGGY]  result[0]  =  toBound.getWildcardType();  [CE]  cannot  find  symbol  result  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result[0]  =  toBound.getWildcardType();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result[0]  =  toBound.getWildcardType();	  return    true;    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	23	None	replace
227	[BUG]  [BUGGY]  result[0]  =  toBound.getType();  [CE]  cannot  find  symbol  result  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result[0]  =  toBound.getType();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result[0]  =  toBound.getType();	  return    true;    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	23	None	replace
228	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( "   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	162	None	add
229	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException( "   ");  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException(   "   ");  Throw  new  IllegalStateException( "   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalStateException(   "   ");    Throw  new  IllegalStateException( "   ");	  	non-compiled	[CE]  not  a  statement	162	None	add
230	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException(   "   ");  throw  new  IllegalStateException( ",   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalStateException(   "   ");    throw  new  IllegalStateException( ",   ");	  	non-compiled	[CE]  unreachable  statement	162	None	add
231	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
232	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
233	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
234	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
235	[BUG]  [BUGGY]  Type  toWildcardType  =  binding.getWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  binding.getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  binding.getWildcardType();	  Type    toWildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
236	[BUG]  [BUGGY]  WildcardType  toWildcardType  =  bound.getWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  WildcardType  toWildcardType  =  bound.getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	WildcardType  toWildcardType  =  bound.getWildcardType();	  Type    toWildcardType    =    toBound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
237	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	17	2	replace
238	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ". ");  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ". ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( ". ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	17	2	replace
239	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Unreachable  type: ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalArgumentException( "Unreachable  type: ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	17	2	replace
240	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Unreachable  type: ");  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Unreachable  type: ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( "Unreachable  type: ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	17	2	replace
241	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns);	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
242	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  lowerBounds,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  toLowerBounds);	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
243	[BUG]  [BUGGY]  tryOffsets(toBound,  toWildcardType,  toUpperBounds);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toWildcardType,  toUpperBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toWildcardType,  toUpperBounds);	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
244	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  toWildcardType);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  toWildcardType);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  toWildcardType);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
245	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  toWildcardType,  typeVarAssigns);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  toWildcardType,  typeVarAssigns);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
246	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  typeVarAssigns,  toLowerBounds);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  typeVarAssigns,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  typeVarAssigns,  toLowerBounds);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
247	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  typeVarAssigns,  toWildcardType);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  typeVarAssigns,  toWildcardType);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  typeVarAssigns,  toWildcardType);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
248	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toWildcardType,  typeVarAssigns));  [CE]  cannot  find  symbol  degrees  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  toWildcardType,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  toWildcardType,  typeVarAssigns));	  degrees.checkState(!isAssignable(toBound,    bound,    typeVarAssigns));    	non-compiled	[CE]  cannot  find  symbol  degrees	71	None	replace
249	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns),  toLowerBounds);  [CE]  cannot  find  symbol  degrees  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns),  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns),  toLowerBounds);	  degrees.checkState(!isAssignable(toBound,    bound,    typeVarAssigns));    	non-compiled	[CE]  cannot  find  symbol  degrees	71	None	replace
250	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " ");  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  not  a  statement	16	None	replace
251	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(toBound));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(toBound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ".equals(toBound));	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	16	None	replace
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  	compilable	  [FE]  AssertionError  	137	2	add
253	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  	compilable	  [FE]  AssertionError  	137	2	add
254	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	137	None	add
255	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  If(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  If(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    If(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  ';'  expected	137	None	add
256	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[toUpperBounds.size()  ]);	  Type[]    lowerBounds    =    toBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	9	None	replace
257	[BUG]  [BUGGY]  safeToSubtype(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeToSubtype(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeToSubtype(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	37	None	replace
258	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[toUpperBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	8	None	replace
259	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
260	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
261	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]));	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  ';'  expected	28	None	replace
262	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	58	None	add
263	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
264	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	58	None	add
265	[BUG]  [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(toBound,  bound,  typeVarAssigns))  {  return  false;	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	119	None	replace
266	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  toUpperBounds))  {  return  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  toUpperBounds))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  toUpperBounds))  {  return  false;	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	119	None	replace
267	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  true;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns))  {  return  true;	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	119	None	replace
268	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  toLowerBounds))  {  return  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  toLowerBounds))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  toLowerBounds))  {  return  false;	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	119	None	replace
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	36	2	add
270	[BUG]  [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	36	2	add
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	36	2	add
272	[BUG]  [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	36	2	add
273	[BUG]  [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
274	[BUG]  [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false	  	non-compiled	[CE]  ';'  expected	36	None	add
275	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  ==  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  ==  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  illegal  line  end  in  character  literal	130	None	replace
276	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB!=  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB!=  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  illegal  line  end  in  character  literal	130	None	replace
277	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  illegal  line  end  in  character  literal	130	None	replace
278	[BUG]  [BUGGY]  result  |=  toWildcardType.isAssignableFrom(typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=  toWildcardType.isAssignableFrom(typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=  toWildcardType.isAssignableFrom(typeVarAssigns);	  return    true;    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	101	None	replace
279	[BUG]  [BUGGY]  result.put(toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result.put(toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result.put(toBound,  typeVarAssigns);	  return    true;    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	101	None	replace
280	[BUG]  [BUGGY]  safely(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  toLowerBounds,  typeVarAssigns))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
281	[BUG]  [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  bound,  typeVarAssigns))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
282	[BUG]  [BUGGY]  safe(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  toLowerBounds,  typeVarAssigns))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
283	[BUG]  [BUGGY]  safely(bound,  toBound,  toUpperBounds))  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  toUpperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  toUpperBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
284	[BUG]  [BUGGY]  if(toBound.contains(typeVarAssigns))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(toBound.contains(typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(toBound.contains(typeVarAssigns))  {  return  true;  }	  return    true;    if(typeVarAssigns.contains(toBound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
285	[BUG]  [BUGGY]  if(typeVarAssigns.contains(toBound))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(toBound))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(toBound))  {  return  true;  }	  return    true;    if(typeVarAssigns.contains(toBound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
286	[BUG]  [BUGGY]  if(toBound.contains(typeVarAssigns)||  toBound.contains(typeVarAssigns))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(toBound.contains(typeVarAssigns)||  toBound.contains(typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(toBound.contains(typeVarAssigns)||  toBound.contains(typeVarAssigns))  {  return  true;  }	  return    true;    if(typeVarAssigns.contains(toBound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
287	[BUG]  [BUGGY]  result  =  toBound.contains(typeVarAssigns);  if(typeVarAssigns.contains(toBound))  {  return  true;  }  [CE]  cannot  find  symbol  result  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  =  toBound.contains(typeVarAssigns);  if(typeVarAssigns.contains(toBound))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  =  toBound.contains(typeVarAssigns);  if(typeVarAssigns.contains(toBound))  {  return  true;  }	  return    true;    if(typeVarAssigns.contains(toBound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	26	None	replace
288	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  -  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  -  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	35	None	replace
289	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  +  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[length()  +  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	35	None	replace
290	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.length()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.length()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.length()  ]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	35	None	replace
291	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	135	None	add
292	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
293	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  [CE]  <identifier>  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	135	None	add
294	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toWildcard,  bound,  typeVarAssigns))  {  return  false;  }	  parent    ==    null    &&!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	108	None	replace
295	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  }	  parent    ==    null    &&!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	108	None	replace
296	[BUG]  [BUGGY]  tryOffsets(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    toLowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
297	[BUG]  [BUGGY]  tryOffsets(toBound,  toUpperBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toUpperBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toUpperBounds,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    toLowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
298	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  catch(NoClassDefFoundError  e)  {  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
299	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  catch(Exception  e)  {  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  catch(Exception  e)  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  catch(Exception  e)  {  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	69	None	replace
300	[BUG]  [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	5	None	replace
301	[BUG]  [BUGGY]  degreesCandidate(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
302	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	40	2	add
303	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	40	2	add
304	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	40	2	add
305	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	compilable	  [FE]  AssertionError  	40	2	add
306	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
307	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
308	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
309	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  toLowerBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  toLowerBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  toLowerBounds)  {  if(!isAssignable(toBound,	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
310	[BUG]  [BUGGY]  if(!wildcardType.isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!wildcardType.isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!wildcardType.isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
311	[BUG]  [BUGGY]  if(!isAssignedable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignedable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignedable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
312	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
313	[BUG]  [BUGGY]  if(typeVarAssigns!=  null)  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns!=  null)  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns!=  null)  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
314	[BUG]  [BUGGY]  if(typeVarAssigns  ==  null)  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns  ==  null)  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns  ==  null)  {  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
315	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if(!isAssignable(type,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if(!isAssignable(type,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if(!isAssignable(type,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
316	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	165	None	replace
317	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.values().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns    	non-compiled	[CE]  ')'  expected	165	None	replace
318	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
319	[BUG]  [BUGGY]  tryOffsets(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
320	[BUG]  [BUGGY]  tryOffsets(toBound,  toWildcardType,  wildcardType))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toWildcardType,  wildcardType))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toWildcardType,  wildcardType))  {  return  false;  }	  tryOffsets(toBound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	66	None	replace
321	[BUG]  [BUGGY]  degreesCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    toUpperBounds,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
322	[BUG]  [BUGGY]  degreesCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;	  degreesCandidate(toBound,    toUpperBounds,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	7	None	replace
323	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	99	None	replace
324	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
325	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toWildcardType.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	168	None	replace
326	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().next();  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet().iterator().next();	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	45	None	replace
327	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.keySet().iterator().next();  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.keySet().iterator().next();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.keySet().iterator().next();	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	45	None	replace
328	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getName()));  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getName()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ").equals(bound.getName()));	  throw    new    IllegalArgumentException(   "   ".equals(bound.getName()));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
329	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound.getName());  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  bound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  bound.getName());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getName()));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
330	[BUG]  [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  safely(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
331	[BUG]  [BUGGY]  safe(toBound,  bound,  lowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  bound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  bound,  lowerBounds))  {  return  false;  }	  safely(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
332	[BUG]  [BUGGY]  safe(toBound,  bound,  false))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  bound,  false))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  bound,  false))  {  return  false;  }	  safely(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
333	[BUG]  [BUGGY]  safe(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
334	[BUG]  [BUGGY]  safe(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
335	[BUG]  [BUGGY]  safe(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
336	[BUG]  [BUGGY]  safe(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
337	[BUG]  [BUGGY]  safe(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
338	[BUG]  [BUGGY]  safely(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toWildcardType))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
339	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ". ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	59	None	replace
340	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".   ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	59	None	replace
341	[BUG]  [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	170	None	replace
342	[BUG]  [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	170	None	replace
343	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  typeVarAssigns)||  isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	170	None	replace
344	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(bound));  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(bound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(bound));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
345	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  bound);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ",  bound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ",  bound);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
346	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(toBound));  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".equals(toBound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ".equals(toBound));	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
347	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns);	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
348	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	68	None	replace
349	[BUG]  [BUGGY]  tryOffsets(toBound,  toLowerBounds,  upperBounds);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toLowerBounds,  upperBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toLowerBounds,  upperBounds);	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
350	[BUG]  [BUGGY]  While(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  While(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
351	[BUG]  [BUGGY]  While(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  While(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
352	[BUG]  [BUGGY]  while(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toBound,  toUpperBounds,  typeVarAssigns))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
353	[BUG]  [BUGGY]  while(!isAssignable(toBound,  bound,  toUpperBounds))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toBound,  bound,  toUpperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toBound,  bound,  toUpperBounds))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
354	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
355	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
356	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
357	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	98	None	replace
358	[BUG]  [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  lowerBounds))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	98	None	replace
359	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  *  1]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  *  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  *  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[size()    -    1]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	34	None	replace
360	[BUG]  [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  lowerBounds,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	138	None	replace
361	[BUG]  [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(toBound,  toWildcardType,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	138	None	replace
362	[BUG]  [BUGGY]  safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  	32	None	replace
363	[BUG]  [BUGGY]  safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  	32	None	replace
364	[BUG]  [BUGGY]  safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeToSubtype(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  	32	None	replace
365	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  -  1]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	117	None	replace
366	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  +  1]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	117	None	replace
367	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	55	None	add
368	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
369	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
370	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  [CE]  <identifier>  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new	  	non-compiled	[CE]  <identifier>  expected	55	None	add
371	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	55	2	add
372	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   "     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionError  	55	2	add
373	[BUG]  [BUGGY]  if(typeVarAssigns.contains(toBound))  {  toWildcardType  =  toWildcardType.getFunctionType();  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(toBound))  {  toWildcardType  =  toWildcardType.getFunctionType();  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(toBound))  {  toWildcardType  =  toWildcardType.getFunctionType();  }	  ==    [Delete]    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
374	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  bound,  typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=!isAssignable(bound,  bound,  typeVarAssigns);	  return    true;    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	161	None	replace
375	[BUG]  [BUGGY]  result  |=!isAssignable(bound,  bound,  typeVarAssigns))  {  return  result;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=!isAssignable(bound,  bound,  typeVarAssigns))  {  return  result;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=!isAssignable(bound,  bound,  typeVarAssigns))  {  return  result;  }	  return    true;    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	161	None	replace
376	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
377	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName(),  toBound);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound.getName(),  toBound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound.getName(),  toBound);	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
378	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound.getName());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  AssertionError( "Unknown  type: "  +  bound,  toBound.getName());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
379	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
380	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  &&  bound.getType()!=  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
381	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toUpperBounds.size()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toUpperBounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
382	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toUpperBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toUpperBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toUpperBounds.size()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toUpperBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
383	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns);	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
384	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns));	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
385	[BUG]  [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  toBound.getType()  ==  Token.FUNCTION  &&  bound.getType()!=  Token.VAR);	  return(bound,    toBound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	158	None	replace
386	[BUG]  [BUGGY]  Type[]  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
387	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
388	[BUG]  [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
389	[BUG]  [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
390	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toLowerBounds);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    type);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	144	None	replace
391	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    type);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	144	None	replace
392	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    type);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	144	None	replace
393	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toBound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    type);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	144	None	replace
394	[BUG]  [BUGGY]  Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  wildcardType.getFunctionDeclaration(bound,  toLowerBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
395	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toUpperBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toUpperBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toUpperBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
396	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds,  wildcardType);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds,  wildcardType);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toLowerBounds,  wildcardType);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
397	[BUG]  [BUGGY]  Type  toWildcardType  =  toBound.getWildcardType(bound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toBound.getWildcardType(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toBound.getWildcardType(bound);	  Type    wildcardType    =    toBound.getWildcardType(bound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	106	None	replace
398	[BUG]  [BUGGY]  Type  boundType  =  toBound.getWildcardType(bound);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toBound.getWildcardType(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toBound.getWildcardType(bound);	  Type    wildcardType    =    toBound.getWildcardType(bound);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
399	[BUG]  [BUGGY]  Type  toBoundType  =  toBound.getWildcardType(bound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toBound.getWildcardType(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound.getWildcardType(bound,  typeVarAssigns);	  Type    wildcardType    =    toBound.getWildcardType(bound);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
400	[BUG]  [BUGGY]  Type  toBoundType  =  toBound.getWildcardType(bound);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toBound.getWildcardType(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound.getWildcardType(bound);	  Type    wildcardType    =    toBound.getWildcardType(bound);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
401	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  typeVarAssigns))  {  return  false;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
402	[BUG]  [BUGGY]  safe(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toWildcardType,  typeVarAssigns))  {  return  true;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
403	[BUG]  [BUGGY]  Type  toWildcardType  =  type.getFunctionDeclaration(bound,  toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  type.getFunctionDeclaration(bound,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  type.getFunctionDeclaration(bound,  toBound);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
404	[BUG]  [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toBound);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
405	[BUG]  [BUGGY]  safe(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	48	None	replace
406	[BUG]  [BUGGY]  Type  toBoundType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toWildcardType.getFunctionDeclaration(bound,  toBound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
407	[BUG]  [BUGGY]  Type  toBoundType  =  toWildcardType.getFunctionDeclaration(bound);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toWildcardType.getFunctionDeclaration(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toWildcardType.getFunctionDeclaration(bound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
408	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	133	None	replace
409	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
410	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)	133	None	replace
411	[BUG]  [BUGGY]  tryToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryToWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  triesToWildcardType(toBound,    toLowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	62	None	replace
412	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false	  	non-compiled	[CE]  ';'  expected	51	None	add
413	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound,    bound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	99	None	replace
414	[BUG]  [BUGGY]  safely(toBound,  lowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  lowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  lowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
415	[BUG]  [BUGGY]  sweeper(typeVarAssigns,  toBound,  lowerBounds));  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  sweeper(typeVarAssigns,  toBound,  lowerBounds));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	sweeper(typeVarAssigns,  toBound,  lowerBounds));	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
416	[BUG]  [BUGGY]  safely(bound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  typeVarAssigns))  {	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	41	None	replace
417	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    return    true;    	compilable	  [FE]  AssertionError  	22	2	replace
418	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    return    true;    	compilable	  [FE]  AssertionError  	22	2	replace
419	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false	  	non-compiled	[CE]  ';'  expected	67	None	add
420	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	167	2	replace
421	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	167	2	replace
422	[BUG]  [BUGGY]  While(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  While(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	47	None	replace
423	[BUG]  [BUGGY]  while(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
424	[BUG]  [BUGGY]  while(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {	  While(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
425	[BUG]  [BUGGY]  return(typeVarAssigns.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(typeVarAssigns.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(typeVarAssigns.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    typeVarAssigns.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
426	[BUG]  [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(type.getType()  ==  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    typeVarAssigns.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
427	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.VAR);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >>  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
428	[BUG]  [BUGGY]  safely(bound,  toLowerBounds))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toLowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toLowerBounds))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
429	[BUG]  [BUGGY]  safely(bound.getType()!=  ToWildcardType.NONE))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound.getType()!=  ToWildcardType.NONE))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound.getType()!=  ToWildcardType.NONE))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
430	[BUG]  [BUGGY]  safely(bound.getType()!=  ToWildcardType.NONE);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound.getType()!=  ToWildcardType.NONE);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound.getType()!=  ToWildcardType.NONE);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
431	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol	74	None	add
432	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  lowerBounds))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  lowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  lowerBounds))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
433	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  upperBounds))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  upperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  upperBounds))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
434	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.lowerBounds().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.lowerBounds().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.lowerBounds().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	44	None	replace
435	[BUG]  [BUGGY]  return(bound.getType()  >>  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  >>  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  >>  Token.FUNCTION  ||  bound.getType()!=  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
436	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
437	[BUG]  [BUGGY]  triesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	166	None	replace
438	[BUG]  [BUGGY]  triesCandidate(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  triesCandidate(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	triesCandidate(toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	166	None	replace
439	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[lowerBounds.length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[lowerBounds.length()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[lowerBounds.length()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	117	None	replace
440	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.length()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.length()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	117	None	replace
441	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  binding  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  binding	134	None	replace
442	[BUG]  [BUGGY]  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  binding  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  binding	134	None	replace
443	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	134	None	replace
444	[BUG]  [BUGGY]  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  binding,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
445	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  typeVarAssigns);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  typeVarAssigns);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
446	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  typeVarAssigns);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  typeVarAssigns);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
447	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  lowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  lowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  lowerBounds);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
448	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
449	[BUG]  [BUGGY]  Context.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Context.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	38	None	replace
450	[BUG]  [BUGGY]  Context.checkState(!isAssignable(toBound,  lowerBounds,  typeVarAssigns));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!isAssignable(toBound,  lowerBounds,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Context.checkState(!isAssignable(toBound,  lowerBounds,  typeVarAssigns));	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	38	None	replace
451	[BUG]  [BUGGY]  Context.checkState(!isAssignable(toBound,  toLowerBounds));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Context.checkState(!isAssignable(toBound,  toLowerBounds));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Context.checkState(!isAssignable(toBound,  toLowerBounds));	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	38	None	replace
452	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[lowerBounds.length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[lowerBounds.length()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[lowerBounds.length()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
453	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.length()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.length()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.length()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[length()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	78	None	replace
454	[BUG]  [BUGGY]  Type  toBoundType  =  toBound.cloneTree().getWildcardType();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toBoundType  =  toBound.cloneTree().getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toBoundType  =  toBound.cloneTree().getWildcardType();	  Type    toBoundType    =    toBound.getWildcardType();    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
455	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toUpperBounds.toArray(new  Type[bounds.size()  ]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bounds.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	160	None	replace
456	[BUG]  [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);	  return(bound,    toBound.getType()    ==    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  ')'  expected	158	None	replace
457	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	164	2	replace
458	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	164	2	replace
459	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigneds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigneds))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	164	None	replace
460	[BUG]  [BUGGY]  degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
461	[BUG]  [BUGGY]  degreesCandidate(toBound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  upperBounds,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
462	[BUG]  [BUGGY]  safeGet(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeGet(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeGet(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	72	None	replace
463	[BUG]  [BUGGY]  degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
464	[BUG]  [BUGGY]  degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	5	None	replace
465	[BUG]  [BUGGY]  degreesCandidate(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
466	[BUG]  [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(!isAssignable(bound,  toWildcardType,  typeVarAssigns));  [CE]  cannot  find  symbol  Preconditions  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Preconditions.checkState(!isAssignable(bound,  toWildcardType,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Preconditions.checkState(!isAssignable(bound,  toWildcardType,  typeVarAssigns));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	114	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));  [CE]  cannot  find  symbol  Preconditions  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Preconditions.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Preconditions.checkState(!isAssignable(bound,  toBound,  typeVarAssigns));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	114	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkState(!toWildcardType.isSubtype(bound));  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Preconditions.checkState(!toWildcardType.isSubtype(bound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Preconditions.checkState(!toWildcardType.isSubtype(bound));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkState(!isAssignable(bound,  toBound));  [CE]  cannot  find  symbol  Preconditions  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Preconditions.checkState(!isAssignable(bound,  toBound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Preconditions.checkState(!isAssignable(bound,  toBound));	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  cannot  find  symbol  Preconditions	114	None	replace
471	[BUG]  [BUGGY]  safelyBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  safelyBounds  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safelyBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safelyBounds  =  substituteTypeVariables(toBound,  typeVarAssigns);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol  safelyBounds	32	None	replace
472	[BUG]  [BUGGY]  safelyBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  safelyBounds  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safelyBounds  =  substituteTypeVariables(toBound,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safelyBounds  =  substituteTypeVariables(toBound,  toLowerBounds);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol  safelyBounds	32	None	replace
473	[BUG]  [BUGGY]  safelyBounds  =  substituteTypeVariables(bound,  typeVarAssigns);  [CE]  cannot  find  symbol  safelyBounds  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safelyBounds  =  substituteTypeVariables(bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safelyBounds  =  substituteTypeVariables(bound,  typeVarAssigns);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol  safelyBounds	32	None	replace
474	[BUG]  [BUGGY]  safelyBounds  =  substituteTypeVariables(bound,  toLowerBounds);  [CE]  cannot  find  symbol  safelyBounds  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safelyBounds  =  substituteTypeVariables(bound,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safelyBounds  =  substituteTypeVariables(bound,  toLowerBounds);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol  safelyBounds	32	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	return!isAssignable(bound,  toBound,  typeVarAssigns);	  return!isAssignable(bound,    bound,    typeVarAssigns);    	compilable	  [FE]  AssertionError  	172	2	replace
476	[BUG]  [BUGGY]  return!isAssignable(bound,  toBound,  typeVarAssigns);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,  toBound,  typeVarAssigns);	  return!isAssignable(bound,    bound,    typeVarAssigns);    	compilable	  [FE]  AssertionError  	172	2	replace
477	[BUG]  [BUGGY]  Type  toWildcardType  =  type.getFunctionDeclaration(bound,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  type.getFunctionDeclaration(bound,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  type.getFunctionDeclaration(bound,  toLowerBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
478	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
479	[BUG]  [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toLowerBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
480	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
481	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
482	[BUG]  [BUGGY]  result  =  true;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  result  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  =  true;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  =  true;  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	101	None	replace
483	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  lowerBounds))  {  return  false;  }	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
484	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  upperBounds))  {  return  false;  }	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
485	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  >>    	compilable	  [FE]  AssertionError  	154	2	replace
486	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  >>    	compilable	  [FE]  AssertionError  	154	2	replace
487	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(bound,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  toBound  =  substituteTypeVariables(bound,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	toBound  =  substituteTypeVariables(bound,  toLowerBounds);	  >>    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	154	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  >>    	compilable	  [FE]  AssertionError  	154	2	replace
489	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  >>    	compilable	  [FE]  AssertionError  	154	2	replace
490	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.getType());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.getType());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
491	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.getType());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.getType());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  toBound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
492	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getType());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getType());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
493	[BUG]  [BUGGY]  while(!isAssignable(toBound,  bound,  typeVarAssigns)&&!wildcardType.isAssignable(toBound,  toLowerBounds))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(toBound,  bound,  typeVarAssigns)&&!wildcardType.isAssignable(toBound,  toLowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(toBound,  bound,  typeVarAssigns)&&!wildcardType.isAssignable(toBound,  toLowerBounds))  {	  While(!isAssignable(toWildcard,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
494	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	161	None	replace
495	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	161	None	replace
496	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	161	None	replace
497	[BUG]  [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  lowerBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
498	[BUG]  [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  lowerBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
499	[BUG]  [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  typeVarAssigns))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
500	[BUG]  [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.VAR);    	non-compiled	[CE]  ')'  expected	80	None	replace
501	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
502	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
503	[BUG]  [BUGGY]  parent!=  null;  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
504	[BUG]  [BUGGY]  forceReturn(bound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  forceReturn(bound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	forceReturn(bound,  toLowerBounds,  typeVarAssigns);	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
505	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(bound));  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(bound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalStateException( " ".equals(bound));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	163	None	replace
506	[BUG]  [BUGGY]  Type  wildcardType  =  toBound.getWildcardType(bound,  typeVarAssigns);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toBound.getWildcardType(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toBound.getWildcardType(bound,  typeVarAssigns);	  Type    wildcardType    =    toBound.getWildcardType(bound);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	106	None	replace
507	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
508	[BUG]  [BUGGY]  safe(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  safely(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
509	[BUG]  [BUGGY]  safe(toBound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(toBound,  upperBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(toBound,  upperBounds,  typeVarAssigns))  {  return  false;  }	  safely(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
510	[BUG]  [BUGGY]  safely(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  safely(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	97	None	replace
511	[BUG]  [BUGGY]  safely(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
512	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	170	None	replace
513	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  AssertionError  	170	2	replace
514	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	compilable	  [FE]  AssertionError  	170	2	replace
515	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	53	None	replace
516	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)	53	None	replace
517	[BUG]  [BUGGY]  if(!isWildcardType(toBound,  typeVarAssigns))  {  return  false;  }  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(toBound,  typeVarAssigns))  {  return  false;  }  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(toBound,  typeVarAssigns))  {  return  false;  }  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
518	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    upperBounds    =    toUpperBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
519	[BUG]  [BUGGY]  safely(toBound,  lowerBounds))  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  lowerBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  lowerBounds))  {	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
520	[BUG]  [BUGGY]  safely(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	107	None	replace
521	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns));	  degrees.checkState(!isAssignable(toBound,    bound,    typeVarAssigns));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	71	None	replace
522	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  lowerBounds,  typeVarAssigns));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  lowerBounds,  typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  lowerBounds,  typeVarAssigns));	  degrees.checkState(!isAssignable(toBound,    bound,    typeVarAssigns));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	71	None	replace
523	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;	  parent!=    null    &&!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	125	None	replace
524	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBo  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBo  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBo	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  ')'  expected	168	None	replace
525	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  ')'  expected	130	None	replace
526	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  ')'  expected	130	None	replace
527	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  ')'  expected	130	None	replace
528	[BUG]  [BUGGY]  while(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  while(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	while(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {	  While(!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
529	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
530	[BUG]  [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  }	  ==    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
531	[BUG]  [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  ==    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
532	[BUG]  [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  ==    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
533	[BUG]  [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  continue;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  continue;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(typeVarAssigns.contains(bound))  {  toBound  =  substituteTypeVariables(toBound,  bound);  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  continue;  }	  ==    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
534	[BUG]  [BUGGY]  Type  boundType  =  wildcardType.getFunctionDeclaration(bound);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  wildcardType.getFunctionDeclaration(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  wildcardType.getFunctionDeclaration(bound);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
535	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(typeVarAssigns);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
536	[BUG]  [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
537	[BUG]  [BUGGY]  safe(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
538	[BUG]  [BUGGY]  parent!=  null;  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
539	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
540	[BUG]  [BUGGY]  parent!=  null;  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	23	None	replace
541	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  1]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    +    1]);    	non-compiled	[CE]  ']'  expected	33	None	replace
542	[BUG]  [BUGGY]  allowNull(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowNull(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowNull(bound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNull(toBound,    toLowerBounds))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
543	[BUG]  [BUGGY]  safely(toBound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNull(toBound,    toLowerBounds))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
544	[BUG]  [BUGGY]  allowNull(toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowNull(toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowNull(toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNull(toBound,    toLowerBounds))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
545	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }	  	non-compiled	[CE]  unreachable  statement	171	None	add
546	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  for(Type  bound  :  toLowerBounds)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  }  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  for(Type  bound  :  toLowerBounds)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  for(Type  bound  :  toLowerBounds)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  }	  	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	171	None	add
547	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  for(Type  bound  :  toLowerBounds)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  for(Type  bound  :  toLowerBounds)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  for(Type  bound  :  toLowerBounds)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
548	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns);  if(toLowerBounds!=  null)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns);  if(toLowerBounds!=  null)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns);  if(toLowerBounds!=  null)  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }	  	non-compiled	[CE]  ')'  expected	171	None	add
549	[BUG]  [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toWildcardType);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toWildcardType);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound,  toWildcardType);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	90	None	replace
550	[BUG]  [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  typeVarAssigns.getFunctionDeclaration(bound);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	90	None	replace
551	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  '('  or  '['  expected	58	None	add
552	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ".);  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  Il	  	non-compiled	[CE]  <identifier>  expected	58	None	add
553	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	138	None	replace
554	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	138	None	replace
555	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	138	None	replace
556	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
557	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
558	[BUG]  [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
559	[BUG]  [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	75	None	replace
560	[BUG]  [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
561	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	54	None	replace
562	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssignable(toBound,  bound,  toUpperBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssignable(toBound,  bound,  toUpperBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toWildcardType))  {  return  false;  }  if(!isAssignable(toBound,  bound,  toUpperBounds))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)	54	None	replace
563	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	54	None	replace
564	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds))  {  return  false;  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	54	None	replace
565	[BUG]  [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	155	None	replace
566	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	155	None	replace
567	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	155	2	replace
568	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	compilable	  [FE]  AssertionError  	155	2	replace
569	[BUG]  [BUGGY]  if(!isAssignable(toBound,  upperBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  upperBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  upperBounds))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[])	155	None	replace
570	[BUG]  [BUGGY]  Type  toWildcardType  =  bound.getWildcardType(toBound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  bound.getWildcardType(toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  bound.getWildcardType(toBound);	  Type    toWildcardType    =    bound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
571	[BUG]  [BUGGY]  Type  toWildcardType  =  bound.getWildcardType(type);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  bound.getWildcardType(type);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  bound.getWildcardType(type);	  Type    toWildcardType    =    bound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
572	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  parent!=    null    &&!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	122	None	replace
573	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	105	2	replace
574	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " "  +  toBound);	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	105	2	replace
575	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(type,  bound);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(type,  bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(type,  bound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    type);    	non-compiled	[CE]  cannot  find  symbol	144	None	replace
576	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toLowerBounds);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type,  toLowerBounds);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    type);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	144	None	replace
577	[BUG]  [BUGGY]  try  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	153	None	replace
578	[BUG]  [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	153	None	replace
579	[BUG]  [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  '{'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	153	None	replace
580	[BUG]  [BUGGY]  safely(bound.getType()  ==  ToWildcardType.NONE))  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound.getType()  ==  ToWildcardType.NONE))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound.getType()  ==  ToWildcardType.NONE))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    	non-compiled	[CE]  ';'  expected	136	None	replace
581	[BUG]  [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  cause  =  new  IllegalStateException( "   ");  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException(   "   ");  Throwable  cause  =  new  IllegalStateException( "   ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw    new    IllegalStateException(   "   ");    Throwable  cause  =  new  IllegalStateException( "   ");	  	non-compiled	[CE]  unreachable  statement	162	None	add
582	[BUG]  [BUGGY]  Type  wildcardType  =  toBound.toWildcardType(bound);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toBound.toWildcardType(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toBound.toWildcardType(bound);	  Type    wildcardType    =    toBound.toWildcardType();    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	146	None	replace
583	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  lowerBounds))  {  return  false;  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  lowerBounds))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  lowerBounds))  {  return  false;	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	119	None	replace
584	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  upperBounds))  {  return  false;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  upperBounds))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  upperBounds))  {  return  false;	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	119	None	replace
585	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
586	[BUG]  [BUGGY]  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
587	[BUG]  [BUGGY]  if(!isWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
588	[BUG]  [BUGGY]  safeTree(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  toBound,  lowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safeTree(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
589	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
590	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  false);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  false);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  false);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
591	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	27	None	replace
592	[BUG]  [BUGGY]  safely(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    toUpperBounds,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
593	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().first();  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().iterator().first();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.keySet().iterator().first();	  Type[]    upperBounds    =    toLowerBounds.keySet().iterator().next();    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	45	None	replace
594	[BUG]  [BUGGY]  allowReturn(typeVarAssigns,  toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(typeVarAssigns,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(typeVarAssigns,  toBound,  typeVarAssigns);	  allowReturn(bound,    toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
595	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
596	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	69	None	replace
597	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
598	[BUG]  [BUGGY]  if(!isWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
599	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  bound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  bound.getName());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getName()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
600	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getName());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( " "  +  bound.getName());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getName()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
601	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.getName());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  toBound.getName());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getName()));    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
602	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  lowerBounds);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  lowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  lowerBounds);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
603	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  lowerBounds,  typeVarAssigns);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  lowerBounds,  typeVarAssigns);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
604	[BUG]  [BUGGY]  try  {  toBound  =  substituteTypeVariables(toBound,  bound,  typeVarAssigns);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  toBound  =  substituteTypeVariables(toBound,  bound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  toBound  =  substituteTypeVariables(toBound,  bound,  typeVarAssigns);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
605	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[toBound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  bound.toArray(new  Type[toBound.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  bound.toArray(new  Type[toBound.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	86	None	replace
606	[BUG]  [BUGGY]  result  |=  toBound.equals(typeVarAssigns)&&!isAssignable(toBound,  bound))  {  return  true;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=  toBound.equals(typeVarAssigns)&&!isAssignable(toBound,  bound))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=  toBound.equals(typeVarAssigns)&&!isAssignable(toBound,  bound))  {  return  true;  }	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
607	[BUG]  [BUGGY]  result  |=  toBound.equals(typeVarAssigns)&&!isAssignable(toBound,  bound))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=  toBound.equals(typeVarAssigns)&&!isAssignable(toBound,  bound))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=  toBound.equals(typeVarAssigns)&&!isAssignable(toBound,  bound))  {  return  false;  }	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  ';'  expected	25	None	replace
608	[BUG]  [BUGGY]  result  |=  toBound.equals(typeVarAssigns)?  true  :  toBound.equals(typeVarAssigns);  [CE]  cannot  find  symbol  result  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  |=  toBound.equals(typeVarAssigns)?  true  :  toBound.equals(typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  |=  toBound.equals(typeVarAssigns)?  true  :  toBound.equals(typeVarAssigns);	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	25	None	replace
609	[BUG]  [BUGGY]  result  =  true;  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }  [CE]  cannot  find  symbol  result  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  result  =  true;  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	result  =  true;  if(!isAssignable(bound,  toLowerBounds))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toLowerBounds))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  result	24	None	replace
610	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  toBound);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " "  +  toBound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " "  +  toBound);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
611	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( ", ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( ", ");	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
612	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Class  <?>  wildcardType  =  toWildcardType.getRawClass();	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
613	[BUG]  [BUGGY]  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Class  <?>  toWildcardType  =  toWildcardType.getRawClass();	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
614	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getFunctionDeclaration();  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  toWildcardType.getFunctionDeclaration();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Class  <?>  wildcardType  =  toWildcardType.getFunctionDeclaration();	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
615	[BUG]  [BUGGY]  Class  <?>  wildcardType  =  typeVarAssigns.get(bound);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Class  <?>  wildcardType  =  typeVarAssigns.get(bound);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Class  <?>  wildcardType  =  typeVarAssigns.get(bound);	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
616	[BUG]  [BUGGY]  tryOffsets(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  tryOffsets(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	tryOffsets(bound,  lowerBounds,  typeVarAssigns))  {  return  false;  }	  tryOffsets(toBound,    lowerBounds,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	61	None	replace
617	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLopperBounds.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLopperBounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLopperBounds.size()  ]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toUpperBounds.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	29	None	replace
618	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typesVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	43	2	replace
619	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typesVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	43	2	replace
620	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typesVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	43	2	replace
621	[BUG]  [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typesVarAssigns))    {    return    false;    }    	compilable	  [FE]  AssertionError  	43	2	replace
622	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;	  parent!=    null    &&!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	96	None	replace
623	[BUG]  [BUGGY]  if(!typeVarAssigns.contains(toBound))  {  return  true;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!typeVarAssigns.contains(toBound))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!typeVarAssigns.contains(toBound))  {  return  true;  }	  return    true;    if(typeVarAssigns.contains(toBound))    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
624	[BUG]  [BUGGY]  safe(bound,  toBound,  upperBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  toBound,  upperBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  toBound,  upperBounds))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	98	None	replace
625	[BUG]  [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  lowerBounds))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	98	None	replace
626	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  ')'  expected	169	None	replace
627	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  ')'  expected	169	None	replace
628	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
629	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	39	None	replace
630	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  bound.getType()  >=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
631	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
632	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
633	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  lowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  lowerBounds))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
634	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  throwable  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	15	2	replace
635	[BUG]  [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  throwable  =  new  IllegalArgumentException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  throwable  =  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(       "       ");    throw    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	15	2	replace
636	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound,  toBound));  [CE]  no  suitable  method  found  for  equals(Type,Type)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".equals(bound,  toBound));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ".equals(bound,  toBound));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	non-compiled	[CE]  no  suitable  method  found  for  equals(Type,Type)	103	None	replace
637	[BUG]  [BUGGY]  safely(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	70	None	replace
638	[BUG]  [BUGGY]  if(toBound.isAssignable())  {  toBound  =  substituteTypeVariables(bound,  toLowerBounds);  }  else  {  toBound  =  substituteTypeVariables(toBound,  bound,  typeVarAssigns);  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(toBound.isAssignable())  {  toBound  =  substituteTypeVariables(bound,  toLowerBounds);  }  else  {  toBound  =  substituteTypeVariables(toBound,  bound,  typeVarAssigns);  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(toBound.isAssignable())  {  toBound  =  substituteTypeVariables(bound,  toLowerBounds);  }  else  {  toBound  =  substituteTypeVariables(toBound,  bound,  typeVarAssigns);  }	  >=    [Delete]    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
639	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
640	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false	  	non-compiled	[CE]  ';'  expected	40	None	add
641	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ", ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalArgumentException( ", ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	17	2	replace
642	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ", ");  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( ", ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( ", ");	  throw    new    IllegalArgumentException(       "       ");    Throwable    cause    =    new    IllegalArgumentException(   "       ");    	compilable	  [FE]  AssertionError  	17	2	replace
643	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB	  Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  ')'  expected	20	None	replace
644	[BUG]  [BUGGY]  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
645	[BUG]  [BUGGY]  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
646	[BUG]  [BUGGY]  if(!isWildcardType(toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
647	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBound.toArray(new  Type[bound.size()  ]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBound.toArray(new  Type[bound.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBound.toArray(new  Type[bound.size()  ]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	86	None	replace
648	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[bound.size()  -  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	86	None	replace
649	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;	  parent!=    null    &&!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	125	None	replace
650	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound,  typeVarAssigns);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(type,  bound,  typeVarAssigns);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
651	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  typeVarAssigns);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  typeVarAssigns);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  toBound,  typeVarAssigns);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
652	[BUG]  [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  toLowerBounds);  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  wildcardType  =  toWildcardType.getFunctionDeclaration(bound,  typeVarAssigns,  toLowerBounds);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    typeVarAssigns);    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	126	None	replace
653	[BUG]  [BUGGY]  try  ==  isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  '{'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  ==  isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  ==  isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  '{'  expected	60	None	replace
654	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  toLowerBounds))  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  toLowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  toLowerBounds))  {  return  false;  }	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	60	None	replace
655	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[bounds.size()  ]);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  lowerBounds  =  toBounds.toArray(new  Type[bounds.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  lowerBounds  =  toBounds.toArray(new  Type[bounds.size()  ]);	  Type[]    lowerBounds    =    toBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	76	None	replace
656	[BUG]  [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
657	[BUG]  [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(toBound.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
658	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  lowerBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  lowerBounds))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	54	None	replace
659	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  toLowerBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  toLowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  toLowerBounds))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	54	None	replace
660	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  return	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
661	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  return	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
662	[BUG]  [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return!isAssignable(bound,  bound,  typeVarAssigns);  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return!isAssignable(bound,    bound,    typeVarAssigns);    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return!isAssignable(bound,  bound,  typeVarAssigns);  }  else  {  Class  <?>  toWildcardType  =  toWildcardType.getRawClass();	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
663	[BUG]  [BUGGY]  parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
664	[BUG]  [BUGGY]  parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
665	[BUG]  [BUGGY]  parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns)||!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns)||!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <  N,  V>  parent  =  toWildcardType.getParent();  if(!isAssignable(parent,  bound,  typeVarAssigns)||!isAssignable(parent,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
666	[BUG]  [BUGGY]  degreesCandidate(toBound,  bound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degreesCandidate(toBound,  bound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degreesCandidate(toBound,  bound,  lowerBounds))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	5	None	replace
667	[BUG]  [BUGGY]  safely(bound,  toBound,  upperBounds))  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toBound,  upperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toBound,  upperBounds))  {	  safely(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	94	None	replace
668	[BUG]  [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
669	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns)&&!isWildcardType(toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns)&&!isWildcardType(toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns)&&!isWildcardType(toBound,  typeVarAssigns))  {	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
670	[BUG]  [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssigned(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssigned(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssigned(bound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
671	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(bound.getType()));  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(bound.getType()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalStateException( " ".equals(bound.getType()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
672	[BUG]  [BUGGY]  throw  new  IllegalStateException( " ".equals(bound.getName()));  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalStateException( " ".equals(bound.getName()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalStateException( " ".equals(bound.getName()));	  throw    new    IllegalStateException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
673	[BUG]  [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound,  bound.getName());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  AssertionError( "Unknown  type: "  +  toBound,  bound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  AssertionError( "Unknown  type: "  +  toBound,  bound.getName());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
674	[BUG]  [BUGGY]  Throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throw  new  AssertionError( "Unknown  type: "  +  toBound.getName());	  throw    new    AssertionError(   "Unknown    type:   "    +    bound.getName());    	non-compiled	[CE]  not  a  statement	173	None	replace
675	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  wildcardType);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  wildcardType);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns,  wildcardType);	  allowReturn(bound,    toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
676	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
677	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(toWildcardType,  bound,  typeVarAssigns))  {  return  false;	  parent    ==    null    ||!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  not  a  statement	148	None	replace
678	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns)||!isWildcardType(toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns)||!isWildcardType(toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns)||!isWildcardType(toBound,  typeVarAssigns))  {	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
679	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.VAR);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.VAR);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
680	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
681	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
682	[BUG]  [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  &&!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
683	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	75	None	replace
684	[BUG]  [BUGGY]  safelyCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safelyCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safelyCandidate(bound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  degreesCandidate(toBound,    toUpperBounds,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	7	None	replace
685	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  >>  ')'  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  >>  ')'  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound  >>  ')'	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound    	non-compiled	[CE]  ')'  expected	169	None	replace
686	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	  [Delete]    	compilable	  [FE]  AssertionError  	4	2	replace
687	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalStateException( " ");  }	  [Delete]    	compilable	  [FE]  AssertionError  	4	2	replace
688	[BUG]  [BUGGY]  safely(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  toWildcardType,  typeVarAssigns))  {  return  true;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  toWildcardType,  typeVarAssigns))  {  return  true;	  safely(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    	non-compiled	[CE]  ';'  expected	110	None	replace
689	[BUG]  [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        bound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,  bound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
690	[BUG]  [BUGGY]  safe(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
691	[BUG]  [BUGGY]  safely(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safely(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safely(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	93	None	replace
692	[BUG]  [BUGGY]  safe(bound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
693	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(bound.getName()));  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(bound.getName()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ").equals(bound.getName()));	  throw    new    IllegalArgumentException(   "   ".equals(bound.getName()));    	non-compiled	[CE]  	14	None	replace
694	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
695	[BUG]  [BUGGY]  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	}  else  {  Class  <?>  wildcardType  =  toWildcardType.getRawClass();	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
696	[BUG]  [BUGGY]  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getFunctionDeclaration();  [CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  }  else  {  Class  <?>  wildcardType  =  toWildcardType.getFunctionDeclaration();  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	}  else  {  Class  <?>  wildcardType  =  toWildcardType.getFunctionDeclaration();	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  variable  wildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
697	[BUG]  [BUGGY]  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	}  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
698	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);	  Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	28	None	replace
699	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  allowReturn(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	118	None	replace
700	[BUG]  [BUGGY]  parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
701	[BUG]  [BUGGY]  parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
702	[BUG]  [BUGGY]  parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ".   ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   ".   ");    }    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
703	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[type.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[type.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[type.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toBound,	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toBound,    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
704	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  bound,  toLowerBounds);  [CE]  'try'  without  'catch'  or  'finally'  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  bound,  toLowerBounds);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  bound,  toLowerBounds);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
705	[BUG]  [BUGGY]  try  {  isAssignable(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  isAssignable(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  isAssignable(toBound,  toLowerBounds,  typeVarAssigns);	  try    ==    isAssignable(toBound,    bound,    typeVarAssigns);    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	63	None	replace
706	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typeVarAssigned))  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(toBound,  bound,  typeVarAssigned))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(toBound,  bound,  typeVarAssigned))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	74	None	add
707	[BUG]  [BUGGY]  if(!isAssignable(bound,  binding,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  binding  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  binding,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  binding,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    binding,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  binding	134	None	replace
708	[BUG]  [BUGGY]  parent!=  null  &&!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null  &&!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null  &&!isAssignable(toBound,  toLowerBounds,  typeVarAssigns))  {  return  false;  }	  parent!=    null    &&!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	95	None	replace
709	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().toArray(new  Type[size()  ]);  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values().toArray(new  Type[size()  ]);  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.values().toArray(new  Type[size()  ]);  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	  Type[]    upperBounds    =    toLowerBounds.values().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	46	None	replace
710	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
711	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isWildcardType(toBound,  typeVarAssigns))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
712	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toWildcardType))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toWildcardType))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isWildcardType(bound,  toWildcardType))  {	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
713	[BUG]  [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toWildcardType,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
714	[BUG]  [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  toLowerBounds));  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  degrees.checkState(!isAssignable(toBound,  bound,  toLowerBounds));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	degrees.checkState(!isAssignable(toBound,  bound,  toLowerBounds));	  degrees.checkState(!isAssignable(toBound,    bound,    typeVarAssigns));    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	71	None	replace
715	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  toWildcardType  =  toWildcardType.getRawClass();  }  else  {  toWildcardType  =  toWildcardType.getRawClass();  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  toWildcardType  =  toWildcardType.getRawClass();  }  else  {  toWildcardType  =  toWildcardType.getRawClass();  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  toWildcardType  =  toWildcardType.getRawClass();  }  else  {  toWildcardType  =  toWildcardType.getRawClass();  }	  ==    [Delete]    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
716	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  toWildcardType  wildcardType  =  toWildcardType.getRawClass();  if(wildcardType!=  null)  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  toWildcardType  wildcardType  =  toWildcardType.getRawClass();  if(wildcardType!=  null)  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  toWildcardType  wildcardType  =  toWildcardType.getRawClass();  if(wildcardType!=  null)  {  return  false;  }	  ==    [Delete]    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
717	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  toLowerBounds);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  toLowerBounds);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  lowerBounds,  toLowerBounds);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toLowerBounds);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	92	None	replace
718	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  toWildcardType))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  bound,  toWildcardType))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  bound,  toWildcardType))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typesVarAssigns))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,WildcardType)	43	None	replace
719	[BUG]  [BUGGY]  parent!=  null;  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  true;  }	  return    true;    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	102	None	replace
720	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  wildcardType);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  wildcardType);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  wildcardType);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
721	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  type);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  type);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(bound,  type);	  Type    boundType    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
722	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	58	2	add
723	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ".     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ".       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionError  	58	2	add
724	[BUG]  [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  wildcardType))  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(bound,  toBound,  typeVarAssigns,  wildcardType))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(bound,  toBound,  typeVarAssigns,  wildcardType))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
725	[BUG]  [BUGGY]  allowReturn(type,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowReturn(type,  toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowReturn(type,  toBound,  typeVarAssigns))  {	  allowReturn(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	120	None	replace
726	[BUG]  [BUGGY]  safe(bound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safe(bound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safe(bound,  bound,  typeVarAssigns))  {  return  false;  }	  safely(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  ';'  expected	98	None	replace
727	[BUG]  [BUGGY]  parent  <!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <!isAssignable(bound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
728	[BUG]  [BUGGY]  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
729	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound,  bound.equals(typeVarAssigns));  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,boolean)  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " "  +  toBound,  bound.equals(typeVarAssigns));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " "  +  toBound,  bound.equals(typeVarAssigns));	  throw    new    IllegalArgumentException(   "   ".equals(bound));    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,boolean)	103	None	replace
730	[BUG]  [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigneds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  toWildcardType,  typeVarAssigneds))  {  return  false;  }	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toWildcardType,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	167	None	replace
731	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  -  1]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[bound.size()    ]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	18	None	replace
732	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	135	None	add
733	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  AssertionError  	135	2	add
734	[BUG]  [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",   ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(     "     ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",     ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",   ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,        bound,        typeVarAssigns))        {        throw        new        IllegalArgumentException(       "       ");        }        if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   ",       ");    }    if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( "   ");  }  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException(   ",   ");  }	  	compilable	  [FE]  AssertionError  	135	2	add
735	[BUG]  [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  bound))  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isAssignable(toBound,  bound))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isAssignable(toBound,  bound))  {  return  false;  }	  return    true;    if(!isAssignable(toBound,    bound))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	25	None	replace
736	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,  toBound,  lowerBounds))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	155	None	replace
737	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)||!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)||!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns)||!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
738	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)&&!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)&&!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns)&&!isAssigned(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
739	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  +  1]);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  +  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  +  1]);	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    -    1]);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	88	None	replace
740	[BUG]  [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  <!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
741	[BUG]  [BUGGY]  parent  ==  null  ||!parent.isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!parent.isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!parent.isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    return    false;    }    else    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  not  a  statement	170	None	replace
742	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  '  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  '	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  illegal  line  end  in  character  literal	130	None	replace
743	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  for(Type  upperBounds  :  upperBounds)  {  if(!isAssignable(toB  >>	  Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    for(Type    upperBounds    :    upperBounds)    {    if(!isAssignable(toB    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
744	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  >>  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  >>  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  toBound.getType()  >>  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    >>    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
745	[BUG]  [BUGGY]  Type[]  upperBounds  =  wildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  wildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  wildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns)	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns)    	non-compiled	[CE]  ')'  expected	44	None	replace
746	[BUG]  [BUGGY]  Type  toWildcardType  =  type.getWildcardType();  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  type.getWildcardType();  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  type.getWildcardType();	  Type    toWildcardType    =    bound.getWildcardType();    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
747	[BUG]  [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(bound,  bound,  typeVarAssigned))  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,  bound,  typeVarAssigns))  {  return  true;  }  if(!isAssignable(bound,  bound,  typeVarAssigned))  {  return  true;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    if(!isAssignable(bound,  bound,  typeVarAssigned))  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	137	None	add
748	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [CE]  <identifier>  expected  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwables.throw  new  IllegalArgumentException( " ".);	  Throwables.throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
749	[BUG]  [BUGGY]  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	}	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
750	[BUG]  [BUGGY]  parent!=  null;  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent!=  null;  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent!=  null;  if(!isWildcardType(bound,  toWildcardType,  typeVarAssigns))  {  return  false;  }	  return    true;    if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    true;    }    	non-compiled	[CE]  not  a  statement	161	None	replace
751	[BUG]  [BUGGY]  safeTree(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  toBound,  upperBounds))  {  throw  new  IllegalArgumentException( " ");  }	  safeTree(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
752	[BUG]  [BUGGY]  safeTree(bound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safeTree(bound,    toBound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	112	None	replace
753	[BUG]  [BUGGY]  safeTree(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  safeTree(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	safeTree(bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  safely(bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	113	None	replace
754	[BUG]  [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  'try'  without  'catch'  or  'finally'  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  try  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	try  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  try    ==    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	153	None	replace
755	[BUG]  [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(type.getType()  ==  Token.FUNCTION  ||  toBound.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    toBound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
756	[BUG]  [BUGGY]  Type  toWildcardType  =  toBound.getFunctionDeclaration(bound,  type);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toBound.getFunctionDeclaration(bound,  type);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toBound.getFunctionDeclaration(bound,  type);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
757	[BUG]  [BUGGY]  Type  toWildcardType  =  toBound.getFunctionDeclaration(bound);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toBound.getFunctionDeclaration(bound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toBound.getFunctionDeclaration(bound);	  Type    toWildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	91	None	replace
758	[BUG]  [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(bound,        toBound,        typeVarAssigns))        {        return        false;        }        if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol	67	None	add
759	[BUG]  [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(typeVarAssigns.contains(toBound))  {  if(!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
760	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)||!isWildcardType(bound,  toBound,  typeVarAssigns))  {	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
761	[BUG]  [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)&&!isWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)&&!isWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isWildcardType(bound,  toBound,  typeVarAssigns)&&!isWildcardType(bound,  toLowerBounds,  typeVarAssigns))  {	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
762	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)||!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)||!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns)||!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
763	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)&&!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigns)&&!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigns)&&!isAssignedable(toBound,  bound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignedable(toBound,    bound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
764	[BUG]  [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(type,  toBound);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  boundType  =  toWildcardType.getFunctionDeclaration(type,  toBound);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  boundType  =  toWildcardType.getFunctionDeclaration(type,  toBound);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
765	[BUG]  [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type);  [CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  toWildcardType  =  toWildcardType.getFunctionDeclaration(bound,  type);	  Type    wildcardType    =    toWildcardType.getFunctionDeclaration(bound,    toBound);    	non-compiled	[CE]  variable  toWildcardType  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	127	None	replace
766	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalStateException( " ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	105	2	replace
767	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalStateException( " ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalStateException( " ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	105	2	replace
768	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Unknown  type: ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	Throwable  cause  =  new  IllegalArgumentException( "Unknown  type: ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	105	2	replace
769	[BUG]  [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Unknown  type: ");  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throwable  cause  =  new  IllegalArgumentException( "Unknown  type: ");  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throwable  cause  =  new  IllegalArgumentException( "Unknown  type: ");	  Throwable    cause    =    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  AssertionError  	105	2	replace
770	[BUG]  [BUGGY]  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	}  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
771	[BUG]  [BUGGY]  }  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  }  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	}  else  if(!isWildcardType(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  type	166	None	replace
772	[BUG]  [BUGGY]  >>  [Delete]  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  >>  [Delete]  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	>>  [Delete]  else  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  throw  new  IllegalArgumentException( " ");  }	  if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(       "       ");    }    if(!isAssigned(toBound,    bound,    typeVarAssigns))    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  illegal  start  of  expression	166	None	replace
773	[BUG]  [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	38	None	replace
774	[BUG]  [BUGGY]  [Delete]  else  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  [Delete]  else  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	[Delete]  else  if(!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {	  if(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toWildcardType,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
775	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  type);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  type);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  type);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
776	[BUG]  [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  wildcardType);  [CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  wildcardType);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type  bound  =  toWildcardType.getFunctionDeclaration(bound,  wildcardType);	  Type    bound    =    toWildcardType.getFunctionDeclaration(bound);    	non-compiled	[CE]  variable  bound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	145	None	replace
777	[BUG]  [BUGGY]  parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
778	[BUG]  [BUGGY]  parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns))  {  return  false;  }	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
779	[BUG]  [BUGGY]  parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	parent  ==  null  ||!isWildcardType(bound,  toBound,  typeVarAssigns);	  if(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    If(!isAssignable(bound,    toBound,    typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	70	None	replace
780	[BUG]  [BUGGY]  allowNull(bounds,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  allowNull(bounds,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	allowNull(bounds,  toLowerBounds))  {  throw  new  IllegalArgumentException( " ");  }	  allowNull(toBound,    toLowerBounds))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	73	None	replace
781	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  ||  typeVarAssigns.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
782	[BUG]  [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound,  toBound.getType()  ==  Token.FUNCTION  ||  bound.getType()  ==  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    ||    bound.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  ')'  expected	83	None	replace
783	[BUG]  [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigneds))  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]        AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  if(!isAssignable(toBound,  bound,  typeVarAssigneds))  {  return  false;  }  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	if(!isAssignable(toBound,  bound,  typeVarAssigneds))  {  return  false;  }	  if(!isAssignable(bound,    bound,    typeVarAssigns))    {    return    false;    }    if(!isAssignable(bound,    bound,    typeVarAssigneds))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	164	None	replace
784	[BUG]  [BUGGY]  Type[]  upperBounds  =  wildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  wildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  wildcardType.keySet().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
785	[BUG]  [BUGGY]  Type[]  upperBounds  =  toWildcardType.size().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toWildcardType.size().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toWildcardType.size().iterator().next();  for(Type  upperBound  :  upperBounds)  {  if(!isAssignable(toBound,  bound,  typeVarAssigns))  {	  Type[]    upperBounds    =    toWildcardType.keySet().iterator().next();    for(Type    upperBound    :    upperBounds)    {    if(!isAssignable(toBound,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
786	[BUG]  [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.GETPROP);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.GETPROP);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()  ==  Token.FUNCTION  &&  typeVarAssigns.getType()!=  Token.GETPROP);	  return(bound.getType()    ==    Token.FUNCTION    &&    bound.getType()!=    Token.GETPROP);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
787	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ").equals(bound.getType()));  [CE]  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ").equals(bound.getType()));  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ").equals(bound.getType()));	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  	13	None	replace
788	[BUG]  [BUGGY]  Throw  new  IllegalArgumentException( " "  +  toBound.getType());  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Throw  new  IllegalArgumentException( " "  +  toBound.getType());  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Throw  new  IllegalArgumentException( " "  +  toBound.getType());	  throw    new    IllegalArgumentException(   "   ".equals(bound.getType()));    	non-compiled	[CE]  not  a  statement	13	None	replace
789	[BUG]  [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  1]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  1]);  [BUGGY]      return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	Type[]  upperBounds  =  toBounds.toArray(new  Type[typeVarAssigns.size()  1]);	  Type[]    upperBounds    =    toBounds.toArray(new    Type[typeVarAssigns.size()    +    1]);    	non-compiled	[CE]  ']'  expected	150	None	replace
790	[BUG]  [BUGGY]  While(!isAssignable(toBound,  bound,  toUpperBounds))  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  While(!isAssignable(toBound,  bound,  toUpperBounds))  {  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	While(!isAssignable(toBound,  bound,  toUpperBounds))  {	  While(!isAssignable(toWildcard,    bound,    typeVarAssigns))    {    	non-compiled	[CE]  ';'  expected	50	None	replace
791	[BUG]  [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  return(bound.getType()!=  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	return(bound.getType()!=  Token.FUNCTION  ||  toBound.getType()!=  Token.VAR);	  return(bound.getType()!=    Token.FUNCTION    ||    bound.getType()!=    Token.VAR);    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
792	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ".);  [CE]  <identifier>  expected  [FE]          AssertionError      [CONTEXT]      for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {  if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {      [BUGGY]  throw  new  IllegalArgumentException( " ".);  [BUGGY]      }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {    [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	throw  new  IllegalArgumentException( " ".);	  throw    new    IllegalArgumentException(       "       ");    Throw    new    IllegalArgumentException(   "       ");    	non-compiled	[CE]  <identifier>  expected	16	None	replace
