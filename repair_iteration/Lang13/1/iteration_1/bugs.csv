bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  }  catch  (Exception  ex)  {  [CE]  exception  IOException  has  already  been  caught  [FE]    SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]  }  catch  (Exception  ex)  {  [BUGGY]  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	}  catch  (Exception  ex)  {	}  catch  (ClassNotFoundException  ex)  {  	non-compiled	[CE]  exception  IOException  has  already  been  caught	1	None	replace
2	[BUG]  [BUGGY]  }  catch  (IOException  ex)  {  [CE]  exception  IOException  has  already  been  caught  [FE]      SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]  }  catch  (IOException  ex)  {  [BUGGY]  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	}  catch  (IOException  ex)  {	}  catch  (ClassNotFoundException  ex)  {  	non-compiled	[CE]  exception  IOException  has  already  been  caught	1	None	replace
3	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  ex  [FE]        SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    [BUGGY]  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	  	}  catch  (ClassNotFoundException  ex)  {  	non-compiled	[CE]  cannot  find  symbol  ex	1	None	replace
4	[BUG]  [BUGGY]    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [CE]  illegal  start  of  type  [FE]    SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")		non-compiled	[CE]  illegal  start  of  type	2	None	add
5	[BUG]  [BUGGY]    if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [CE]  illegal  start  of  type  [FE]      SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")		non-compiled	[CE]  illegal  start  of  type	2	None	add
6	[BUG]  [BUGGY]    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [CE]  illegal  start  of  type  [FE]        SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")		non-compiled	[CE]  illegal  start  of  type	2	None	add
7	[BUG]  [BUGGY]    if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [CE]  illegal  start  of  type  [FE]          SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")		non-compiled	[CE]  illegal  start  of  type	2	None	add
8	[BUG]  [BUGGY]    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  [CE]  illegal  start  of  type  [FE]            SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =		non-compiled	[CE]  illegal  start  of  type	2	None	add
9	[BUG]  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]    SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());		non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	add
10	[BUG]  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]      SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());		non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	add
11	[BUG]  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  classLoader.getClassLoader();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]        SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  classLoader.getClassLoader();  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    ClassLoaderAwareObjectInputStream  in  =  classLoader.getClassLoader();		non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	add
12	[BUG]  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]          SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());		non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	add
13	[BUG]  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject();  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject();		non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	add
14	[BUG]  [BUGGY]    if(object!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  unreachable  statement  [FE]    SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object!=  null)  {  throw  new  SerializationException( " ");  }		non-compiled	[CE]  unreachable  statement	2	None	add
15	[BUG]  [BUGGY]    if(object  ==  null)  {  throw  new  SerializationException( " ");  }  [CE]  unreachable  statement  [FE]      SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object  ==  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object  ==  null)  {  throw  new  SerializationException( " ");  }		non-compiled	[CE]  unreachable  statement	2	None	add
16	[BUG]  [BUGGY]    if(readObject!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  unreachable  statement  [FE]        SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(readObject!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(readObject!=  null)  {  throw  new  SerializationException( " ");  }		non-compiled	[CE]  unreachable  statement	2	None	add
17	[BUG]  [BUGGY]    if(readObject!=  null)  {  throw  new  SerializationException( " ")  + "  could  not  read  object: "  +  object.getClass().getName());  }  [CE]  [FE]          SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(readObject!=  null)  {  throw  new  SerializationException( " ")  + "  could  not  read  object: "  +  object.getClass().getName());  }  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(readObject!=  null)  {  throw  new  SerializationException( " ")  + "  could  not  read  object: "  +  object.getClass().getName());  }		non-compiled	[CE]  	2	None	add
18	[BUG]  [BUGGY]    if(object  ==  null)  {  throw  new  SerializationException( " ")  + "  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  }  [CE]  [FE]            SerializationException  [CONTEXT]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;  [BUGGY]    if(object  ==  null)  {  throw  new  SerializationException( " ")  + "  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  }  [BUGGY]  }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException( "ClassNotFoundException  while  reading  cloned  object  data ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  while  reading  cloned  object  data ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException( "IOException  on  closing  cloned  object  data  InputStream. ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	    if(object  ==  null)  {  throw  new  SerializationException( " ")  + "  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  }		non-compiled	[CE]  	2	None	add
