bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());  [CE]  cannot  find  symbol  classLoader  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(classLoader,    bais.getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	39	None	replace
2	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(classLoader,    bais.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	39	None	replace
3	[BUG]  [BUGGY]  if(bais!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  bais.getClassLoader());  }  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(bais!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  bais.getClassLoader());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(bais!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  bais.getClassLoader());  }	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(classLoader,    bais.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	39	None	replace
4	[BUG]  [BUGGY]  if(in!=  null)  {  aught(new  SerializationException( "   "))  +   "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  }  [CE]  not  a  statement  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(in!=  null)  {  aught(new  SerializationException( "   "))  +   "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(in!=  null)  {  aught(new  SerializationException( "   "))  +   "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  }	  aught(new    SerializationException(   "   "))    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	64	None	replace
5	[BUG]  [BUGGY]  aught(new  SerializationException( "ClassLoaderAwareObjectInputStream.class "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aught(new  SerializationException( "ClassLoaderAwareObjectInputStream.class "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(new  SerializationException( "ClassLoaderAwareObjectInputStream.class "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	  aught(new    SerializationException(   "   "))    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	64	None	replace
6	[BUG]  [BUGGY]  readObject  =  object  ==  null?(T)object.getClass().getName()  :  null;  [CE]  cannot  find  symbol  ex  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  object  ==  null?(T)object.getClass().getName()  :  null;  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object  ==  null?(T)object.getClass().getName()  :  null;	  readObject    =    object!=    null?(T)object.getClass().getName()    :    null;    	non-compiled	[CE]  cannot  find  symbol  ex	66	None	replace
7	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	11	None	replace
8	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	11	None	replace
9	[BUG]  [BUGGY]  if(object.getClass().getClassLoader()!=  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object.getClass().getClassLoader()!=  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object.getClass().getClassLoader()!=  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }	  aughtExceptionHandler.throwAsIOException(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	23	None	replace
10	[BUG]  [BUGGY]  if(object.getClass().getClassLoader()  ==  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object.getClass().getClassLoader()  ==  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object.getClass().getClassLoader()  ==  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }	  aughtExceptionHandler.throwAsIOException(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	23	None	replace
11	[BUG]  [BUGGY]  ObjectUtils.throwAsIOException(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ObjectUtils.throwAsIOException(bais,  object.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ObjectUtils.throwAsIOException(bais,  object.getClass().getClassLoader());	  aughtExceptionHandler.throwAsIOException(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
12	[BUG]  [BUGGY]  java.util.ArrayList.throwAsIOException(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  java.util.ArrayList.throwAsIOException(bais,  object.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	java.util.ArrayList.throwAsIOException(bais,  object.getClass().getClassLoader());	  aughtExceptionHandler.throwAsIOException(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
13	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)this.object.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)this.object.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)this.object.readObject();	  ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)object.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	48	None	replace
14	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.clone();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.clone();	  ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)object.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	48	None	replace
15	[BUG]  [BUGGY]  if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }	  if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	18	None	replace
16	[BUG]  [BUGGY]  reader  ==  null)  {  throw  new  SerializationException( " ");  }  [CE]  not  a  statement  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  reader  ==  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	reader  ==  null)  {  throw  new  SerializationException( " ");  }	  readObject    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
17	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  classLoader());  [CE]  cannot  find  symbol  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  classLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  classLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
18	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  classLoader);	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
19	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  classLoader.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  classLoader.getClass().getClassLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  classLoader.getClass().getClassLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
20	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  10  + ",  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  10  + ",  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)*  10  + ",  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	  aught(ClassLoaderAwareObjectInputStream.class)*    10    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	16	None	replace
21	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader);	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	30	None	replace
22	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais);	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	30	None	replace
23	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  2  + ",  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  2  + ",  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)*  2  + ",  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	  aught(ClassLoaderAwareObjectInputStream.class)*    2    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	15	None	replace
24	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  this.object.getClassLoader();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  this.object.getClassLoader();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  this.object.getClassLoader();	  ClassLoaderAwareObjectInputStream    in    =    object.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	26	None	replace
25	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  this.classLoader.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  this.classLoader.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  this.classLoader.getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    this.classLoader.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	24	None	replace
26	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(readObject,  bais.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(readObject,  bais.getClass().getClassLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(readObject,  bais.getClass().getClassLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    readObject.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
27	[BUG]  [BUGGY]  if(in.throwAsIOException( " "))  throw  new  SerializationException( " ");  [CE]  cannot  find  symbol  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(in.throwAsIOException( " "))  throw  new  SerializationException( " ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(in.throwAsIOException( " "))  throw  new  SerializationException( " ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
28	[BUG]  [BUGGY]  if(readObject.throwAsIOException( " "))  throw  new  SerializationException( " ");  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(readObject.throwAsIOException( " "))  throw  new  SerializationException( " ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject.throwAsIOException( " "))  throw  new  SerializationException( " ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
29	[BUG]  [BUGGY]  java.util.ArrayList.throwAsIOException( "   ");  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  java.util.ArrayList.throwAsIOException( "   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	java.util.ArrayList.throwAsIOException( "   ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
30	[BUG]  [BUGGY]  if(in.throwAsIOException( "   ");  [CE]  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(in.throwAsIOException( "   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(in.throwAsIOException( "   ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  	22	None	replace
31	[BUG]  [BUGGY]  aughtException( "ClassLoaderAwareObjectInputStream  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  [CE]  cannot  find  symbol  [FE]                          SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtException( "ClassLoaderAwareObjectInputStream  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtException( "ClassLoaderAwareObjectInputStream  does  not  support  the  ClassLoaderAwareObjectInputStream. ");	  aughtException(   "   ")+   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
32	[BUG]  [BUGGY]  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();	  in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	1	None	replace
33	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  classLoader);  [CE]  cannot  find  symbol  classLoader  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais,  classLoader);	  readObject    =    new    ByteArrayInputStream(bais);    	non-compiled	[CE]  cannot  find  symbol  classLoader	58	None	replace
34	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(in,  bais);  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoaderAwareObjectInputStream,ByteArrayInputStream)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(in,  bais);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(in,  bais);	  readObject    =    new    ByteArrayInputStream(bais);    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoaderAwareObjectInputStream,ByteArrayInputStream)	58	None	replace
35	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  classLoader.getClassLoader());  [CE]  cannot  find  symbol  classLoader  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  classLoader.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais,  classLoader.getClassLoader());	  readObject    =    new    ByteArrayInputStream(bais);    	non-compiled	[CE]  cannot  find  symbol  classLoader	58	None	replace
36	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(in);  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoaderAwareObjectInputStream)  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(in);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(in);	  readObject    =    new    ByteArrayInputStream(bais);    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoaderAwareObjectInputStream)	58	None	replace
37	[BUG]  [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();	  InputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	replace
38	[BUG]  [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject();	  InputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	replace
39	[BUG]  [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  [CE]  cannot  find  symbol  classLoader  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());	  in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	29	None	replace
40	[BUG]  [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass(),  classLoader());  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass(),  classLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass(),  classLoader());	  in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
41	[BUG]  [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [CE]  cannot  find  symbol  classLoader  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);	  in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	29	None	replace
42	[BUG]  [BUGGY]  BYteArrayInputStream  in  =(ByteArrayInputStream)in.readObject();  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =(ByteArrayInputStream)in.readObject();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =(ByteArrayInputStream)in.readObject();	  BYteArrayInputStream    bais    =(ByteArrayInputStream)in.readObject();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
43	[BUG]  [BUGGY]  ByteArrayInputStream  bais  =(ByteArrayInputStream)in.readObject();  [CE]  variable  bais  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ByteArrayInputStream  bais  =(ByteArrayInputStream)in.readObject();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ByteArrayInputStream  bais  =(ByteArrayInputStream)in.readObject();	  BYteArrayInputStream    bais    =(ByteArrayInputStream)in.readObject();    	non-compiled	[CE]  variable  bais  is  already  defined  in  method  <T>clone(T)	43	None	replace
44	[BUG]  [BUGGY]  BYteArrayInputStream  bais  =(ByteArrayInputStream)bytes.readObject();  [CE]  cannot  find  symbol  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  bais  =(ByteArrayInputStream)bytes.readObject();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  bais  =(ByteArrayInputStream)bytes.readObject();	  BYteArrayInputStream    bais    =(ByteArrayInputStream)in.readObject();    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
45	[BUG]  [BUGGY]  readObject  =(T)in.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =(T)in.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)in.clone();	  readObject    =(T)object.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	34	None	replace
46	[BUG]  [BUGGY]  clone  =(T)object.clone();  [CE]  cannot  find  symbol  clone  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  clone  =(T)object.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	clone  =(T)object.clone();	  readObject    =(T)object.clone();    	non-compiled	[CE]  cannot  find  symbol  clone	34	None	replace
47	[BUG]  [BUGGY]  object  =(T)object.clone();  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  object  =(T)object.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	object  =(T)object.clone();	  readObject    =(T)object.clone();    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
48	[BUG]  [BUGGY]  readObject  =  object  ==  null?  null  :  object.getClass().getName();  [CE]  incompatible  types  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  object  ==  null?  null  :  object.getClass().getName();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object  ==  null?  null  :  object.getClass().getName();	  readObject    =    object!=    null?    null    :    object.getClass().getName();    	non-compiled	[CE]  incompatible  types	65	None	replace
49	[BUG]  [BUGGY]  (T)in.readInt();  [CE]  not  a  statement  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  (T)in.readInt();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	(T)in.readInt();	  (T)in.readObject();    	non-compiled	[CE]  not  a  statement	49	None	replace
50	[BUG]  [BUGGY]  (T)in.readObject()  -  1;  [CE]  not  a  statement  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  (T)in.readObject()  -  1;  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	(T)in.readObject()  -  1;	  (T)in.readObject();    	non-compiled	[CE]  not  a  statement	49	None	replace
51	[BUG]  [BUGGY]  (T)object.readObject();  [CE]  not  a  statement  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  (T)object.readObject();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	(T)object.readObject();	  (T)in.readObject();    	non-compiled	[CE]  not  a  statement	49	None	replace
52	[BUG]  [BUGGY]  boolean  ex  =  this.in.readByteArrayInputStream();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  boolean  ex  =  this.in.readByteArrayInputStream();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  this.in.readByteArrayInputStream();	  boolean    ex    =    in.readByteArrayInputStream();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	50	None	replace
53	[BUG]  [BUGGY]  Boolean  ex  =  in.readByteArrayInputStream();  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  Boolean  ex  =  in.readByteArrayInputStream();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	Boolean  ex  =  in.readByteArrayInputStream();	  boolean    ex    =    in.readByteArrayInputStream();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
54	[BUG]  [BUGGY]  wires.add(in.getClass().getName());  [CE]  cannot  find  symbol  wires  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.add(in.getClass().getName());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.add(in.getClass().getName());	  wires.add(object.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol  wires	8	None	replace
55	[BUG]  [BUGGY]  wires.add(bais.getClass().getName());  [CE]  cannot  find  symbol  wires  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.add(bais.getClass().getName());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.add(bais.getClass().getName());	  wires.add(object.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol  wires	8	None	replace
56	[BUG]  [BUGGY]  reader!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  not  a  statement  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  reader!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	reader!=  null)  {  throw  new  SerializationException( " ");  }	  readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
57	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  readObject);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  readObject);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	27	None	replace
58	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClass().getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClass().getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClass().getClassLoader(),  classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	27	None	replace
59	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader(),  object);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader(),  object);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader(),  object);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	27	None	replace
60	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  this.classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  this.classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  this.classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	27	None	replace
61	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader.getClass().getClassLoader(),  object);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader.getClass().getClassLoader(),  object);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader.getClass().getClassLoader(),  object);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	45	None	replace
62	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	45	None	replace
63	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais,  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais,  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  bais,  classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	45	None	replace
64	[BUG]  [BUGGY]  readObject  =  in.readObject()?  null  :  in.readObject();  [CE]  incompatible  types  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  in.readObject()?  null  :  in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  in.readObject()?  null  :  in.readObject();	  readObject    =    in.readObject();    	non-compiled	[CE]  incompatible  types	55	None	replace
65	[BUG]  [BUGGY]  readObject  =  in.readObject()?  null  :  Integer.toString(in.readObject());  [CE]  incompatible  types  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  in.readObject()?  null  :  Integer.toString(in.readObject());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  in.readObject()?  null  :  Integer.toString(in.readObject());	  readObject    =    in.readObject();    	non-compiled	[CE]  incompatible  types	55	None	replace
66	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [CE]  cannot  find  symbol  classLoader  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  classLoader);	  readObject    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	56	None	replace
67	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(object.getClass().getClassLoader());  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(object.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(object.getClass().getClassLoader());	  readObject    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader)	56	None	replace
68	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(object,bais.getClass().getClassLoader());  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(T,ClassLoader)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(object,bais.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(object,bais.getClass().getClassLoader());	  readObject    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(T,ClassLoader)	56	None	replace
69	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getLoader());  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getLoader());	  readObject    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
70	[BUG]  [BUGGY]  bais  =(ClassLoaderAwareObjectInputStream)in.readObject();  [CE]  incompatible  types  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  bais  =(ClassLoaderAwareObjectInputStream)in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	bais  =(ClassLoaderAwareObjectInputStream)in.readObject();	  ClassLoaderAwareObjectInputStream    bais    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  incompatible  types	40	None	replace
71	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [CE]  variable  bais  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)this.in.readObject();	  ClassLoaderAwareObjectInputStream    bais    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  bais  is  already  defined  in  method  <T>clone(T)	40	None	replace
72	[BUG]  [BUGGY]  clone  =(T)in.readObject();  [CE]  cannot  find  symbol  clone  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  clone  =(T)in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	clone  =(T)in.readObject();	  readObject    =(T)in.readObject();    	non-compiled	[CE]  cannot  find  symbol  clone	10	None	replace
73	[BUG]  [BUGGY]  object  =(T)in.readObject();  [CE]  cannot  find  symbol  ex  [FE]                          SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  object  =(T)in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	object  =(T)in.readObject();	  readObject    =(T)in.readObject();    	non-compiled	[CE]  cannot  find  symbol  ex	10	None	replace
74	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	67	None	replace
75	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  readObject);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  readObject);	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	67	None	replace
76	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  bais.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  bais.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  bais.getClass().getClassLoader());	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	67	None	replace
77	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
78	[BUG]  [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [CE]  cannot  find  symbol  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader(),    object);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
79	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
80	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader(),  object,  readObject);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader(),  object,  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader(),  object,  readObject);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
81	[BUG]  [BUGGY]  readObject  =  in.clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  in.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  in.clone();	  readObject    =    readObject.clone();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	53	None	replace
82	[BUG]  [BUGGY]  readObject  =  object.clone();  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  object.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object.clone();	  readObject    =    readObject.clone();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
83	[BUG]  [BUGGY]  clone  =  readObject.clone();  [CE]  cannot  find  symbol  clone  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  clone  =  readObject.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	clone  =  readObject.clone();	  readObject    =    readObject.clone();    	non-compiled	[CE]  cannot  find  symbol  clone	53	None	replace
84	[BUG]  [BUGGY]  readObject  =  ObjectUtils.clone(readObject);  [CE]  cannot  find  symbol  ex  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  ObjectUtils.clone(readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  ObjectUtils.clone(readObject);	  readObject    =    readObject.clone();    	non-compiled	[CE]  cannot  find  symbol  ex	53	None	replace
85	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(in.readObject());  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(Object)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(in.readObject());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(in.readObject());	  readObject    =    null;    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(Object)	35	None	replace
86	[BUG]  [BUGGY]  while(readObject!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  cannot  find  symbol  ex  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  while(readObject!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	while(readObject!=  null)  {  throw  new  SerializationException( " ");  }	  while(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	33	None	replace
87	[BUG]  [BUGGY]  while(object!=  null)  {  throw  new  SerializationException( ". ");  }  [CE]  cannot  find  symbol  ex  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  while(object!=  null)  {  throw  new  SerializationException( ". ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	while(object!=  null)  {  throw  new  SerializationException( ". ");  }	  while(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	33	None	replace
88	[BUG]  [BUGGY]  while(in!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  cannot  find  symbol  ex  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  while(in!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	while(in!=  null)  {  throw  new  SerializationException( " ");  }	  while(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	33	None	replace
89	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  object);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  object);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  object);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	46	None	replace
90	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject()  -  1;  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject()  -  1;  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject()  -  1;	  ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject()    -    1;    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	63	None	replace
91	[BUG]  [BUGGY]  boolean  ex  =  this.in.readBoolean();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  boolean  ex  =  this.in.readBoolean();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  this.in.readBoolean();	  boolean    ex    =    in.readBoolean();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	51	None	replace
92	[BUG]  [BUGGY]  boolean  ex  =  in.readObject();  [CE]  incompatible  types  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  boolean  ex  =  in.readObject();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  in.readObject();	  boolean    ex    =    in.readBoolean();    	non-compiled	[CE]  incompatible  types	51	None	replace
93	[BUG]  [BUGGY]  clone  =(T)readObject.clone();  [CE]  cannot  find  symbol  clone  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  clone  =(T)readObject.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	clone  =(T)readObject.clone();	  readObject    =(T)readObject.clone();    	non-compiled	[CE]  cannot  find  symbol  clone	54	None	replace
94	[BUG]  [BUGGY]  object  =(T)readObject.clone();  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  object  =(T)readObject.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	object  =(T)readObject.clone();	  readObject    =(T)readObject.clone();    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
95	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  object);  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader,T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  object);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  object);	  readObject    =    new    ByteArrayInputStream(bais.getClass().getClassLoader());    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader,T)	57	None	replace
96	[BUG]  [BUGGY]  reader  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());  [CE]  cannot  find  symbol  reader  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  reader  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	reader  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());	  readObject    =    new    ByteArrayInputStream(bais.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  reader	57	None	replace
97	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  classLoader.getClassLoader());  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  classLoader.getClassLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  classLoader.getClassLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
98	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getLoader());	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	62	None	replace
99	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClassLoader());	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	62	None	replace
100	[BUG]  [BUGGY]  if(in  ==  null)  {  throw  new  SerializationException( " ");  }  [CE]  cannot  find  symbol  ex  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(in  ==  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(in  ==  null)  {  throw  new  SerializationException( " ");  }	  if(readObject    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	31	None	replace
101	[BUG]  [BUGGY]  if(object  ==  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [CE]  cannot  find  symbol  ex  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object  ==  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object  ==  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }	  if(object!=    null)    {    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    }    	non-compiled	[CE]  cannot  find  symbol  ex	19	None	replace
102	[BUG]  [BUGGY]  boolean  ex  =  this.in.readByteArray();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  boolean  ex  =  this.in.readByteArray();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  this.in.readByteArray();	  boolean    ex    =    in.readByteArray();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	52	None	replace
103	[BUG]  [BUGGY]  Boolean  ex  =  in.readByteArray();  [CE]  cannot  find  symbol  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  Boolean  ex  =  in.readByteArray();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	Boolean  ex  =  in.readByteArray();	  boolean    ex    =    in.readByteArray();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
104	[BUG]  [BUGGY]  wires.put(object,  in);  [CE]  cannot  find  symbol  wires  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.put(object,  in);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.put(object,  in);	  wires.put(object,    readObject);    	non-compiled	[CE]  cannot  find  symbol  wires	36	None	replace
105	[BUG]  [BUGGY]  in.put(object,  readObject);  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in.put(object,  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in.put(object,  readObject);	  wires.put(object,    readObject);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
106	[BUG]  [BUGGY]  if(object!=  null)  {  throw  new  SerializationException( " ".getMessage());  }  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object!=  null)  {  throw  new  SerializationException( " ".getMessage());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object!=  null)  {  throw  new  SerializationException( " ".getMessage());  }	  if(readObject!=    null)    {    throw    new    SerializationException(   "   ".getMessage());    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
107	[BUG]  [BUGGY]  if(in!=  null)  {  throw  new  SerializationException( " ".getMessage());  }  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(in!=  null)  {  throw  new  SerializationException( " ".getMessage());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(in!=  null)  {  throw  new  SerializationException( " ".getMessage());  }	  if(readObject!=    null)    {    throw    new    SerializationException(   "   ".getMessage());    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
108	[BUG]  [BUGGY]  if(readObject!=  null)  {  throw  new  SerializationException( "T   ".getMessage());  }  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(readObject!=  null)  {  throw  new  SerializationException( "T   ".getMessage());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  throw  new  SerializationException( "T   ".getMessage());  }	  if(readObject!=    null)    {    throw    new    SerializationException(   "   ".getMessage());    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
109	[BUG]  [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).clone();  [CE]  clone()  has  protected  access  in  Object  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	((  ClassLoaderAwareObjectInputStream)in).clone();	  ((    ClassLoaderAwareObjectInputStream)in).close();    	non-compiled	[CE]  clone()  has  protected  access  in  Object	37	None	replace
110	[BUG]  [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).flush();  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).flush();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	((  ClassLoaderAwareObjectInputStream)in).flush();	  ((    ClassLoaderAwareObjectInputStream)in).close();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
111	[BUG]  [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).closeAllObjects();  [CE]  cannot  find  symbol  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).closeAllObjects();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	((  ClassLoaderAwareObjectInputStream)in).closeAllObjects();	  ((    ClassLoaderAwareObjectInputStream)in).close();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
112	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  classLoader.getClass().getClassLoader());  [CE]  cannot  find  symbol  classLoader  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(bais,  classLoader.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  classLoader.getClass().getClassLoader());	  aughtExceptionHandler(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	60	None	replace
113	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  object.getClass(),  classLoader());  [CE]  cannot  find  symbol  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(bais,  object.getClass(),  classLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  object.getClass(),  classLoader());	  aughtExceptionHandler(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
114	[BUG]  [BUGGY]  aughtExceptionHandler(object,  classLoader.getClass().getClassLoader());  [CE]  cannot  find  symbol  classLoader  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(object,  classLoader.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(object,  classLoader.getClass().getClassLoader());	  aughtExceptionHandler(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	60	None	replace
115	[BUG]  [BUGGY]  aughtExceptionHandler(object,  classLoader.getClass().getClassLoader(),  null);  [CE]  cannot  find  symbol  classLoader  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(object,  classLoader.getClass().getClassLoader(),  null);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(object,  classLoader.getClass().getClassLoader(),  null);	  aughtExceptionHandler(bais,    object.getClass().getClassLoader(),    null);    	non-compiled	[CE]  cannot  find  symbol  classLoader	61	None	replace
116	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  classLoader.getClass().getClassLoader(),  null);  [CE]  cannot  find  symbol  classLoader  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(bais,  classLoader.getClass().getClassLoader(),  null);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  classLoader.getClass().getClassLoader(),  null);	  aughtExceptionHandler(bais,    object.getClass().getClassLoader(),    null);    	non-compiled	[CE]  cannot  find  symbol  classLoader	61	None	replace
117	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  object.getClass().getClassLoader(),  in,  null);  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(bais,  object.getClass().getClassLoader(),  in,  null);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  object.getClass().getClassLoader(),  in,  null);	  aughtExceptionHandler(bais,    object.getClass().getClassLoader(),    null);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
118	[BUG]  [BUGGY]  if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")  [CE]  illegal  start  of  type  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")	  if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    @SuppressWarnings(   "readObject       ")    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
119	[BUG]  [BUGGY]  readObject  =  bais.readObject();  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  bais.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  bais.readObject();	  readObject    =    in.readObject();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
120	[BUG]  [BUGGY]  aught(new  SerializationException( " "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.n ");  [CE]  not  a  statement  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aught(new  SerializationException( " "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.n ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(new  SerializationException( " "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.n ");	  aught(new    SerializationException(   "   "))    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	64	None	replace
121	[BUG]  [BUGGY]  aughtExceptionHandler(object,  in.getClass().getClassLoader(),  null);  [CE]  cannot  find  symbol  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(object,  in.getClass().getClassLoader(),  null);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(object,  in.getClass().getClassLoader(),  null);	  aughtExceptionHandler(bais,    object.getClass().getClassLoader(),    null);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
122	[BUG]  [BUGGY]  aughtExceptionHandler(object,  object.getClass().getClassLoader(),  null);  [CE]  cannot  find  symbol  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(object,  object.getClass().getClassLoader(),  null);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(object,  object.getClass().getClassLoader(),  null);	  aughtExceptionHandler(bais,    object.getClass().getClassLoader(),    null);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
123	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(classLoader,    bais.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	39	None	replace
124	[BUG]  [BUGGY]  if(readObject  ==  null)  {  throw  new  SerializationException( " ",  in);  }  [CE]  no  suitable  constructor  found  for  SerializationException(String,ClassLoaderAwareObjectInputStream)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(readObject  ==  null)  {  throw  new  SerializationException( " ",  in);  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject  ==  null)  {  throw  new  SerializationException( " ",  in);  }	  if(readObject    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  SerializationException(String,ClassLoaderAwareObjectInputStream)	31	None	replace
125	[BUG]  [BUGGY]  readObject  =(T)object.readObject();  [CE]  cannot  find  symbol  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =(T)object.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)object.readObject();	  readObject    =(T)in.readObject();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
126	[BUG]  [BUGGY]  readObject  =(T)this.object.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =(T)this.object.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)this.object.clone();	  readObject    =(T)object.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	34	None	replace
127	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  classLoader);  [CE]  cannot  find  symbol  classLoader  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  classLoader);	  readObject    =    new    ByteArrayInputStream(bais.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  classLoader	57	None	replace
128	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  in);  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader,ClassLoaderAwareObjectInputStream)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  in);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader(),  in);	  readObject    =    new    ByteArrayInputStream(bais.getClass().getClassLoader());    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader,ClassLoaderAwareObjectInputStream)	57	None	replace
129	[BUG]  [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  -  1;  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  -  1;  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  -  1;	  InputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	2	None	replace
130	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  in);  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ByteArrayInputStream,ClassLoader,ClassLoaderAwareObjectInputStream)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  in);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader(),  in);	  readObject    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ByteArrayInputStream,ClassLoader,ClassLoaderAwareObjectInputStream)	56	None	replace
131	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  object.getClass(),  in.getClassLoader());  [CE]  cannot  find  symbol  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(bais,  object.getClass(),  in.getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  object.getClass(),  in.getClassLoader());	  aughtExceptionHandler(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
132	[BUG]  [BUGGY]  aughtExceptionHandler(object,  bais.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtExceptionHandler(object,  bais.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(object,  bais.getClass().getClassLoader());	  aughtExceptionHandler(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
133	[BUG]  [BUGGY]  object  ==  null)  {  throw  new  SerializationException( " ");  }  [CE]  not  a  statement  [FE]            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  object  ==  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	object  ==  null)  {  throw  new  SerializationException( " ");  }	  readObject    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  not  a  statement	20	None	replace
134	[BUG]  [BUGGY]  in  =(ClassLoaderAwareObjectInputStream)object.readObject();  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  in  =(ClassLoaderAwareObjectInputStream)object.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =(ClassLoaderAwareObjectInputStream)object.readObject();	  in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
135	[BUG]  [BUGGY]  object!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  not  a  statement  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  object!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	object!=  null)  {  throw  new  SerializationException( " ");  }	  readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  not  a  statement	21	None	replace
136	[BUG]  [BUGGY]  ObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader(),  classLoader);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
137	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  classLoader.getClassLoader(),  object);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  classLoader.getClassLoader(),  object);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  classLoader.getClassLoader(),  object);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
138	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  classLoader);  [CE]  cannot  find  symbol  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  classLoader);  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  classLoader);	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
139	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(object,  bais.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(object,  bais.getClass().getClassLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(object,  bais.getClass().getClassLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
140	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  ClassLoader.classLoader());  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  ClassLoader.classLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass(),  ClassLoader.classLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
141	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)in.getObject();  [CE]  variable  bais  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)in.getObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)in.getObject();	  ClassLoaderAwareObjectInputStream    bais    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  bais  is  already  defined  in  method  <T>clone(T)	40	None	replace
142	[BUG]  [BUGGY]  (T)in.readObject(bais);  [CE]  not  a  statement  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  (T)in.readObject(bais);  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	(T)in.readObject(bais);	  (T)in.readObject();    	non-compiled	[CE]  not  a  statement	49	None	replace
143	[BUG]  [BUGGY]  (T)in.close();  [CE]  not  a  statement  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  (T)in.close();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	(T)in.close();	  (T)in.readObject();    	non-compiled	[CE]  not  a  statement	49	None	replace
144	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais.getClass(),  object.getClassLoader());  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais.getClass(),  object.getClassLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais.getClass(),  object.getClassLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
145	[BUG]  [BUGGY]  if(object!=  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(object!=  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object!=  null)  {  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  }	  aughtExceptionHandler.throwAsIOException(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	23	None	replace
146	[BUG]  [BUGGY]  Object.throwAsIOException(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  Object.throwAsIOException(bais,  object.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	Object.throwAsIOException(bais,  object.getClass().getClassLoader());	  aughtExceptionHandler.throwAsIOException(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
147	[BUG]  [BUGGY]  if(readObject!=  null)  {  throw  new  SerializationException( "   ",  in.getMessage());  }  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(readObject!=  null)  {  throw  new  SerializationException( "   ",  in.getMessage());  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  throw  new  SerializationException( "   ",  in.getMessage());  }	  if(readObject!=    null)    {    throw    new    SerializationException(   "   ".getMessage());    }    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
148	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  1000  +   "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                        SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  1000  +   "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)*  1000  +   "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	  aught(ClassLoaderAwareObjectInputStream.class)*    10    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	16	None	replace
149	[BUG]  [BUGGY]  readObject  =  object;  [CE]  cannot  find  symbol  ex  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  object;  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object;	  readObject    =    null;    	non-compiled	[CE]  cannot  find  symbol  ex	35	None	replace
150	[BUG]  [BUGGY]  readObject  =  new  ByteArrayObjectInputStream(bais);  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  new  ByteArrayObjectInputStream(bais);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayObjectInputStream(bais);	  readObject    =    null;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
151	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(readObject,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(readObject,  object.getClass().getClassLoader());  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(readObject,  object.getClass().getClassLoader());	  BYteArrayInputStream    in    =    new    ByteArrayInputStream(bais,    readObject.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
152	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  object.getClass().getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	27	None	replace
153	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  4  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  4  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)*  4  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	  aught(ClassLoaderAwareObjectInputStream.class)*    2    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  not  a  statement	15	None	replace
154	[BUG]  [BUGGY]  readObject  =  this.readObject.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  this.readObject.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  this.readObject.clone();	  readObject    =    readObject.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	53	None	replace
155	[BUG]  [BUGGY]  wires.add(object.getClass().getName(),  readObject);  [CE]  cannot  find  symbol  wires  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.add(object.getClass().getName(),  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.add(object.getClass().getName(),  readObject);	  wires.add(object.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol  wires	8	None	replace
156	[BUG]  [BUGGY]  wires.add(object,  in.getClass().getName());  [CE]  cannot  find  symbol  wires  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.add(object,  in.getClass().getName());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.add(object,  in.getClass().getName());	  wires.add(object.getClass().getName());    	non-compiled	[CE]  cannot  find  symbol  wires	8	None	replace
157	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  readObject);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  readObject);	  InputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	30	None	replace
158	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  objects);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  objects);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  objects);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	46	None	replace
159	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  object.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  object.getClass().getClassLoader());  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,  object.getClass().getClassLoader());	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    object);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	46	None	replace
160	[BUG]  [BUGGY]  while(object!=  null)  {  throw  new  SerializationException( " ",  in);  }  [CE]  no  suitable  constructor  found  for  SerializationException(String,ClassLoaderAwareObjectInputStream)  [FE]              SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  while(object!=  null)  {  throw  new  SerializationException( " ",  in);  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	while(object!=  null)  {  throw  new  SerializationException( " ",  in);  }	  while(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  SerializationException(String,ClassLoaderAwareObjectInputStream)	33	None	replace
161	[BUG]  [BUGGY]  wires.put(readObject,  object);  [CE]  cannot  find  symbol  wires  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.put(readObject,  object);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.put(readObject,  object);	  wires.put(object,    readObject);    	non-compiled	[CE]  cannot  find  symbol  wires	36	None	replace
162	[BUG]  [BUGGY]  wires.put(openObject,  readObject);  [CE]  cannot  find  symbol  openObject  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  wires.put(openObject,  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.put(openObject,  readObject);	  wires.put(object,    readObject);    	non-compiled	[CE]  cannot  find  symbol  openObject	36	None	replace
163	[BUG]  [BUGGY]  while(object!=  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [CE]  cannot  find  symbol  ex  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  while(object!=  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	while(object!=  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }	  if(object!=    null)    {    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    }    	non-compiled	[CE]  cannot  find  symbol  ex	19	None	replace
164	[BUG]  [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).closeClassLoader();  [CE]  cannot  find  symbol  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).closeClassLoader();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	((  ClassLoaderAwareObjectInputStream)in).closeClassLoader();	  ((    ClassLoaderAwareObjectInputStream)in).close();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
165	[BUG]  [BUGGY]  boolean  ex  =  readObject.readByteArray();  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  boolean  ex  =  readObject.readByteArray();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  readObject.readByteArray();	  boolean    ex    =    in.readByteArray();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
166	[BUG]  [BUGGY]  aughtException( ")  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  [FE]                          SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtException( ")  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtException( ")  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	  aughtException(   "   ")+   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  	17	None	replace
167	[BUG]  [BUGGY]  aughtException( "The  ClassLoaderAwareObjectInputStream  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  [CE]  cannot  find  symbol  [FE]                            SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  aughtException( "The  ClassLoaderAwareObjectInputStream  does  not  support  the  ClassLoaderAwareObjectInputStream. ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtException( "The  ClassLoaderAwareObjectInputStream  does  not  support  the  ClassLoaderAwareObjectInputStream. ");	  aughtException(   "   ")+   "    does    not    support    the    ClassLoaderAwareObjectInputStream.       ");    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
168	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoader)this.classLoader.getClassLoader();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoader)this.classLoader.getClassLoader();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoader)this.classLoader.getClassLoader();	  ClassLoaderAwareObjectInputStream    in    =    this.classLoader.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	24	None	replace
169	[BUG]  [BUGGY]  if(readObject!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]                SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(readObject!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  aughtExceptionHandler.throwAsIOException( " ");  }	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	22	None	replace
170	[BUG]  [BUGGY]  ObjectUtils.throwAsIOException( " ");  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ObjectUtils.throwAsIOException( " ");  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ObjectUtils.throwAsIOException( " ");	  aughtExceptionHandler.throwAsIOException(   "   ");    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
171	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  bais.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  bais.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  bais.readObject();	  ClassLoaderAwareObjectInputStream    in    =    bais.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	25	None	replace
172	[BUG]  [BUGGY]  if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")  [CE]  illegal  start  of  type  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")	  if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    @SuppressWarnings(   "readObject       ")    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
173	[BUG]  [BUGGY]  readObject  =(T)this.readObject.clone();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =(T)this.readObject.clone();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)this.readObject.clone();	  readObject    =(T)readObject.clone();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	54	None	replace
174	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.getObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.getObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.getObject();	  ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)object.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	48	None	replace
175	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  /  1;  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  /  1;  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  /  1;	  ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject()    -    1;    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	63	None	replace
176	[BUG]  [BUGGY]  boolean  ex  =  readObject.readByteArrayInputStream();  [CE]  cannot  find  symbol  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  boolean  ex  =  readObject.readByteArrayInputStream();  [BUGGY]      throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  readObject.readByteArrayInputStream();	  boolean    ex    =    in.readByteArrayInputStream();    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
177	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  readObject);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  readObject);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	45	None	replace
178	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader,  readObject);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader,  readObject);  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader,  readObject);	  ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),    classLoader);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	45	None	replace
179	[BUG]  [BUGGY]  readObject  =  this.in.readObject();  [CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context  [FE]                    SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  this.in.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  this.in.readObject();	  readObject    =    in.readObject();    	non-compiled	[CE]  non-static  variable  this  cannot  be  referenced  from  a  static  context	55	None	replace
180	[BUG]  [BUGGY]  readObject  =  object.readObject();  [CE]  cannot  find  symbol  [FE]                      SerializationException      [CONTEXT]      in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(     "unchecked     ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;      [BUGGY]  readObject  =  object.readObject();  [BUGGY]      }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(     "ClassNotFoundException  while  reading  cloned  object  data     ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  while  reading  cloned  object  data     ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(     "IOException  on  closing  cloned  object  data  InputStream.     ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object.readObject();	  readObject    =    in.readObject();    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
