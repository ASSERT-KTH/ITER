bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in  =(ClassLoaderAwareObjectInputStream)in.readObject();  [CE]  cannot  find  symbol  ex  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  in  =(ClassLoaderAwareObjectInputStream)in.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =(ClassLoaderAwareObjectInputStream)in.readObject();	      ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  cannot  find  symbol  ex	13	None	replace
2	[BUG]  [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                  SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  InputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject();	      ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	13	None	replace
3	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                    SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)this.in.readObject();	      ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	13	None	replace
4	[BUG]  [BUGGY]  if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [CE]  illegal  start  of  type  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")	      if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClass().getClassLoader());    @SuppressWarnings(   "unchecked   ")    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  if(readObject  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [CE]  illegal  start  of  type  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(readObject  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")	      if(object    ==    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClass().getClassLoader());    @SuppressWarnings(   "unchecked   ")    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  }  catch  (Throwable  ex)  {  [CE]  exception  IOException  has  already  been  caught  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  }  catch  (Throwable  ex)  {  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	}  catch  (Throwable  ex)  {	  }    catch    (Exception    ex)    {    	non-compiled	[CE]  exception  IOException  has  already  been  caught	1	None	replace
7	[BUG]  [BUGGY]  aughtException( " ")+ "  could  not  read  object: "  +  object.getClass().getName());  [CE]  not  a  statement  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtException( " ")+ "  could  not  read  object: "  +  object.getClass().getName());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtException( " ")+ "  could  not  read  object: "  +  object.getClass().getName());	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  not  a  statement	17	None	replace
8	[BUG]  [BUGGY]  wires.add(object.getClass().getName());  [CE]  cannot  find  symbol  wires  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  wires.add(object.getClass().getName());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.add(object.getClass().getName());	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  cannot  find  symbol  wires	17	None	replace
9	[BUG]  [BUGGY]  aughtException( " ")+ "  could  not  read  object: "  +  object.getClass().getName());  }  [CE]  not  a  statement  [FE]                  SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtException( " ")+ "  could  not  read  object: "  +  object.getClass().getName());  }  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtException( " ")+ "  could  not  read  object: "  +  object.getClass().getName());  }	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  not  a  statement	17	None	replace
10	[BUG]  [BUGGY]  readObject  =(T)in.readObject();  [CE]  cannot  find  symbol  ex  [FE]                    SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =(T)in.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)in.readObject();	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  cannot  find  symbol  ex	17	None	replace
11	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	9	None	replace
12	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader(),  object);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader(),  object);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  classLoader.getClassLoader(),  object);	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	9	None	replace
13	[BUG]  [BUGGY]  if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  [CE]  illegal  start  of  type  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked ")  //  see  above  T  readObject  =	      if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    @SuppressWarnings(   "unchecked   ")    //    see    above    T    readObject    =    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)+ "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)+ "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)+ "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	      if(object    ==    null)    {    throw    new    SerializationException(   "   ")    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
15	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  2  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                  SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  2  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)*  2  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	      if(object    ==    null)    {    throw    new    SerializationException(   "   ")    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
16	[BUG]  [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  10  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                    SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aught(ClassLoaderAwareObjectInputStream.class)*  10  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(ClassLoaderAwareObjectInputStream.class)*  10  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	      if(object    ==    null)    {    throw    new    SerializationException(   "   ")    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
17	[BUG]  [BUGGY]  aughtException( " ")+ "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                      SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtException( " ")+ "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtException( " ")+ "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	      if(object    ==    null)    {    throw    new    SerializationException(   "   ")    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
18	[BUG]  [BUGGY]  if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	3	None	replace
19	[BUG]  [BUGGY]  if(object!=  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [CE]  cannot  find  symbol  ex  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(object!=  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object!=  null)  {  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  }	      	non-compiled	[CE]  cannot  find  symbol  ex	3	None	replace
20	[BUG]  [BUGGY]  readObject  ==  null)  {  throw  new  SerializationException( " ");  }  [CE]  not  a  statement  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  ==  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  ==  null)  {  throw  new  SerializationException( " ");  }	      if(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  not  a  statement	14	None	replace
21	[BUG]  [BUGGY]  readObject!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  not  a  statement  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject!=  null)  {  throw  new  SerializationException( " ");  }	      if(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  not  a  statement	14	None	replace
22	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler.throwAsIOException( " ");	      if(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	14	None	replace
23	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  aughtExceptionHandler  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler.throwAsIOException(bais,  object.getClass().getClassLoader());	      if(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  aughtExceptionHandler	14	None	replace
24	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  this.classLoader.getClassLoader();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  this.classLoader.getClassLoader();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  this.classLoader.getClassLoader();	      ClassLoaderAwareObjectInputStream    in    =    classLoader.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	11	None	replace
25	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  bais.getClassLoader();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  bais.getClassLoader();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  bais.getClassLoader();	      ClassLoaderAwareObjectInputStream    in    =    classLoader.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	11	None	replace
26	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  object.getClassLoader();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  object.getClassLoader();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  object.getClassLoader();	      ClassLoaderAwareObjectInputStream    in    =    classLoader.getClassLoader();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	11	None	replace
27	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader(),  classLoader);	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	10	None	replace
28	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object,bais.getClass().getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	10	None	replace
29	[BUG]  [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  ex  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  cannot  find  symbol  ex	12	None	replace
30	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
31	[BUG]  [BUGGY]  if(readObject  ==  null)  {  throw  new  SerializationException( " ");  }  [CE]  cannot  find  symbol  ex  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(readObject  ==  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject  ==  null)  {  throw  new  SerializationException( " ");  }	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	16	None	replace
32	[BUG]  [BUGGY]  if(readObject!=  null)  {  throw  new  SerializationException( " ".getMessage());  }  [CE]  cannot  find  symbol  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(readObject!=  null)  {  throw  new  SerializationException( " ".getMessage());  }  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  throw  new  SerializationException( " ".getMessage());  }	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
33	[BUG]  [BUGGY]  while(object!=  null)  {  throw  new  SerializationException( " ");  }  [CE]  cannot  find  symbol  ex  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  while(object!=  null)  {  throw  new  SerializationException( " ");  }  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	while(object!=  null)  {  throw  new  SerializationException( " ");  }	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	15	None	replace
34	[BUG]  [BUGGY]  readObject  =(T)object.clone();  [CE]  cannot  find  symbol  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =(T)object.clone();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)object.clone();	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
35	[BUG]  [BUGGY]  readObject  =  null;  [CE]  cannot  find  symbol  ex  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  null;  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  null;	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	15	None	replace
36	[BUG]  [BUGGY]  wires.put(object,  readObject);  [CE]  cannot  find  symbol  wires  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  wires.put(object,  readObject);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	wires.put(object,  readObject);	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  wires	15	None	replace
37	[BUG]  [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).close();  [CE]  cannot  find  symbol  ex  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ((  ClassLoaderAwareObjectInputStream)in).close();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	((  ClassLoaderAwareObjectInputStream)in).close();	      if(object    ==    null)    {    throw    new    SerializationException(   "   ")    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.   ");    }    	non-compiled	[CE]  cannot  find  symbol  ex	18	None	replace
38	[BUG]  [BUGGY]  if(readObject  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [CE]  illegal  start  of  type  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(readObject  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject  ==  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")	      if(object    ==    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    @SuppressWarnings(   "unchecked   ")    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  bais.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  bais.getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(classLoader,  bais.getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	9	None	replace
40	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)in.readObject();  [CE]  variable  bais  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)in.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  bais  =(ClassLoaderAwareObjectInputStream)in.readObject();	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  variable  bais  is  already  defined  in  method  <T>clone(T)	17	None	replace
41	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader());  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader());	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
42	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  readObject.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  readObject.getClass().getClassLoader());  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais,  readObject.getClass().getClassLoader());	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
43	[BUG]  [BUGGY]  BYteArrayInputStream  bais  =(ByteArrayInputStream)in.readObject();  [CE]  cannot  find  symbol  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  BYteArrayInputStream  bais  =(ByteArrayInputStream)in.readObject();  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  bais  =(ByteArrayInputStream)in.readObject();	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
44	[BUG]  [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]                  SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	BYteArrayInputStream  in  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
45	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  classLoader);	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
46	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  object);  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  object);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader(),  object);	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	12	None	replace
47	[BUG]  [BUGGY]  if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [CE]  illegal  start  of  type  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(readObject!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "unchecked   ")	      if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    @SuppressWarnings(   "unchecked   ")    //    see    above    T    readObject    =    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
48	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject();  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)object.readObject();	      ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	13	None	replace
49	[BUG]  [BUGGY]  (T)in.readObject();  [CE]  not  a  statement  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  (T)in.readObject();  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	(T)in.readObject();	      	non-compiled	[CE]  not  a  statement	3	None	replace
50	[BUG]  [BUGGY]  boolean  ex  =  in.readByteArrayInputStream();  [CE]  cannot  find  symbol  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  boolean  ex  =  in.readByteArrayInputStream();  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  in.readByteArrayInputStream();	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
51	[BUG]  [BUGGY]  boolean  ex  =  in.readBoolean();  [CE]  no  suitable  constructor  found  for  SerializationException(String,boolean)  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  boolean  ex  =  in.readBoolean();  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  in.readBoolean();	      	non-compiled	[CE]  no  suitable  constructor  found  for  SerializationException(String,boolean)	3	None	replace
52	[BUG]  [BUGGY]  boolean  ex  =  in.readByteArray();  [CE]  cannot  find  symbol  [FE]                  SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  boolean  ex  =  in.readByteArray();  [BUGGY]    throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	boolean  ex  =  in.readByteArray();	      	non-compiled	[CE]  cannot  find  symbol	3	None	replace
53	[BUG]  [BUGGY]  readObject  =  readObject.clone();  [CE]  cannot  find  symbol  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  readObject.clone();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  readObject.clone();	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
54	[BUG]  [BUGGY]  readObject  =(T)readObject.clone();  [CE]  cannot  find  symbol  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =(T)readObject.clone();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =(T)readObject.clone();	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
55	[BUG]  [BUGGY]  readObject  =  in.readObject();  [CE]  incompatible  types  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  in.readObject();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  in.readObject();	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  incompatible  types	16	None	replace
56	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader());  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ByteArrayInputStream,ClassLoader)  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais,  object.getClass().getClassLoader());	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ByteArrayInputStream,ClassLoader)	15	None	replace
57	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader)  [FE]            SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais.getClass().getClassLoader());	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ClassLoader)	15	None	replace
58	[BUG]  [BUGGY]  readObject  =  new  ByteArrayInputStream(bais);  [CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ByteArrayInputStream)  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  new  ByteArrayInputStream(bais);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  new  ByteArrayInputStream(bais);	      if(object    ==    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  ByteArrayInputStream(ByteArrayInputStream)	15	None	replace
59	[BUG]  [BUGGY]  if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")  [CE]  illegal  start  of  type  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	if(object!=  null)  {  ClassLoaderAwareObjectInputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  @SuppressWarnings( "readObject   ")	      if(object!=    null)    {    ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    @SuppressWarnings(   "unchecked   ")    //    see    above    T    readObject    =    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
60	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  object.getClass().getClassLoader());  [CE]  cannot  find  symbol  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtExceptionHandler(bais,  object.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  object.getClass().getClassLoader());	      if(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
61	[BUG]  [BUGGY]  aughtExceptionHandler(bais,  object.getClass().getClassLoader(),  null);  [CE]  cannot  find  symbol  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aughtExceptionHandler(bais,  object.getClass().getClassLoader(),  null);  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aughtExceptionHandler(bais,  object.getClass().getClassLoader(),  null);	      if(object!=    null)    {    throw    new    SerializationException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
62	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]        SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    classLoader.getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	9	None	replace
63	[BUG]  [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  -  1;  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  -  1;  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	ClassLoaderAwareObjectInputStream  in  =(ClassLoaderAwareObjectInputStream)in.readObject()  -  1;	      ClassLoaderAwareObjectInputStream    in    =(ClassLoaderAwareObjectInputStream)in.readObject();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	13	None	replace
64	[BUG]  [BUGGY]  aught(new  SerializationException( " "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [CE]  not  a  statement  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  aught(new  SerializationException( " "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	aught(new  SerializationException( " "))  + "  does  not  support  the  ClassLoaderAwareObjectInputStream.   ");	      if(object    ==    null)    {    throw    new    SerializationException(   "   ")    +   "    does    not    support    the    ClassLoaderAwareObjectInputStream.   ");    }    	non-compiled	[CE]  not  a  statement	18	None	replace
65	[BUG]  [BUGGY]  readObject  =  object!=  null?  null  :  object.getClass().getName();  [CE]  incompatible  types  [FE]              SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  object!=  null?  null  :  object.getClass().getName();  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object!=  null?  null  :  object.getClass().getName();	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  incompatible  types	17	None	replace
66	[BUG]  [BUGGY]  readObject  =  object!=  null?(T)object.getClass().getName()  :  null;  [CE]  cannot  find  symbol  ex  [FE]                SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  readObject  =  object!=  null?(T)object.getClass().getName()  :  null;  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	readObject  =  object!=  null?(T)object.getClass().getName()  :  null;	      if(readObject!=    null)    {    throw    new    SerializationException(   "   ")    +   "    could    not    read    object:   "    +    object.getClass().getName());    }    	non-compiled	[CE]  cannot  find  symbol  ex	17	None	replace
67	[BUG]  [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  [CE]  variable  in  is  already  defined  in  method  <T>clone(T)  [FE]          SerializationException    [CONTEXT]    in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());      @SuppressWarnings(   "unchecked   ")  //  see  above  T  readObject  =  (T)  in.readObject();  return  readObject;    [BUGGY]  InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());  [BUGGY]    }  catch  (ClassNotFoundException  ex)  {  throw  new  SerializationException(   "ClassNotFoundException  while  reading  cloned  object  data   ",  ex);  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  while  reading  cloned  object  data   ",  ex);  }  finally  {  try  {  if  (in  !=  null)  {  in.close();  }  }  catch  (IOException  ex)  {  throw  new  SerializationException(   "IOException  on  closing  cloned  object  data  InputStream.   ",  ex);  [CLASS]  SerializationUtils  ClassLoaderAwareObjectInputStream  [METHOD]  clone  [RETURN_TYPE]  <T  T  object  [VARIABLES]  byte[]  objectData  ClassLoaderAwareObjectInputStream  in  boolean  T  object  readObject  ByteArrayInputStream  bais  ClassLoader  classLoader  IOException  ex  ClassNotFoundException  ex  	projects/Lang13/src/main/java/org/apache/commons/lang3/SerializationUtils.java	1.0	98	98	1	replace	InputStream  in  =  new  ClassLoaderAwareObjectInputStream(bais,  object.getClass().getClassLoader());	      ClassLoaderAwareObjectInputStream    in    =    new    ClassLoaderAwareObjectInputStream(bais,    object.getClass().getClassLoader());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  <T>clone(T)	10	None	replace
