projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=getEntryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=openMapEntries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entryHashMap().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entry.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entry.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=current.entryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<K,V>entry=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=entries.iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkIndex(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=entries.size()){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<0||index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.openMapEntries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.openMapSparseIterator.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index+1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index<DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index);}else{thrownewIllegalArgumentException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index);}else{thrownewIllegalStateException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index<=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkIndex(index,value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkDimension(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<DEFAULT_ZERO_TOLERANCE||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex.checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkIndex(index+1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=getEntrySparseIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter2.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588intindex=indexOf(current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entryentry=(Entry)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index);}else{entry=newOpenIntToDoubleHashMap();}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entryMap.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter.remove();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkIndex(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkIndex(index+1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=entries.iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entryList.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setValue(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=this.entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=this.entry.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(value);}else{entry.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(value);}else{thrownewIllegalStateException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entry.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entry.clone();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entryMap.put(index,newEntry(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entries.put(index,newEntry(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588read();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entryMap.put(index,newInteger(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=0){checkAccess(index,DEFAULT_ZERO_TOLERANCE);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry.setValue(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index-1+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index==DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index!=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<DEFAULT_ZERO_TOLERANCE||index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<=DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<0||index>DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<DEFAULT_ZERO_TOLERANCE||index==DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index<0||index>=entries.size());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexcheckIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexCheck.checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<K,V>current=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=getEntry(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<DEFAULT_ZERO_TOLERANCE||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<=DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entryList.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=this.entries.iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index+1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588resize(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entryentry=(Entry)entry.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>entries.size()){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index==entries.size()){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<0||index>=entries.size()){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex.checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex.checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex.checkIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkStart(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index<=DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=entries.size()){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index>=0){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,value,0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE&&value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index+1,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index+1,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index+1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry.setValue(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index+1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=this.entries.iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=newOpenIntToDoubleHashMap();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry=newOpenIntToDoubleHashMap();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index,value);}else{entry=newOpenIntToDoubleHashMap();}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index-1+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entryIterator.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=0){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter1.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter3.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkDimension(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkDimension(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkDimension(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryList.get(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index==DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<K,V>entry=entry.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<K,V>entry=this.entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<K,V>entry=current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index-1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entrySparseIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkLong(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0||index>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkIndex(index,value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index*1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index-1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0||index==entries.size();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0||checkAccess(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkInt(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkInt(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkInt(value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entryMap.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setValue(index,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setValue(index,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setValue(value,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setValue(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588intindex=indexOf(current,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588intindex=indexOfSupported(current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588intindex=indexOf(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.remove(0);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.get(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkLong(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE||index>=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index==DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.current.entryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=current.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0){checkIndex(index,DEFAULT_ZERO_TOLERANCE);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0){checkIndex(index,value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0){checkIndex(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0||checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entry.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=current.entryHashMap().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=entry.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<1||index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<0||index==DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index,entries.size());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index,values);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkState(value<0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index!=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=entries.entryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=entries.entrySet().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<DEFAULT_ZERO_TOLERANCE){checkIndex(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkAccess(index,value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index+1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index,1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iter.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=0){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=currentMap.entryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0||index>=entries.size()){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=entries.size()){checkIndex(index+1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>randomAccess){checkAccess(index);}else{thrownewIllegalArgumentException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=randomAccess){checkAccess(index);}else{thrownewIllegalArgumentException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index,value);}else{thrownewIllegalArgumentException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=getEntrySparseIterator(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entryList.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=index||value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<K,V>entry=iter.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=iter.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkAccess(index);}else{thrownewIllegalStateException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>randomAccess){checkAccess(index);}else{thrownewIllegalStateException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index,value);}else{thrownewIllegalStateException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=entries.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588intindex=indexOf(current,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value!=DEFAULT_ZERO_TOLERANCE){checkAccess(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkAccess(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value>0){checkAccess(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value>0){checkInt(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=0){checkInt(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entry=(OpenIntToDoubleHashMap)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entry=(OpenIntToDoubleHashMap)entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entry=(OpenIntToDoubleHashMap)this.entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index>=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entryHashMap().entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entryHashMap().values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index*1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndex.checkIndex(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkIndex(index*2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexcheckIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=0){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkIndex(index+1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value>=0){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=this.openMapEntryIterator.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0||value>DEFAULT_ZERO_TOLERANCE){checkIndex(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entryentry=(Entry)iter.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entryentry=(Entry)iter2.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value>=DEFAULT_ZERO_TOLERANCE){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkDimension(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index-1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index+1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588ensureAccess(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entries.get(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkAccess(index);}else{entry=newOpenIntToDoubleHashMap();}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index>=0){checkAccess(index);}else{entry=newOpenIntToDoubleHashMap();}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entries.get(index-1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkIndex(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index>=0||index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState.checkState(index<=0||index>=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entryIterator.setEntry(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588this.entryMap.put(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkAndFix(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkNotNull(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)this.entryMap.get(index+1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index+1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index-1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=0){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkAccess(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value>DEFAULT_ZERO_TOLERANCE){checkAccess(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkIndex(index,DEFAULT_ZERO_TOLERANCE);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexCheck.checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,DEFAULT_ZERO_TOLERANCE+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkIndex(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588entry<0||index>=entries.size()){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=DEFAULT_ZERO_TOLERANCE){checkAccess(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index+1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=iter.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index-1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkIndex(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkIndex(index,DEFAULT_ZERO_TOLERANCE);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkIndex(index,DEFAULT_ZERO_TOLERANCE);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(index,DEFAULT_ZERO_TOLERANCE);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkAccess(index,DEFAULT_ZERO_TOLERANCE);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkAccess(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=getEntry(index).getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index<DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)iterator.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexChecks.checkState(value<=DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkDimension(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0||index>randomAccess){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entrycurrent=(Entry)entry.clone();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(index,DEFAULT_ZRO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE&&value>DEFAULT_ZERO_TOLERANCE){checkIndex(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<?>entry=entry.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setValue(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE||value>DEFAULT_ZERO_TOLERANCE){checkSize(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<=DEFAULT_ZERO_TOLERANCE){checkSize(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkSize(value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.this.setEntry(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Entry<N,V>entry=entries.entrySet().iterator().next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iteratoriter=entry.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588checkInt(index,DEFAULT_ZERO_TOLERANCE-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<=0){checkAccess(index);}else{thrownewIllegalArgumentException("");}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIndexCheck.checkIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckState(index<=DEFAULT_ZERO_TOLERANCE||index>DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkAccess(index);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(value<0){checkAccess(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588if(index<0){checkAccess(index,value);}else{entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588Iterator<Entry>iter=this.current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java588CheckIntToDoubleHashMap.checkInt(value);
