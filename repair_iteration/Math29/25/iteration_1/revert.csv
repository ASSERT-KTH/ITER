projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(i);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();entry.setValue(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();setEntry(current,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.getValue
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.getKey()==value){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();entry.setValue(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){entry.next().setValue(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleH
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleH
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){intsize=entries.size();for(inti=0,size=size;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getKey();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.next();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue()+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),entry.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){intsize=entries.size();for(inti=0,size=size;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,values);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=entry.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(i);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get==illegalstart
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entry!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<dimension;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(0);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();setEntry(current,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,this.value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setValue(entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_TOLERANCE).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value/2.0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){entries.put(index,entry);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();if(entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(index
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(
