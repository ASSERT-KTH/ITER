projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(i);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();entry.setValue(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();setEntry(current,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.getValue
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.getKey()==value){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();entry.setValue(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){entry.next().setValue(value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleH
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleH
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){intsize=entries.size();for(inti=0,size=size;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getKey();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.next();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue()+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),entry.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){intsize=entries.size();for(inti=0,size=size;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,values);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=entry.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(i);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get==illegalstart
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entry!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<dimension;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(0);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();setEntry(current,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,this.value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setValue(entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_TOLERANCE).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value/2.0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){entries.put(index,entry);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();if(entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(index
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,DEFAULT_ZERO_TOLERANCE,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,index,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entry.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594createEntryIterator(this,index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.get
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){check}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValu
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entry.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.current.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594entry.getKey(),entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),entry.getKey(),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue()+1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries==null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,key,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,index,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue()/1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue()-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value/DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entry.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<dimension;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>iter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>iter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>iter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();setEntry(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.remove(i);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)this.current.getValue();entry.setValue(entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setValue(entry.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getKey();entry.setValue(entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.next();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.next();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entry.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entryList.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entryIterator.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==DEFAULT_ZERO_TOLERANCE){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==DEFAULT_ZERO_TOLERANCE){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value/1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value*1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerindex=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();for(inti=0,size=size;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();for(inti=0,size=value;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integersize=entries.size();for(inti=0,size=size;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integersize=entries.size();for(inti=0,size=value;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(current.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(value.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)currents.iterator();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),value,entry.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value,DEFAULT_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.current.getKey();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getKey();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.remove(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<index;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(0);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(0);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(0);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();for(inti=0,size=size;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();for(inti=0,size=value;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integersize=entries.size();for(inti=0,size=size;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integersize=entries.size();for(inti=0,size=value;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<dimension;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.get(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entrySet.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this.value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,this.value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries==null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entryList.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue(index);checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entry.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entry.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.current.getValue();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entryList.getValue();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue(index);checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.put(0,index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<dimension;++i){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Ileratoriter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entry.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entry.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.next();checkIndex(current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current).setValue(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value).setValue(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index);entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getValue();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entry.getValue();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entry.next();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()!=value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries==null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.get(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)this.entries.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entry.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entry.getValue(),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entries.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){openIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries==null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<index;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),value,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries==null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),index,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entry.getValue(),index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getValue(),index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)this.current.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entries.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue(),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=entry.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,iter,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==DEFAULT_ZERO_TOLERANCE){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==DEFAULT_ZERO_TOLERANCE){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)currents.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)currents.iterator();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,length=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.put(index,DEFAULT_ZERO_TOLERANCE);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.put(0,index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<dimension;i++){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=(openIntToDoubleHashMap!=null)?this.entries.iterator():newOpenIntToDoubleHashMap();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594createEntryIterator(this,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,entry);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry==illegalstartofexpression
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry==illegalstart
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry==illegalstartof
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),entry.getValue()+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),entry.getValue()-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)this.current.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entries.get(index);entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setValue(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entries.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index).setValue(value/2.0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value*2.0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(index/2.0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get==illegalstartofexpression
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.get==illegalstartof
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entry!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,values);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,values,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value,DEFAULT_ZERO_TOLERANCE-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value/1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,length=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;i++){entries.put(index,DEFAULT_ZERO_TOLERANCE);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getValue(),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setValue(entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setValue(entry.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();if(entry.}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<index;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(inti=0,size=entries.size();i<dimension;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,iter).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,entry).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setKey(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594||isDefaultValue(value)){entries.put(index,entry);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){entries.put(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isEqualValue(value)){entries.put(index,entry);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==DEFAULT_ZERO_TOLERANCE){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,DEFAULT_ZERO_TOLERANCE,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();for(inti=0,value=size;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current).setValue(value/DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current).setValue(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,current).setValue(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>current=entries.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entrySet.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594entry=(Entry)entries.get(index);entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.remove(1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(1);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE||value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,index,value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;++i){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){openIntToDoubleHashMapentry=
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){openIntToDoubleHashMapentry
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.get(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this,DEFAULT_ZERO_TOLERANCE,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getValue(),entry.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594(OpenIntToDoubleHashMap)entry.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594(OpenIntToDoubleHashMap)entry.clone();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,end=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value).setValue(value/2.0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(entries!=null)?entries.iterator():null;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=entries.entrySet();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getValue();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry==
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry!=
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,this.value,index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();if(entry.get}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.next();if(entry.get}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entrySet.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=(this.entries!=null)?this.entries.iterator():entries;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594updateEntry(entry.getKey(),entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();if(ent
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();if(entry
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entries.getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setKey(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index).getKey();checkIndex(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=currents.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey().equals(value)){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getValue(),entry.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;++i){entries.get(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594removeEntry(entry.getKey(),entry.getValue(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value).setValue(DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;i++){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;i++){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;i++){entries.put(0,index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<Entry>iter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkIndex(
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(dimension!=0){for(inti=0,size=entries.size();i<dimension;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,dimension=entries.size();i<dimension;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getValue();entry.setKey(entry.getKey());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){entries.put(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){entries.put(index,entry);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.next();setEntry(current,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDouble>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){openIntToDo
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;i++){entries.get(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entrySet.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.getValue(index);checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value==DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594intsize=entries.size();for(inti=0,value=size;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=current.entryIterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Ilerator<OpenIntToDoubleHashMap>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entry.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Ilerator<Entry>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,value,DEFAULT_ZERO_TOLERANCE,epsilon);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,null);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,this.current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(ent
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>current=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iteratoriter=current.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getKey());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,end=entries.size();i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;++i){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;++i){entries.put(0,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,value,this.value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entryList.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,value=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,length=entries.size();i<size;i++){entries.put(i,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){if(entry!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.get(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();setEntry(current,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();setEntry(current,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,this.value,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,this.value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<?>entry=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.get
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValu
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entry!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index).getValue();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,this.values);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE,values,iter);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_TOLERANCE).setValue(value/1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=this.entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerindex=entries.size();for(inti=0,size=value;i<size;++i){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594((OpenIntToDoubleHashMap)entry).setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594for(Iteratoriter=entries.iterator();iter.hasNext();){openIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.n
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Integerres=entries.size();for(inti=0,size=size;i<size;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<K,V>entry=entries.get(index++);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594&&isDefaultValue(value)){entries.put(index,newDouble(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)entries.get(index);entry.setValue(entry.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.get(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getValue(),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries.containsKey(index)){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<N,V>entry=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index).getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getValue();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=currents.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();checkIndex(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();checkIndex(current.getValue());}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(entries!=null)?entries.iterator():DEFAULT_ZERO_TOLERANCE;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entryentry=(Entry)iter.next();if(current.getValue()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){check
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value<=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkIndex
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();checkIndex(current,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE).setValue(value/2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getVal
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue().equals(value)
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Iterator<OpenIntToDoubleHashMap>entries=this.entrySet.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,index=entries.size();i<index;i++){entries.put(index,value);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,dimension=entries.size();i<dimension;++i){entries.remove(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)current.getKey();entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<N,V>entry=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entry<N,E>entry=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),value,iter.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getValue()==value){checkInde
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594setEntry(entry.getKey(),entry.getValue(),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(inti=0,size=entries.size();i<dimension;++i){entries.remove(0);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getValue();checkIndex(current.getKey(),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entryentry=(Entry)iter.next();checkIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)iter.next();if(entry!=illegalstart
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index).getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entry!=null){if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)enter.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594addEntry(entry.getKey(),entry.getValue()-1,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(current.getValue()+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex(index);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)iter.next();entry.setValue(value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value>DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE||value!=DEFAULT_ZERO_TOLERANCE){if(entries!=null){for(inti=0,size=entries.size();i<size;++i){entries.put(index,value);}}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,size=entries.size();i<size;++i){entries.add(index);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594newEntryIterator(this,DEFAULT_ZERO_TOLERANCE+value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)current.getKey();entry.setValue(current.getValue());
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entries.get(index).getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594Entrycurrent=(Entry)entry.getValue();checkIndex(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=0){for(Iteratoriter=entries.iterator();iter.hasNext();){Entrycurrent=(Entry)iter.next();if(current.getKey()==value){checkIndex}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(entries!=null){for(Iteratoriter=entries.iterator();iter.hasNext();){OpenIntToDoubleHashMapentry=(OpenIntToDoubleHashMap)entry.next();}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java594if(value!=DEFAULT_ZERO_TOLERANCE){for(inti=0,index=entries.size();i<index;++i){entries.put(index,value);}
