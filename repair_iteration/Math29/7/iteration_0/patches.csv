bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }		non-compiled	[CE]  ';'  expected	14	None	add
2	[BUG]  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }		non-compiled	[CE]  ';'  expected	14	None	add
3	[BUG]  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }		non-compiled	[CE]  ';'  expected	14	None	add
4	[BUG]  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]          java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }		non-compiled	[CE]  ';'  expected	14	None	add
5	[BUG]  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]            java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE		non-compiled	[CE]  ')'  expected	14	None	add
6	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]    java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	13	None	replace
7	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]      java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	13	None	replace
8	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]        java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  incomparable  types:  int  and  <null>	13	None	replace
9	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]          java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	13	None	replace
10	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }		non-compiled	[CE]  ';'  expected	14	None	add
11	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }		non-compiled	[CE]  ';'  expected	14	None	add
12	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }		non-compiled	[CE]  ';'  expected	14	None	add
13	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]          java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }		non-compiled	[CE]  ';'  expected	14	None	add
14	[BUG]  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  ';'  expected	14	None	add
15	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]    java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	13	None	replace
16	[BUG]  [BUGGY]  checkMultiply(v.getDimension());  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  checkMultiply(v.getDimension());  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v.getDimension());	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
17	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  ';'  expected	13	None	replace
18	[BUG]  [BUGGY]  checkDimensions(v.getDimension());  [CE]  cannot  find  symbol  [FE]    java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  checkDimensions(v.getDimension());  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v.getDimension());	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
19	[BUG]  [BUGGY]  checkAccess(v.getDimension());  [CE]  cannot  find  symbol  [FE]      java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]  checkAccess(v.getDimension());  [BUGGY]  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v.getDimension());	checkVectorDimensions(v.getDimension());  	non-compiled	[CE]  cannot  find  symbol	13	None	replace
20	[BUG]  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]    java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }		non-compiled	[CE]  ';'  expected	14	None	add
21	[BUG]  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]      java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }		non-compiled	[CE]  ';'  expected	14	None	add
22	[BUG]  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]        java.lang.AssertionError:  entry  #0  [CONTEXT]  public  OpenMapRealVector  ebeMultiply(RealVector  v)  {  [BUGGY]    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]  checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	    if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }		non-compiled	[CE]  ';'  expected	14	None	add
