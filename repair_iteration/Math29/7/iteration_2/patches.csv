bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
2	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
3	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
4	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  v.getValue());  }  [CE]  cannot  find  symbol  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  v.getValue());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  v.getValue());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    v.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
5	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(variable.getDimension(),  v.getValue());  }  [CE]  cannot  find  symbol  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(variable.getDimension(),  v.getValue());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(variable.getDimension(),  v.getValue());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    v.getValue());    }    	non-compiled	[CE]  cannot  find  symbol  	78	None	replace
6	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension(),  v.getValue()));  }  [CE]  cannot  find  symbol  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension(),  v.getValue()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension(),  v.getValue()));  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    v.getValue());    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
7	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(    	non-compiled	[CE]  ')'  expected	28	None	replace
8	[BUG]  [BUGGY]  CheckVectorDimensions(v,  current.getDimension());  [CE]  cannot  find  symbol  current  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  current.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckVectorDimensions(v,  current.getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  current	1	None	replace
9	[BUG]  [BUGGY]  CheckVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
10	[BUG]  [BUGGY]  CheckVectorDimensions(v,  v.getDimension());  [CE]  cannot  find  symbol  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckVectorDimensions(v,  v.getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
11	[BUG]  [BUGGY]  CheckVectorDimensions(v,  getDimension());  [CE]  cannot  find  symbol  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckVectorDimensions(v,  getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
12	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);	  checkMultiply(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	3	None	replace
13	[BUG]  [BUGGY]  checkMultiply(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
14	[BUG]  [BUGGY]  checkMultiply(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  current  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  current	3	None	replace
15	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	29	None	replace
16	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	29	None	replace
17	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	70	None	replace
18	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  this.v.getEntryIterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  this.v.getEntryIterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  this.v.getEntryIterator();	  Iterator    <    RealVector>    entries    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	56	None	replace
19	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  current.getEntryIterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  current.getEntryIterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  current.getEntryIterator();	  Iterator    <    RealVector>    entries    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	56	None	replace
20	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  v.iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  v.iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  v.iterator();	  Iterator    <    RealVector>    entries    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	56	None	replace
21	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  <  [CE]  >  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  <  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  <	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  >  expected	19	None	replace
22	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  ';'  expected	19	None	replace
23	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
24	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealV  [CE]  '('  or  '['  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealV  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealV	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  '('  or  '['  expected	60	None	replace
25	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
26	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	67	None	replace
27	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  entries  =  entries.iterator();  }  [CE]  cannot  find  symbol  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  entries  =  entries.iterator();  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  entries  =  entries.iterator();  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
28	[BUG]  [BUGGY]  CheckVectorDimensions(new  RealVector(v.getDimension()));  [CE]  RealVector  is  abstract;  cannot  be  instantiated  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(new  RealVector(v.getDimension()));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckVectorDimensions(new  RealVector(v.getDimension()));	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  RealVector  is  abstract;  cannot  be  instantiated	2	None	replace
29	[BUG]  [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
30	[BUG]  [BUGGY]  Vector  res  =  new  RealVector(v.getDimension());  [CE]  cannot  find  symbol  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Vector  res  =  new  RealVector(v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Vector  res  =  new  RealVector(v.getDimension());	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
31	[BUG]  [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
32	[BUG]  [BUGGY]  checkDimensions(v,  res.getDimension());  [CE]  cannot  find  symbol  res  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  res.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  res.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	14	None	replace
33	[BUG]  [BUGGY]  checkDimensions(v,  realAccess.getDimension());  [CE]  cannot  find  symbol  realAccess  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  realAccess.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  realAccess.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realAccess	14	None	replace
34	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	92	None	replace
35	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
36	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension());  }  [CE]  ';'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".equals(v.getDimension()));    }    	non-compiled	[CE]  ';'  expected	26	None	replace
37	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension());  }  [CE]  ';'  expected  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".equals(v.getDimension()));    }    	non-compiled	[CE]  ';'  expected	26	None	replace
38	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	93	None	replace
39	[BUG]  [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  value);  [CE]  double  cannot  be  dereferenced  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  epsilon.getDimension(),  value);	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
40	[BUG]  [BUGGY]  checkDimensions(v,  value.getDimension());  [CE]  cannot  find  symbol  value  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  value.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  value.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	15	None	replace
41	[BUG]  [BUGGY]  checkDimensions(epsilon,  v.getDimension());  [CE]  cannot  find  symbol  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(epsilon,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(epsilon,  v.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
42	[BUG]  [BUGGY]  checkDimensions(v,  epsilon,  value.getDimension());  [CE]  cannot  find  symbol  value  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon,  value.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  epsilon,  value.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  cannot  find  symbol  value	15	None	replace
43	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	10	None	replace
44	[BUG]  [BUGGY]  checkAccess(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);	  checkAccess(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	32	None	replace
45	[BUG]  [BUGGY]  checkAccess(epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  double  cannot  be  dereferenced  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkAccess(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  double  cannot  be  dereferenced	32	None	replace
46	[BUG]  [BUGGY]  checkAccess(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  current  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkAccess(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  current	32	None	replace
47	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	51	None	replace
48	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	51	None	replace
49	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	59	None	replace
50	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	59	None	replace
51	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	59	None	replace
52	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                          java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	59	None	replace
53	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	99	None	replace
54	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	99	None	replace
55	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    >    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	74	None	replace
56	[BUG]  [BUGGY]  checkAccess(v,  epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  epsilon.getDimension());	  checkAccess(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
57	[BUG]  [BUGGY]  checkAccess(v,  res.getDimension());  [CE]  cannot  find  symbol  res  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  res.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  res.getDimension());	  checkAccess(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	35	None	replace
58	[BUG]  [BUGGY]  checkAccess(v,  realVector.getDimension());  [CE]  cannot  find  symbol  realVector  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  realVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  realVector.getDimension());	  checkAccess(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realVector	35	None	replace
59	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	47	None	replace
60	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	47	None	replace
61	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".equals(v.getDimension()));  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]                          java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".equals(v.getDimension()));  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".equals(v.getDimension()));  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	47	None	replace
62	[BUG]  [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
63	[BUG]  [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
64	[BUG]  [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  &&  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE))  {  throw  new  IllegalStateException( " ");  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
65	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".equals(v.getDimension()));  }  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".equals(v.getDimension()));  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".equals(v.getDimension()));  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	25	None	replace
66	[BUG]  [BUGGY]  if(v.getEntry()  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getEntry()  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	31	None	replace
67	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
68	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getEntry()!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	30	None	replace
69	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	82	None	replace
70	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	82	None	replace
71	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	82	None	replace
72	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  }  [CE]  cannot  find  symbol  value  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  cannot  find  symbol  value	37	None	replace
73	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  }  [CE]  cannot  find  symbol  value  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  cannot  find  symbol  value	37	None	replace
74	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  values);  }  [CE]  cannot  find  symbol  values  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  values);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  values);  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  cannot  find  symbol  values	37	None	replace
75	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [CE]  ')'  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFA    	non-compiled	[CE]  ')'  expected	72	None	replace
76	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFA    	non-compiled	[CE]  ')'  expected	72	None	replace
77	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFA    	non-compiled	[CE]  ')'  expected	72	None	replace
78	[BUG]  [BUGGY]  if(v.getDimension()!=  null  ||  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  ||  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null  ||  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null    ||    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
79	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null    ||    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
80	[BUG]  [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
81	[BUG]  [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
82	[BUG]  [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  [CE]  illegal  start  of  expression  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
83	[BUG]  [BUGGY]  checkAccess(v.getDimension(),  defult_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defult_ZERO_TOLERANCE  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v.getDimension(),  defult_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v.getDimension(),  defult_ZERO_TOLERANCE);	  checkAccess(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defult_ZERO_TOLERANCE	34	None	replace
84	[BUG]  [BUGGY]  CheckAccess(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckAccess(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckAccess(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkAccess(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
85	[BUG]  [BUGGY]  checkAccess(v.getDimension(),  defULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defULT_ZERO_TOLERANCE  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v.getDimension(),  defULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v.getDimension(),  defULT_ZERO_TOLERANCE);	  checkAccess(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defULT_ZERO_TOLERANCE	34	None	replace
86	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	84	None	replace
87	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	84	None	replace
88	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	84	None	replace
89	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  v.getEntrySet();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  v.getEntrySet();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  v.getEntrySet();	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	54	None	replace
90	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  v.getEntries();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  v.getEntries();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  v.getEntries();	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	54	None	replace
91	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  >=  null)  {  checkVectorDimensions(v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  >=  null)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null  &&  v.getDimension()  >=  null)  {  checkVectorDimensions(v.getDimension());  }	  if(v.getDimension()!=    null    &&    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	79	None	replace
92	[BUG]  [BUGGY]  checkDimensions(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [CE]  cannot  find  symbol  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());	  checkDimensions(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
93	[BUG]  [BUGGY]  checkDimensions(v,  RealVector.getDimension());  [CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  RealVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  RealVector.getDimension());	  checkDimensions(v,    v.getDimension());    	non-compiled	[CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context	13	None	replace
94	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  this.v.getEntrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  this.v.getEntrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  this.v.getEntrySet().iterator();	  Iterator    <    RealVector>    entries    =    v.getEntrySet().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	55	None	replace
95	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  current.getEntrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  current.getEntrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  current.getEntrySet().iterator();	  Iterator    <    RealVector>    entries    =    v.getEntrySet().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	55	None	replace
96	[BUG]  [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.    	non-compiled	[CE]  ';'  expected	68	None	replace
97	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries  [CE]  ';'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.    	non-compiled	[CE]  ';'  expected	68	None	replace
98	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	76	None	replace
99	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	76	None	replace
100	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,RealVector)  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,RealVector)	76	None	replace
101	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,int)  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,int)	81	None	replace
102	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,RealVector)  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,RealVector)	81	None	replace
103	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,int)  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,int)	81	None	replace
104	[BUG]  [BUGGY]  checkMultiply(v,  epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  epsilon.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
105	[BUG]  [BUGGY]  checkMultiply(v,  res.getDimension());  [CE]  cannot  find  symbol  res  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  res.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  res.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  res	5	None	replace
106	[BUG]  [BUGGY]  checkMultiply(v,  this.epsilon.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  this.epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  this.epsilon.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	5	None	replace
107	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  ';'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  ';'  expected	95	None	replace
108	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	95	None	replace
109	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
110	[BUG]  [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
111	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int,double)  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    checkVectorDimensions(null,    v.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int,double)	38	None	replace
112	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int,double)  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }	  if(v!=    null)    {    checkVectorDimensions(null,    v.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int,double)	38	None	replace
113	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  value);  }  [CE]  cannot  find  symbol  value  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  value);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  value);  }	  if(v!=    null)    {    checkVectorDimensions(null,    v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  value	38	None	replace
114	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  int);  }  [CE]  '.class'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  int);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(null,  v.getDimension(),  int);  }	  if(v!=    null)    {    checkVectorDimensions(null,    v.getDimension());    }    	non-compiled	[CE]  '.class'  expected	38	None	replace
115	[BUG]  [BUGGY]  CheckMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckMultiply(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
116	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  defult_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defult_ZERO_TOLERANCE  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  defult_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v.getDimension(),  defult_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defult_ZERO_TOLERANCE	6	None	replace
117	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  defULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  defULT_ZERO_TOLERANCE  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  defULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v.getDimension(),  defULT_ZERO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  defULT_ZERO_TOLERANCE	6	None	replace
118	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_NUMBER)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	86	None	replace
119	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_NUMBER)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	86	None	replace
120	[BUG]  [BUGGY]  checkMultiply(v,  realAccess.getDimension());  [CE]  cannot  find  symbol  realAccess  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  realAccess.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  realAccess.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol  realAccess	4	None	replace
121	[BUG]  [BUGGY]  checkMultiply(v,  RealVector.getDimension());  [CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  RealVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  RealVector.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  non-static  method  getDimension()  cannot  be  referenced  from  a  static  context	4	None	replace
122	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [CE]  no  suitable  method  found  for  checkVectorDimensions(int,double)  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  }	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(int,double)	36	None	replace
123	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension());  }  [CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int)  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(null,  v.getDimension());  }	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(<null>,int)	36	None	replace
124	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  ')'  expected	65	None	replace
125	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  ')'  expected	65	None	replace
126	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  ')'  expected	65	None	replace
127	[BUG]  [BUGGY]  Annotation  <  RealVector>  entry  =  v.getEntry();  [CE]  cannot  find  symbol  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Annotation  <  RealVector>  entry  =  v.getEntry();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Annotation  <  RealVector>  entry  =  v.getEntry();	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
128	[BUG]  [BUGGY]  vices.put(v.getDimension(),  v);  [CE]  cannot  find  symbol  vices  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  vices.put(v.getDimension(),  v);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	vices.put(v.getDimension(),  v);	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol  vices	52	None	replace
129	[BUG]  [BUGGY]  vices.add(new  OpenMapRealVector(v));  [CE]  cannot  find  symbol  vices  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  vices.add(new  OpenMapRealVector(v));  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	vices.add(new  OpenMapRealVector(v));	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol  vices	52	None	replace
130	[BUG]  [BUGGY]  AllVectors(v.getDimension());  [CE]  cannot  find  symbol  [FE]                          java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  AllVectors(v.getDimension());  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	AllVectors(v.getDimension());	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
131	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	88	None	replace
132	[BUG]  [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
133	[BUG]  [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
134	[BUG]  [BUGGY]  ||  v.getType()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getType()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getType()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
135	[BUG]  [BUGGY]  checkAccess(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [CE]  cannot  find  symbol  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());	  checkAccess(v,    v.getDimension());    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
136	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension());  }  [CE]  ';'  expected  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ".equals(v.getDimension()));    }    	non-compiled	[CE]  ';'  expected	48	None	replace
137	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension());  }  [CE]  ';'  expected  [FE]                          java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ".equals(v.getDimension()));    }    	non-compiled	[CE]  ';'  expected	48	None	replace
138	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ';'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ';'  expected	53	None	replace
139	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	100	None	replace
140	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.    	non-compiled	[CE]  ')'  expected	66	None	replace
141	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.    	non-compiled	[CE]  ')'  expected	66	None	replace
142	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
143	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
144	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
145	[BUG]  [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	80	None	replace
146	[BUG]  [BUGGY]  checkVectorDimensions(v,  v.getDimension());  [CE]  no  suitable  method  found  for  checkVectorDimensions(RealVector,int)  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkVectorDimensions(v,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkVectorDimensions(v,  v.getDimension());	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  no  suitable  method  found  for  checkVectorDimensions(RealVector,int)	80	None	replace
147	[BUG]  [BUGGY]  checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [CE]  cannot  find  symbol  value  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  value);	  checkDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  value	12	None	replace
148	[BUG]  [BUGGY]  checkDimensions(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  current  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  current.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol  current	12	None	replace
149	[BUG]  [BUGGY]  checkDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  cannot  find  symbol  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
150	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [CE]  ')'  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFA    	non-compiled	[CE]  ')'  expected	72	None	replace
151	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFA    	non-compiled	[CE]  ')'  expected	72	None	replace
152	[BUG]  [BUGGY]  if(v.getEntry()  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getEntry()  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.getEntry()!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	30	None	replace
153	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	58	None	replace
154	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	71	None	replace
155	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	60	None	replace
156	[BUG]  [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	76	None	replace
157	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,RealVector)  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,RealVector)	76	None	replace
158	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  ')'  expected	65	None	replace
159	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  ')'  expected	65	None	replace
160	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  >>  ')'  expected  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  >>  ')'  expected  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  >>  ')'  expected	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  ')'  expected	65	None	replace
161	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  }  [CE]  ')'  expected  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	31	None	replace
162	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZRO_TOLERANCE);  [CE]  cannot  find  symbol  DEFAULT_ZRO_TOLERANCE  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_ZRO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v.getDimension(),  DEFAULT_ZRO_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_ZRO_TOLERANCE	6	None	replace
163	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
164	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	82	None	replace
165	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()  ==  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	82	None	replace
166	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	82	None	replace
167	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	102	None	replace
168	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	102	None	replace
169	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	29	None	replace
170	[BUG]  [BUGGY]  |  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  |  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	|  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
171	[BUG]  [BUGGY]  ||  v.getEntry()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getEntry()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getEntry()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
172	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  cannot  find  symbol  DEFAULT_NUMBER_TOLERANCE  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_NUMBER_TOLERANCE	84	None	replace
173	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  this.openMapRealVector.getEntrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  this.openMapRealVector.getEntrySet().iterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  this.openMapRealVector.getEntrySet().iterator();	  Iterator    <    RealVector>    entries    =    v.getEntrySet().iterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	55	None	replace
174	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  ';'  expected	67	None	replace
175	[BUG]  [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  entries  =  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  entries  =  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  entries  =	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  ';'  expected	67	None	replace
176	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	43	None	replace
177	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  }  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	70	None	replace
178	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension()));  }  [CE]  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension()));  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ").equals(v.getDimension()));  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".equals(v.getDimension()));    }    	non-compiled	[CE]  	26	None	replace
179	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  ')'  expected	59	None	replace
180	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension()));  }  [CE]  [FE]                        java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension()));  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ").equals(v.getDimension()));  }	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ".equals(v.getDimension()));    }    	non-compiled	[CE]  	48	None	replace
181	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
182	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ')'  expected	50	None	replace
183	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	83	None	replace
184	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  ')'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  ')'  expected	83	None	replace
185	[BUG]  [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.    	non-compiled	[CE]  ';'  expected	68	None	replace
186	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_NUMBER_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	64	None	replace
187	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_NUMBER)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_NUMBER)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getDimension()!=    DEFAULT_NUMBER)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	86	None	replace
188	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  current.getDimension(),  v.getValue());  }  [CE]  cannot  find  symbol  current  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  current.getDimension(),  v.getValue());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v,  current.getDimension(),  v.getValue());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    v.getValue());    }    	non-compiled	[CE]  cannot  find  symbol  current	78	None	replace
189	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".equals(v.getDimension()));  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".equals(v.getDimension()));  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".equals(v.getDimension()));  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(boolean)	47	None	replace
190	[BUG]  [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  double  cannot  be  dereferenced  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  epsilon.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	15	None	replace
191	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
192	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ".);    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
193	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v  [CE]  ')'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.    	non-compiled	[CE]  ')'  expected	66	None	replace
194	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,RealVector)  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE,  v);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double,RealVector)	81	None	replace
195	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double)  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  OpenMapRealVector(OpenMapRealVector,double)	81	None	replace
196	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_TOLERANCE)    {    checkVectorDimensions(v.getDimension());    }    else    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	93	None	replace
197	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
198	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE  [CE]  ')'  expected  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DE	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	21	None	replace
199	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	95	None	replace
200	[BUG]  [BUGGY]  Iterator  <  RealVector>  entries  =  this.openMapRealVector.getEntryIterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  RealVector>  entries  =  this.openMapRealVector.getEntryIterator();  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  RealVector>  entries  =  this.openMapRealVector.getEntryIterator();	  Iterator    <    RealVector>    entries    =    v.getEntryIterator();    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	56	None	replace
201	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	85	None	replace
202	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  cannot  find  symbol  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
203	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  ';'  expected	96	None	replace
204	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v),  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v),  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v),  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	80	None	replace
205	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  this);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  this);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()),  this);  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
206	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".equals(v.getDimension()));  }  [CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".equals(v.getDimension()));  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".equals(v.getDimension()));  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalStateException(boolean)	25	None	replace
207	[BUG]  [BUGGY]  checkDimensions(v,  dataIterator.getDimension());  [CE]  cannot  find  symbol  dataIterator  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  dataIterator.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  dataIterator.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  cannot  find  symbol  dataIterator	14	None	replace
208	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	101	None	replace
209	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  ';'  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ';'  expected	101	None	replace
210	[BUG]  [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator()  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator()  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator()	  if(v.getDimension()    ==    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  ';'  expected	20	None	replace
211	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [CE]  incomparable  types:  int  and  <null>  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(v,  v.getDimension());  }	  if(v.getDimension()!=    null    &&    v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  incomparable  types:  int  and  <null>	79	None	replace
212	[BUG]  [BUGGY]  if(v.getEntry()  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  ';'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getEntry()  ==  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.getEntry()!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  ';'  expected	103	None	replace
213	[BUG]  [BUGGY]  Iterator  <  Entry>  entries  =  v.getEntrySet().iterator();  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  Iterator  <  Entry>  entries  =  v.getEntrySet().iterator();  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	Iterator  <  Entry>  entries  =  v.getEntrySet().iterator();	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	44	None	replace
214	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  ')'  expected  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  ')'  expected	41	None	replace
215	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	25	None	replace
216	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }  [CE]  <identifier>  expected  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ".);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
217	[BUG]  [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  checkVectorDimensions(v.getDimension());  }	  if(v    ==    null)    {    checkVectorDimensions(v.getDimension());    }    	non-compiled	[CE]  type  OpenIntToDoubleHashMap.Iterator  does  not  take  parameters	36	None	replace
218	[BUG]  [BUGGY]  checkAccess(v,  DEFAULT_ZERO_TOLERANCE.getDimension());  [CE]  double  cannot  be  dereferenced  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  DEFAULT_ZERO_TOLERANCE.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  DEFAULT_ZERO_TOLERANCE.getDimension());	  checkAccess(v,    current.getDimension());    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
219	[BUG]  [BUGGY]  checkAccess(v,  this.epsilon.getDimension());  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  this.epsilon.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  this.epsilon.getDimension());	  checkAccess(v,    current.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
220	[BUG]  [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  ==  DEFAULT_ZERO)  {  if(v.getDimension()!=  DEFAULT_ZERO)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
221	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector[]  {  v,  v.getDimension()  }  );  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(new  RealVector[]  {  v,  v.getDimension()  }  );  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(new  RealVector[]  {  v,  v.getDimension()  }  );  }	  if(v!=    null)    {    checkVectorDimensions(null,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
222	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(this,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(this,  v.getDimension());  }	  if(v!=    null)    {    checkVectorDimensions(null,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
223	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null  &&  v.getDimension()!=  null)  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
224	[BUG]  [BUGGY]  CheckIntToDoubleHashMap(v.getDimension())  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckIntToDoubleHashMap(v.getDimension())  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckIntToDoubleHashMap(v.getDimension())  {  checkVectorDimensions(new  RealVector(v.getDimension()));  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
225	[BUG]  [BUGGY]  checkVectorDimensions(new  RealVector(v.getDimension()));  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkVectorDimensions(new  RealVector(v.getDimension()));  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkVectorDimensions(new  RealVector(v.getDimension()));	  if(v.getDimension()!=    null)    {    checkVectorDimensions(new    RealVector(v.getDimension()));    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
226	[BUG]  [BUGGY]  checkMultiply(v,  this.entries.getDimension());  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  this.entries.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  this.entries.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
227	[BUG]  [BUGGY]  checkMultiply(v,  this.entry.getDimension());  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  this.entry.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  this.entry.getDimension());	  checkMultiply(v,    current.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
228	[BUG]  [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
229	[BUG]  [BUGGY]  ||  v.getEntry()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getEntry()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getEntry()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
230	[BUG]  [BUGGY]  checkMultiply(v,  realVector.getDimension());  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  realVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  realVector.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
231	[BUG]  [BUGGY]  checkMultiply(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v,  DEFAULT_ZERO_TOLERANCE,  v.getDimension());	  checkMultiply(v,    v.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
232	[BUG]  [BUGGY]  checkDimensions(v,  epsilon,  current.getDimension());  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon,  current.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  epsilon,  current.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
233	[BUG]  [BUGGY]  checkDimensions(v,  epsilon,  v.getDimension());  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  epsilon,  v.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  epsilon,  v.getDimension());	  checkDimensions(v,    epsilon.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
234	[BUG]  [BUGGY]  checkAccess(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v,  v.getDimension(),  DEFAULT_ZERO_TOLERANCE);	  checkAccess(v,    v.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
235	[BUG]  [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalArgumentException( " ".);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
236	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
237	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
238	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
239	[BUG]  [BUGGY]  checkAccess(v.getDimension(),  DEFAULT_ZRO_TOLERANCE);  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v.getDimension(),  DEFAULT_ZRO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v.getDimension(),  DEFAULT_ZRO_TOLERANCE);	  checkAccess(v.getDimension(),    value);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
240	[BUG]  [BUGGY]  checkAccess(v.getDimension(),  DEFULT_ZERO_TOLERANCE);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkAccess(v.getDimension(),  DEFULT_ZERO_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkAccess(v.getDimension(),  DEFULT_ZERO_TOLERANCE);	  checkAccess(v.getDimension(),    value);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
241	[BUG]  [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()!=  null  &&  v.getDimension()  ==  null)  {  checkVectorDimensions(v,  v.getDimension());  }	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
242	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  <  Entry>  iter  =  entries.iterator();  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  <  Entry>  iter  =  entries.iterator();  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  <  Entry>  iter  =  entries.iterator();  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.iterator();    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
243	[BUG]  [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
244	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
245	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
246	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
247	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
248	[BUG]  [BUGGY]  ||  v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  ||  v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	||  v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);	  ||    v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
249	[BUG]  [BUGGY]  checkDimensions(v,  DEFAULT_ZERO_TOLERANCE.getDimension());  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  DEFAULT_ZERO_TOLERANCE.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  DEFAULT_ZERO_TOLERANCE.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
250	[BUG]  [BUGGY]  checkDimensions(v,  realVector.getDimension());  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  realVector.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  realVector.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
251	[BUG]  [BUGGY]  checkDimensions(v,  this.entry.getDimension());  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkDimensions(v,  this.entry.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkDimensions(v,  this.entry.getDimension());	  checkDimensions(v,    current.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
252	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  throw  new  IllegalStateException( " ");  }	  if(v!=    null)    {    if(v.getDimension()    <    =    DEFAULT_ZERO_TOLERANCE)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
253	[BUG]  [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
254	[BUG]  [BUGGY]  CheckVectorDimensions(v,  this.entries.getDimension());  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  CheckVectorDimensions(v,  this.entries.getDimension());  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	CheckVectorDimensions(v,  this.entries.getDimension());	  CheckVectorDimensions(v.getDimension());    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
255	[BUG]  [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
256	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  <  =  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v!=    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
257	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
258	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()  >=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
259	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFA	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFA    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
260	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
261	[BUG]  [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.getEntry()!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
262	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  ')'  expected  {  return  new  OpenMapRealVector(this,  v.getDimension()  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()!=  ')'  expected  {  return  new  OpenMapRealVector(this,  v.getDimension()  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()!=  ')'  expected  {  return  new  OpenMapRealVector(this,  v.getDimension()	  if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension()    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
263	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.isMultiply())  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
264	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [CE]  illegal  start  of  expression  [FE]                      java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
265	[BUG]  [BUGGY]  if(v.isMultiply())  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  checkVectorDimensions(v.getDimension());  }  else  {  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.	  if(v.getDimension()!=    null)    {    checkVectorDimensions(v.getDimension());    }    else    {    OpenMapRealVector    res    =    new    OpenMapRealVector(this);    Iterator    iter    =    entries.    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
266	[BUG]  [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_TOLERANCE);  [CE]  illegal  start  of  expression  [FE]                    java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  checkMultiply(v.getDimension(),  DEFAULT_TOLERANCE);  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	checkMultiply(v.getDimension(),  DEFAULT_TOLERANCE);	  checkMultiply(v.getDimension(),    value);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
267	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
268	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
269	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  realAccess.getDimension(),  v.getValue());  }  [CE]  illegal  start  of  expression  [FE]            java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  realAccess.getDimension(),  v.getValue());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v,  realAccess.getDimension(),  v.getValue());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    v.getValue());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
270	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  map.getDimension(),  v.getValue());  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v,  map.getDimension(),  v.getValue());  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v,  map.getDimension(),  v.getValue());  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    v.getValue());    }    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
271	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
272	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  ==  DEFAULT_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE    ||    v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
273	[BUG]  [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  epsilon);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  epsilon);  }  [BUGGY]      OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  checkVectorDimensions(v.getDimension(),  DEFAULT_ZERO_TOLERANCE,  epsilon);  }	  if(v!=    null)    {    checkVectorDimensions(v.getDimension(),    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
274	[BUG]  [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAUL  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAUL  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null)  {  if(v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAUL	  if(v    ==    null)    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
275	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
276	[BUG]  [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply())  {  if(v.getDimension()  <  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAULT_ZERO_TOLERANCE);  }	  if(v.isMultiply())    {    if(v.getDimension()    ==    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
277	[BUG]  [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [CE]  illegal  start  of  expression  [FE]              java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v  ==  null  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this);  }	  if(v    ==    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this);    }    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
278	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()  >  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v!=    null)    {    if(v.getDimension()    <    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
279	[BUG]  [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [CE]  illegal  start  of  expression  [FE]                java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v.isMultiply()  ||  v.getDimension()!=  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  v.getDimension());  }	  if(v.isMultiply())    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    v.getDimension());    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
280	[BUG]  [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAUL  [CE]  illegal  start  of  expression  [FE]                  java.lang.AssertionError:  entry  #0      [CONTEXT]      public  OpenMapRealVector  ebeMultiply(RealVector  v)  {      [BUGGY]  if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAUL  [BUGGY]      checkVectorDimensions(v.getDimension());  OpenMapRealVector  res  =  new  OpenMapRealVector(this);  Iterator  iter  =  entries.iterator();  while  (iter.hasNext())  {  iter.advance();  res.setEntry(iter.key(),  iter.value()  *  v.getEntry(iter.key()));  }      [CLASS]  OpenMapRealVector  OpenMapEntry  OpenMapSparseIterator  [METHOD]  ebeMultiply  [RETURN_TYPE]  OpenMapRealVector  RealVector  v  [VARIABLES]  Entry  current  boolean  double  DEFAULT_ZERO_TOLERANCE  d  epsilon  value  RealVector  v  Iterator  iter  OpenMapRealVector  res  OpenIntToDoubleHashMap  entries  larger  randomAccess  long  serialVersionUID  int  dimension  expectedSize  i  key  resize  virtualSize  	projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java	0.5773502691896258	360	360	3	replace	if(v!=  null)  {  if(v.getDimension()!=  DEFAULT_ZERO_TOLERANCE  ||  v.getDimension()  ==  DEFAULT_ZERO_TOLERANCE)  {  return  new  OpenMapRealVector(this,  DEFAUL	  if(v!=    null)    {    if(v.getDimension()!=    DEFAULT_ZERO_TOLERANCE)    {    return    new    OpenMapRealVector(this,    DEFAULT_ZERO_TOLERANCE);    }    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
