projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(index)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)iter.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591iter.remove();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryMap.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryList.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)||isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null)?this.entries.iterator():null;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newDouble(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),this);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),true);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entry.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)||entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)||isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)||entries.containsValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)||entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)||isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(index<0||!entries.containsKey(index)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)||isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>entries=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)&&isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),current);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Ilerator<Entry>iter=entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)&&isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entrySet.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entryList.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(newDouble(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entryList.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=openMaps.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null?entries.iterator():DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null?entries.iterator():DEFAULT_ZERO_TOLERANCE).iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&!isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&!isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=openMaps.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)iter.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(DEFAULT_ZERO_TOLERANCE));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,DEFAULT_ZERO_TOLERANCE+value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591iter.setValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=entry.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entries.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(0);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entryList.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null?this.entries.iterator():DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(entries!=null?entries.iterator():DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(entries!=null?this.entries.iterator():DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)&&isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)||isEnabled(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(newDouble(index));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(newDouble(index),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)||isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=this.openMaps.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=this.entryMaps.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entries.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entries.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(DEFAULT_ZERO_TOLERANCE),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(DEFAULT_ZERO_TOLERANCE+1));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryList.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&isEnabled(DEFAULT_ZERO_TOLERANCE)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryMap.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryMap.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryMap.get(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Ilerator<Entry>iter=this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index+2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(index<0||!entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(index<0||!entries.containsKey(key)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(index<DEFAULT_ZERO_TOLERANCE||!entries.containsKey(index)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),false);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.put(index,newEntry(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry(index,newEntry(value),false);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,DEFAULT_ZERO_TOLERANCE,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)&&isEnabled(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)&&isEqualValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=entry.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entry<K,V>entry=entries.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,value/1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)&&entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)&&!entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)||!entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null?this.entries.iterator():DEFAULT_ZERO_TOLERANCE).iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(entries!=null?entries.iterator():DEFAULT_ZERO_TOLERANCE).iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(entries!=null?this.entries.iterator():DEFAULT_ZERO_TOLERANCE).iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entrySet.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entrySet.get(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,value+DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(index,DEFAULT_ZERO_TOLERANCE+value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.put(index,value+DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=this.current.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591iter.setIndex(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591iter.setValue(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value/1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)&&!isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)||!isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryList.next();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryList.get(index-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryList.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)this.entryList.get(index,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)||!isDefaultValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&!isEmptyValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.openMaps.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.entryMaps.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries==null)?this.entries.iterator():null;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null)?this.entries.iterator():newOpenIntToDoubleHashMap();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null)?entries.iterator():null;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry(index,newEntry(value),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newEntry(value),DEFAULT_ZERO_TOLERANCE+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>entries=current.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>entries=(this.entries!=null)?this.entries.iterator():null;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>entries=(this.entries!=null?this.entries.iterator():null);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&isEnabled(DEFAULT_ZERO_TOLERANCE)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)&&entries.containsValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)&&!entries.containsValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newDouble(value),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newDouble(value),this);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newDouble(value),true);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&!entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)&&entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591if(current!=null){entries.put(index,newEntry(value),current);}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,value-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,value+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&isEqualValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(index<0&&!entries.containsKey(index)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)&&entries.containsValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>entries=this.entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591iter.setDefaultValue(value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=(this.entries!=null)?entries.iterator():this.entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=this.entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null)?this.entries.iterator():newOpenMapSparseIterator<Entry>();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.entries.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=this.entries.keySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,DEFAULT_ZERO_TOLERANCE-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(key)&&entries.containsKey(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)||entries.containsKey(key)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&!isRealVector(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&!isLocal(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entrySet.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entryList.get(index+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entrySet().put(index,newEntry(value),true);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entrySet().put(index,newEntry(value),false);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newDouble(value-1));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entry<K,V>current=entry.getValue();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&isEqualValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&isRealVector(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(newDouble(value),index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries==null?entries.iterator():DEFAULT_ZERO_TOLERANCE).iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index-1+1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)entries.get(index-1,value);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entrySet().put(index,newEntry(value),this);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Ilerator<Entry>iter=entries.values().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries==null?entries.iterator():DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&!isLocalValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value-2);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>entries=(this.entries!=null)?this.entries.iterator():entries;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(value/DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(value,DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)||entries.containsValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=entry.entrySet().iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=(this.entries!=null?entries.iterator():DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iteratoriter=(this.entries!=null)?this.entries.iterator():entries.iterator();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(value)&&isEpsilon(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&!isLongValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&!isEmptyValue(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Entrycurrent=(Entry)iter.getKey();
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)&&isEpsilon(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,newDouble(value)-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entries.put(index,DEFAULT_ZERO_TOLERANCE+value-1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value,newEntry(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value,newEntry(value),true);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null?entries.iterator():DEFAULT_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value*1);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entrySet.put(index,newEntry(value),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value,newEntry(value),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591iter.setValue(DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(value)&&isEpsilon(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(newDouble(value),DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591this.entry.setValue(newDouble(value));
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entry.setValue(value,DEFAULT_ZERO_TOLERANCE+index);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591entrySet.put(index,value+DEFAULT_ZERO_TOLERANCE);
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591if(entries.containsKey(index)){entries.put(index,newEntry(DEFAULT_ZERO_TOLERANCE));}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591if(entries.containsKey(index)){entries.put(index,newEntry(DEFAULT_ZERO_TOLERANCE));}else{entries.put(index,newEntry(DEFAULT_ZERO_TOLERANCE));}
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591Iterator<Entry>iter=(this.entries!=null)?this.entries.iterator():DEFAULT_ZERO_TOLERANCE;
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(!entries.containsKey(index)&&isEpsilon(value)){
projects/Math29/src/main/java/org/apache/commons/math3/linear/OpenMapRealVector.java591}elseif(entries.containsKey(key)||isEpsilon(value)){
