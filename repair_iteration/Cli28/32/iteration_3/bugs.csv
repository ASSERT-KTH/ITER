bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  t  =  iterator.next()  +  argumentList.size();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  t  =  iterator.next()  +  argumentList.size();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	t  =  iterator.next()  +  argumentList.size();	  t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  t  =  iterator.next()  +  argumentList.length;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  t  =  iterator.next()  +  argumentList.length;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	t  =  iterator.next()  +  argumentList.length;	  t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.listIterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =  tokenList.listIterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  tokenList.listIterator();	  Iterator    <    String>    iterator    =    tokenList.next();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
4	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  this.stopAtNonOption;	  Option    group    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  blockAtNonOption;	  Option    group    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  options;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  options;	  Option    group    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  arguments;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  arguments;	  Option    group    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.getValue();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.getValue();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next()?  null  :  iterator.getValue();	  Option    group    =    iterator.next()?    null    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
9	[BUG]  [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.remove();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.remove();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next()?  null  :  iterator.remove();	  Option    group    =    iterator.next()?    null    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
10	[BUG]  [BUGGY]  Option  group  =  iterator.next()?  this  :  iterator.next();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next()?  this  :  iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next()?  this  :  iterator.next();	  Option    group    =    iterator.next()?    null    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
11	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  argument;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  argument;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  argument;	  String    t    =    iterator.next()    +    str;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
12	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  str.toLowerCase();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  str.toLowerCase();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  str.toLowerCase();	  String    t    =    iterator.next()    +    str;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  str.trim();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  str.trim();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  str.trim();	  String    t    =    iterator.next()    +    str;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  String  str  =  iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  blockAtNonOption);	  String    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
15	[BUG]  [BUGGY]  String  str  =  iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  this.stopAtNonOption);	  String    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
16	[BUG]  [BUGGY]  String  str  =  iterator.next(),  argument);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  argument);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  argument);	  String    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
17	[BUG]  [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption,  options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  stopAtNonOption,  options);	  String    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  iterator.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =  iterator.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  iterator.iterator();	  Iterator    <    String>    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  options.iterator();	  Iterator    <    String>    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  arguments.iterator();	  Iterator    <    String>    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
21	[BUG]  [BUGGY]  Option  option  =  iterator.next()?  null  :  iterator.next();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next()?  null  :  iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next()?  null  :  iterator.next();	  Option    option    =    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
22	[BUG]  [BUGGY]  Option  option  =  iterator.next()  :  options;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next()  :  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next()  :  options;	  Option    option    =    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
23	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  blockAtNonOption;	  String    str    =(String)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  this.stopAtNonOption;	  String    str    =(String)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  argument;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  argument;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  argument;	  String    str    =(String)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
26	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  arguments;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  arguments;	  String    str    =(String)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options,  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options,  stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  iterator.next()  :  options,  stopAtNonOption;	  Option    option    =(options    ==    null)?    iterator.next()    :    options;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
28	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  arguments;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  iterator.next()  :  arguments;	  Option    option    =(options    ==    null)?    iterator.next()    :    options;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
29	[BUG]  [BUGGY]  String  t  =  itserator.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  itserator.next();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  itserator.next();	  char    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
30	[BUG]  [BUGGY]  optionGroup  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  optionGroup  =(OptionGroup)iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	optionGroup  =(OptionGroup)iterator.next();	  optionGroup    group    =(OptionGroup)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
31	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.getOptionGroup(options,  stopAtNonOption);	  OptionGroup    group    =    iterator.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator);	  OptionGroup    group    =    iterator.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
33	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  blockAtNonOption);	  String    str    =(String)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  this.stopAtNonOption);	  String    str    =(String)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  argument);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  argument);	  String    str    =(String)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  blockAtNonOption);	  Option    option    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
37	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption,  options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  stopAtNonOption,  options);	  Option    option    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
38	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  arguments,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  arguments,  stopAtNonOption);	  Option    option    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
39	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  options);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  options);	  Option    option    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
40	[BUG]  [BUGGY]  String  t  =  iterator.getNext()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.getNext()  +  1;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.getNext()  +  1;	  String    t    =    iterator.next()    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  2;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  2;	  String    t    =    iterator.next()    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options.next(),  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.getOptionGroup(options.next(),  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
43	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  arguments);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  arguments);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
44	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  arguments,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  arguments,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
45	[BUG]  [BUGGY]  Iterator  iterator  =  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  iterator  =  tokenList.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  tokenList.iterator();	  Iterator    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
46	[BUG]  [BUGGY]  Iterator  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  iterator  =  this.requiredOptions.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  this.requiredOptions.iterator();	  Iterator    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
47	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  blockAtNonOption;	  Option    option    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
48	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  options;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  options;	  Option    option    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
49	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  argument;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  argument;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  argument;	  Option    option    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
50	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  arguments;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  arguments;	  Option    option    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
51	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options.clone();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.next()  :  options.clone();	  Option    option    =(options    ==    null)?    iterator.next()    :    options.clone();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
52	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.clone()  :  iterator.next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.clone()  :  iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.clone()  :  iterator.next();	  Option    option    =(options    ==    null)?    iterator.next()    :    options.clone();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  opts.clone();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  opts.clone();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.next()  :  opts.clone();	  Option    option    =(options    ==    null)?    iterator.next()    :    options.clone();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  this;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  this;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  this;	  Iterator    <    String>    iterator    =(iterator.hasNext())?    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
55	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  argument;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  argument;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  argument;	  Iterator    <    String>    iterator    =(iterator.hasNext())?    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
56	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  arguments.trim();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  arguments.trim();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  arguments.trim();	  String    t    =    iterator.next()    +    arguments;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  arguments.length;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  arguments.length;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  arguments.length;	  String    t    =    iterator.next()    +    arguments;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  arguments.toString();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.next()  +  arguments.toString();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  arguments.toString();	  String    t    =    iterator.next()    +    arguments;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  arguments;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  arguments;	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  blockAtNonOption;	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  this.stopAtNonOption;	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  argument;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  argument;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  argument;	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  blockAtNonOption);	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
64	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  this.stopAtNonOption);	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
65	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  arguments);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  arguments);	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
66	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[1]  :  iterator.next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[1]  :  iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[1]  :  iterator.next();	  Iterator    <    String>    iterator    =(iterator.next()    ==    null)?    arguments[0]    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
67	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()!=  null)?  arguments[0]  :  iterator.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()!=  null)?  arguments[0]  :  iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.next()!=  null)?  arguments[0]  :  iterator.next();	  Iterator    <    String>    iterator    =(iterator.next()    ==    null)?    arguments[0]    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
68	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  arguments[0]  :  iterator.next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  arguments[0]  :  iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  arguments[0]  :  iterator.next();	  Iterator    <    String>    iterator    =(iterator.next()    ==    null)?    arguments[0]    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
69	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  iterator.next(),  stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.next(),  stopAtNonOption;	  OptionGroup    group    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
70	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  iterator.next(),  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.next(),  stopAtNonOption);	  OptionGroup    group    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
71	[BUG]  [BUGGY]  Option  t  =  iterator.next()  +  argumentList.size();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  t  =  iterator.next()  +  argumentList.size();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =  iterator.next()  +  argumentList.size();	  Option    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
72	[BUG]  [BUGGY]  Option  t  =  iterator.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  t  =  iterator.getNext();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =  iterator.getNext();	  Option    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
73	[BUG]  [BUGGY]  Option  t  =  iterator.next()  +  arguments;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  t  =  iterator.next()  +  arguments;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =  iterator.next()  +  arguments;	  Option    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options.getOption(option);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options.getOption(option);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.next()  :  options.getOption(option);	  Option    option    =(options    ==    null)?    iterator.next()    :    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
75	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options.getOption(option,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options.getOption(option,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  iterator.next()  :  options.getOption(option,  stopAtNonOption);	  Option    option    =(options    ==    null)?    iterator.next()    :    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
76	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options.getOption(option,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options.getOption(option,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.next()  :  options.getOption(option,  stopAtNonOption);	  Option    option    =(options    ==    null)?    iterator.next()    :    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
77	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption,  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption,  stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  blockAtNonOption,  stopAtNonOption;	  Option    option    =(Option)iterator.next(),    blockAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
78	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  blockAtNonOption,  stopAtNonOption);	  Option    option    =(Option)iterator.next(),    blockAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
79	[BUG]  [BUGGY]  optionGroup  t  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  optionGroup  t  =(OptionGroup)iterator.next();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	optionGroup  t  =(OptionGroup)iterator.next();	  OptionGroup    t    =(OptionGroup)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
80	[BUG]  [BUGGY]  Option  group  =  iterator.getOptionGroup(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.getOptionGroup(options,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.getOptionGroup(options,  stopAtNonOption);	  Option    group    =    iterator.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
81	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : ", ";  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : ", ";  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  : ", ";	  String    str    =(iterator.hasNext())?    iterator.next()    :       "   ";    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
82	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : "- ";  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : "- ";  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  : "- ";	  String    str    =(iterator.hasNext())?    iterator.next()    :       "   ";    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
83	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : "n ";  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : "n ";  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  : "n ";	  String    str    =(iterator.hasNext())?    iterator.next()    :       "   ";    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
84	[BUG]  [BUGGY]  Option  group  =  iterator.getIterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.getIterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.getIterator();	  Option    group    =    iterator.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  Option  group  =  iterator.getGroup();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.getGroup();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.getGroup();	  Option    group    =    iterator.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(iterator.next(),  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator.next(),  stopAtNonOption);	  Option    group    =    options.getOptionGroup(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
87	[BUG]  [BUGGY]  String  str  =  iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  blockAtNonOption;	  String    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
88	[BUG]  [BUGGY]  String  str  =  iterator.next(),  argument;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  argument;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  argument;	  String    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
89	[BUG]  [BUGGY]  String  str  =  iterator.next(),  arguments;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  arguments;	  String    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
90	[BUG]  [BUGGY]  String  str  =  iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  this.stopAtNonOption;	  String    str    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
91	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  options;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  options;	  Option    option    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
92	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  this.stopAtNonOption;	  Option    option    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
93	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  argument;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  argument;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  argument;	  Option    option    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
94	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  arguments);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator,  arguments);	  Option    group    =    options.getOptionGroup(iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption,  arguments);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption,  arguments);	  Option    group    =    options.getOptionGroup(iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption,  cmd);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption,  cmd);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption,  cmd);	  Option    group    =    options.getOptionGroup(iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  this.stopAtNonOption);	  Option    group    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
98	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  blockAtNonOption);	  Option    group    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
99	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  options);	  Option    group    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
100	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  arguments);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  arguments);	  Option    group    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
101	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  this.arguments.iterator();	  Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  String  str  =(iterator.next())?  iterator.next()  :  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.next())?  iterator.next()  :  null;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.next())?  iterator.next()  :  null;	  String    str    =(iterator.hasNext())?    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
103	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  arguments[0];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  arguments[0];  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  arguments[0];	  Iterator    <    String>    iterator    =(iterator.hasNext())?    iterator.next()    :    arguments;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
104	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  argumentList;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  argumentList;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  argumentList;	  Iterator    <    String>    iterator    =(iterator.hasNext())?    iterator.next()    :    arguments;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
105	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  options;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  options;	  Iterator    <    String>    iterator    =(iterator.hasNext())?    iterator.next()    :    arguments;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
106	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(options,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(options,  stopAtNonOption);	  Option    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
107	[BUG]  [BUGGY]  Option  group  =  options.getGroup(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getGroup(options,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getGroup(options,  stopAtNonOption);	  Option    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
108	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opts);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(opts);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(opts);	  Option    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
109	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.getRawGroup();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  iterator.getRawGroup();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.getRawGroup();	  OptionGroup    group    =    iterator.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
110	[BUG]  [BUGGY]  Options  t  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Options  t  =(Option)iterator.next();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Options  t  =(Option)iterator.next();	  Option    t    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
111	[BUG]  [BUGGY]  Option  group  =  iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next(),  blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next(),  blockAtNonOption;	  Option    group    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
112	[BUG]  [BUGGY]  Option  group  =  iterator.next(),  arguments;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next(),  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next(),  arguments;	  Option    group    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
113	[BUG]  [BUGGY]  Option  group  =  iterator.next(),  options;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next(),  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next(),  options;	  Option    group    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
114	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  block);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  block);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  block);	  Option    option    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
115	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  blockAtNonOption);	  Option    option    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
116	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  options);	  Option    option    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
117	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
118	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  iterator);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  iterator);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
119	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opts.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opts.next(),  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(opts.next(),  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
120	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  arguments,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  arguments,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
121	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  iterator,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  iterator,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
122	[BUG]  [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =(this.options!=  null)?  options.iterator()  :  this.options.iterator();	  Iterator    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
123	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.tokenList.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =  this.tokenList.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  this.tokenList.iterator();	  Iterator    <    String>    iterator    =    tokenList.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
124	[BUG]  [BUGGY]  T  t  =  iterator.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  T  t  =  iterator.next();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	T  t  =  iterator.next();	  t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
125	[BUG]  [BUGGY]  t  =  iterator.next()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  t  =  iterator.next()  +  1;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	t  =  iterator.next()  +  1;	  t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
126	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.next()  :  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.next()  :  options;	  Option    option    =(options    ==    null)?    iterator.next()    :    options;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
127	[BUG]  [BUGGY]  Option  option  =(iterator  ==  null)?  iterator.next()  :  options;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(iterator  ==  null)?  iterator.next()  :  options;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(iterator  ==  null)?  iterator.next()  :  options;	  Option    option    =(options    ==    null)?    iterator.next()    :    options;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
128	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[0]  :  options.next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[0]  :  options.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[0]  :  options.next();	  Iterator    <    String>    iterator    =(iterator.next()    ==    null)?    arguments[0]    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  String  t  =  iterator.get()  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  t  =  iterator.get()  +  1;  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.get()  +  1;	  String    t    =    iterator.next()    +    1;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
130	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  this.stopAtNonOption);	  Option    option    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
131	[BUG]  [BUGGY]  Option  option  =  iterator.next()  :  defaultOption;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next()  :  defaultOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next()  :  defaultOption;	  Option    option    =    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
132	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  cmd;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  cmd;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  cmd;	  Option    group    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
133	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  argument);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  argument);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  argument);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
134	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  blockAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
135	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  this.stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
136	[BUG]  [BUGGY]  OptionGroup  group  =(IteratorGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =(IteratorGroup)iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =(IteratorGroup)iterator.next();	  OptionGroup    group    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
137	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(opt,  stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(opt,  stopAtNonOption);	  Option    group    =    options.getOptionGroup(iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
138	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  blockAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator,  blockAtNonOption);	  Option    group    =    options.getOptionGroup(iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  tokenList;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  tokenList;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  tokenList;	  Option    option    =(Option)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
140	[BUG]  [BUGGY]  Option  group  =  iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next(),  this.stopAtNonOption;	  Option    group    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
141	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(opt);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(opt);	  Option    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
142	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :  this;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :  this;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  :  this;	  String    str    =(iterator.hasNext())?    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
143	[BUG]  [BUGGY]  Iterator  iterator  =  neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  iterator  =  neededOptions.iterator();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  neededOptions.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
144	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  tokenList);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  tokenList);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  tokenList);	  Option    group    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
145	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.clone()  :  options.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.clone()  :  options.clone();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.clone()  :  options.clone();	  Option    option    =(options    ==    null)?    iterator.next()    :    options.clone();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
146	[BUG]  [BUGGY]  Option  option  =(options!=  null)?  options.next()  :  options.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options!=  null)?  options.next()  :  options.clone();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options!=  null)?  options.next()  :  options.clone();	  Option    option    =(options    ==    null)?    iterator.next()    :    options.clone();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
147	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  tokenList;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  tokenList;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  tokenList;	  Iterator    <    String>    iterator    =(iterator.hasNext())?    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
148	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  this.stopAtNonOption);	  Option    option    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
149	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  opt);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  opt);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  opt);	  Option    option    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
150	[BUG]  [BUGGY]  Option  group  =  iterator.next()?  null  :(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next()?  null  :(Option)iterator.next();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next()?  null  :(Option)iterator.next();	  Option    group    =    iterator.next()?    null    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
151	[BUG]  [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.getKey();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.getKey();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next()?  null  :  iterator.getKey();	  Option    group    =    iterator.next()?    null    :    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
152	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  arguments);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  arguments);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
153	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  option);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  option);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  option);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
154	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  argument);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  argument);	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
155	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  options);	  Iterator    <    String>    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
156	[BUG]  [BUGGY]  Option  t  =  iterator.previous();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  t  =  iterator.previous();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =  iterator.previous();	  Option    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
157	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  this.blockAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(Option)iterator.next(),  this.blockAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  this.blockAtNonOption;	  Option    option    =(Option)iterator.next(),    blockAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
158	[BUG]  [BUGGY]  Option  t  =(Option)iterator.getNext();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  t  =(Option)iterator.getNext();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =(Option)iterator.getNext();	  Option    t    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
159	[BUG]  [BUGGY]  option  t  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  option  t  =(Option)iterator.next();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	option  t  =(Option)iterator.next();	  Option    t    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
160	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  group);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  group);	  String    str    =(String)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
161	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :  arguments;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :  arguments;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  :  arguments;	  String    str    =(iterator.hasNext())?    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
162	[BUG]  [BUGGY]  OptionsGroup  t  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionsGroup  t  =(OptionGroup)iterator.next();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionsGroup  t  =(OptionGroup)iterator.next();	  OptionGroup    t    =(OptionGroup)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
163	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  group;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(String)iterator.next(),  group;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  group;	  String    str    =(String)iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
164	[BUG]  [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption,  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption,  argument);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  stopAtNonOption,  argument);	  String    str    =    iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
165	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  options.get(0):  options.clone();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =(options  ==  null)?  options.get(0):  options.clone();  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  options.get(0):  options.clone();	  Option    option    =(options    ==    null)?    iterator.next()    :    options.clone();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
166	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  this.stopAtNonOption);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator,  this.stopAtNonOption);	  Option    group    =    options.getOptionGroup(iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
167	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  argument);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  argument);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  argument);	  OptionGroup    group    =    options.getOptionGroup(options.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
168	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  block);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  block);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  block);	  OptionGroup    group    =    options.getOptionGroup(iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
169	[BUG]  [BUGGY]  Option  t  =  iterator.remove();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  t  =  iterator.remove();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =  iterator.remove();	  Option    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
170	[BUG]  [BUGGY]  Option  option  =  iterator.next()  :  option;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next()  :  option;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next()  :  option;	  Option    option    =    iterator.next()    :    null;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
171	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(tokenList);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  options.getOptionGroup(tokenList);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(tokenList);	  Option    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
172	[BUG]  [BUGGY]  t  =  iterator.previous();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  t  =  iterator.previous();  [BUGGY]        if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	t  =  iterator.previous();	  t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
173	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  this.stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  option  =  iterator.next(),  this.stopAtNonOption;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  this.stopAtNonOption;	  Option    option    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
174	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  block);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(Option)iterator.next(),  block);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  block);	  Option    group    =(Option)iterator.next(),    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
175	[BUG]  [BUGGY]  Option  group  =  iterator.next(),  cmd;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =  iterator.next(),  cmd;  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next(),  cmd;	  Option    group    =    iterator.next(),    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
176	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : "[ ";  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  : "[ ";  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  : "[ ";	  String    str    =(iterator.hasNext())?    iterator.next()    :       "   ";    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
177	[BUG]  [BUGGY]  Option  group  =(options!=  null)?  iterator.next()  :  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(options!=  null)?  iterator.next()  :  options.getOptionGroup(options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(options!=  null)?  iterator.next()  :  options.getOptionGroup(options);	  Option    group    =    iterator.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
178	[BUG]  [BUGGY]  Option  group  =(options  ==  null)?  iterator.next()  :  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {      [BUGGY]  Option  group  =(options  ==  null)?  iterator.next()  :  options.getOptionGroup(options);  [BUGGY]      String  t  =  (String)  iterator.next();  if  (     "--     ".equals(t))  {  eatTheRest  =  true;  }  else  if  (     "-     ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(options  ==  null)?  iterator.next()  :  options.getOptionGroup(options);	  Option    group    =    iterator.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
