bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  t  =  iterator.next();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  t  =  iterator.next();  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =  iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
2	[BUG]  [BUGGY]  Option  t  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  t  =(Option)iterator.next();  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  t  =(Option)iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  t  =  iterator.next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  t  =  iterator.next();  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	t  =  iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =(Option)iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  stopAtNonOption);	      Option    group    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  Option  group  =(Option)iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =(Option)iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =(Option)iterator.next(),  stopAtNonOption;	      Option    group    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
6	[BUG]  [BUGGY]  Option  group  =  iterator.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  iterator.getOptionGroup(options);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.getOptionGroup(options);	      Option    group    =    options.getOptionGroup(iterator);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  Option  group  =  iterator.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  iterator.getOptionGroup();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.getOptionGroup();	      Option    group    =    options.getOptionGroup(iterator);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator,  stopAtNonOption);	      Option    group    =    options.getOptionGroup(iterator);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator.next());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  options.getOptionGroup(iterator.next());  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(iterator.next());	      Option    group    =    options.getOptionGroup(iterator);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  stopAtNonOption;	      Iterator    <    String>    str    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  str  =  iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  str  =  iterator.next(),  stopAtNonOption);	      Iterator    <    String>    str    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  str  =(String)iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  stopAtNonOption);	      String    str    =(String)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  String  str  =(String)iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  str  =(String)iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(String)iterator.next(),  stopAtNonOption;	      String    str    =(String)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  str;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  t  =  iterator.next()  +  str;  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  str;	  String    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
15	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  arguments;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  t  =  iterator.next()  +  arguments;  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  arguments;	  String    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  String  t  =  iterator.next()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  t  =  iterator.next()  +  1;  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next()  +  1;	  String    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  Option  group  =  iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next(),  stopAtNonOption;	      Option    group    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  iterator  =  tokenList.next();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  tokenList.next();	      Iterator    <    String>    iterator    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  null;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  null;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  null;	      Iterator    <    String>    iterator    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  tokenList.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  iterator  =  tokenList.iterator();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =  tokenList.iterator();	      Iterator    <    String>    iterator    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  iterator  =  arguments.iterator();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  arguments.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  iterator  =  this.options.iterator();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  this.options.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  Iterator  iterator  =  optionList.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  iterator  =  optionList.iterator();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  optionList.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  optionGroup  group  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  optionGroup  group  =(OptionGroup)iterator.next();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	optionGroup  group  =(OptionGroup)iterator.next();	      OptionGroup    group    =(OptionGroup)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  stopAtNonOption);	      String    str    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  str  =  iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =  iterator.next(),  stopAtNonOption;	      String    str    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.getOptionGroup(options);	      OptionGroup    group    =    options.getOptionGroup(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
28	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  OptionGroup  group  =  options.getOptionGroup(iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(iterator.next(),  stopAtNonOption);	      OptionGroup    group    =    options.getOptionGroup(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
29	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.next();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  OptionGroup  group  =  iterator.next();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.next();	      OptionGroup    group    =    options.getOptionGroup(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
30	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  iterator.getOptionGroup();	      OptionGroup    group    =    options.getOptionGroup(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
31	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =(Option)iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  stopAtNonOption);	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =(Option)iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  stopAtNonOption;	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
33	[BUG]  [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =(Option)iterator.next(),  blockAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(Option)iterator.next(),  blockAtNonOption;	      Option    option    =(Option)iterator.next();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
34	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  stopAtNonOption;	      Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =  iterator.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next(),  stopAtNonOption);	      Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  Option  option  =  iterator.next()  :  null;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =  iterator.next()  :  null;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =  iterator.next()  :  null;	      Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  iterator.next()?  null  :  iterator.next();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  iterator.next()?  null  :  iterator.next();	      Option    group    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options.next(),  stopAtNonOption);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  group  =  options.getOptionGroup(options.next(),  stopAtNonOption);	      OptionGroup    group    =    options.getOptionGroup(iterator.next());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :  null;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :  null;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  :  null;	      String    str    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :   " ";  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  String  str  =(iterator.hasNext())?  iterator.next()  :   " ";  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  str  =(iterator.hasNext())?  iterator.next()  :   " ";	      String    str    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  iterator  =  opts.iterator();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  opts.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
42	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[0]  :  iterator.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[0]  :  iterator.next();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.next()  ==  null)?  arguments[0]  :  iterator.next();	      Iterator    <    String>    iterator    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  group  =  options.getOptionGroup(options);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  group  =  options.getOptionGroup(options);	      Option    group    =    options.getOptionGroup(iterator);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options.clone();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options.clone();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  iterator.next()  :  options.clone();	      Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  iterator.next()  :  options;	      Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  char  t  =  iterator.next();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  char  t  =  iterator.next();  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	char  t  =  iterator.next();	  String    t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options.getOption(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Option  option  =(options  ==  null)?  iterator.next()  :  options.getOption(option);  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Option  option  =(options  ==  null)?  iterator.next()  :  options.getOption(option);	      Option    option    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  arguments;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  arguments;  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  <  String>  iterator  =(iterator.hasNext())?  iterator.next()  :  arguments;	      Iterator    <    String>    iterator    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
49	[BUG]  [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [BUGGY]    String  t  =  (String)  iterator.next();  if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	Iterator  iterator  =  requiredOptions.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  OptionGroup  t  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {    [BUGGY]  OptionGroup  t  =(OptionGroup)iterator.next();  [BUGGY]      if  (   "--   ".equals(t))  {  eatTheRest  =  true;  }  else  if  (   "-   ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	OptionGroup  t  =(OptionGroup)iterator.next();	      	non-compiled	[CE]  illegal  start  of  type	2	None	replace
