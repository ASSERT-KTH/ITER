bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  String  t  =  iterator.next();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]  String  t  =  iterator.next();  [BUGGY]    if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	String  t  =  iterator.next();	String  t  =  (String)  iterator.next();  	non-compiled	[CE]  illegal  start  of  type	67	None	replace
2	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    [BUGGY]    if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	  	String  t  =  (String)  iterator.next();  	non-compiled	[CE]  illegal  start  of  type	67	None	replace
3	[BUG]  [BUGGY]    String  str  =(String)iterator.next();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    String  str  =(String)iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    String  str  =(String)iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
4	[BUG]  [BUGGY]    Option  group  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Option  group  =(Option)iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Option  group  =(Option)iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
5	[BUG]  [BUGGY]    String  str  =  iterator.next();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    String  str  =  iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    String  str  =  iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
6	[BUG]  [BUGGY]    Option  option  =  iterator.next();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Option  option  =  iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Option  option  =  iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
7	[BUG]  [BUGGY]    Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Iterator  iterator  =  options.iterator();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Iterator  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	68	None	add
8	[BUG]  [BUGGY]    Option  option  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Option  option  =(Option)iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Option  option  =(Option)iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
9	[BUG]  [BUGGY]    Option  group  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Option  group  =(OptionGroup)iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Option  group  =(OptionGroup)iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
10	[BUG]  [BUGGY]    Iterator  <  String>  iterator  =  iterator.next();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Iterator  <  String>  iterator  =  iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Iterator  <  String>  iterator  =  iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
11	[BUG]  [BUGGY]    Option  group  =  options.getOptionGroup(iterator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Option  group  =  options.getOptionGroup(iterator);  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Option  group  =  options.getOptionGroup(iterator);		non-compiled	[CE]  illegal  start  of  type	68	None	add
12	[BUG]  [BUGGY]    OptionGroup  group  =(OptionGroup)iterator.next();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    OptionGroup  group  =(OptionGroup)iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    OptionGroup  group  =(OptionGroup)iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
13	[BUG]  [BUGGY]    Iterator  <  String>  str  =  iterator.next();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Iterator  <  String>  str  =  iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Iterator  <  String>  str  =  iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
14	[BUG]  [BUGGY]    OptionGroup  group  =  options.getOptionGroup(iterator.next());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    OptionGroup  group  =  options.getOptionGroup(iterator.next());  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    OptionGroup  group  =  options.getOptionGroup(iterator.next());		non-compiled	[CE]  illegal  start  of  type	68	None	add
15	[BUG]  [BUGGY]    Option  group  =  iterator.next();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  [BUGGY]    Option  group  =  iterator.next();  [BUGGY]  String  t  =  (String)  iterator.next();  if  ( "-- ".equals(t))  {  eatTheRest  =  true;  }  else  if  ( "- ".equals(t))  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	    Option  group  =  iterator.next();		non-compiled	[CE]  illegal  start  of  type	68	None	add
