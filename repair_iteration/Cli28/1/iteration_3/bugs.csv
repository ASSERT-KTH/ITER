bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value.equalsIgnoreCa  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value.equalsIgnoreCa  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value.equalsIgnoreCa	  else    if(!(   "yes       ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgnoreCa    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  value);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  getOption(option,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(option,  value);	  Option    cmd    =    getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
3	[BUG]  [BUGGY]  if(opt!=  null)  {  opts.printStackTrace();  }  else  {  opts.addValueForProcessing(value);  }  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt!=  null)  {  opts.printStackTrace();  }  else  {  opts.addValueForProcessing(value);  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  opts.printStackTrace();  }  else  {  opts.addValueForProcessing(value);  }	  if(opt!=    null)    {    e.printStackTrace();    }    else    {    opt.addValueForProcessing(value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
4	[BUG]  [BUGGY]  if(opt!=  null)  {  opt.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt!=  null)  {  opt.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  opt.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }	  if(opt!=    null)    {    e.printStackTrace();    }    else    {    opt.addValueForProcessing(value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
5	[BUG]  [BUGGY]  if(e!=  null)  {  opt.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(e!=  null)  {  opt.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(e!=  null)  {  opt.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }	  if(opt!=    null)    {    e.printStackTrace();    }    else    {    opt.addValueForProcessing(value);    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  option);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(value,  option);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(value,  option);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  exp);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(option,  value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(option,  value,  exp);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value,  requiredOptions);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(option,  value,  requiredOptions);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(option,  value,  requiredOptions);	  Option    option    =    options.getOption(option,    value);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
9	[BUG]  [BUGGY]  e.printStackTrace(requiredOptions);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(requiredOptions);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(requiredOptions);	  e.printStackTrace(exp);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
10	[BUG]  [BUGGY]  e.printStackTrace(value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(value);	  e.printStackTrace(exp);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(options);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(options);	  Option    cmd    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
12	[BUG]  [BUGGY]  e.printStackTrace(out,  value);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(out,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(out,  value);	  e.printStackTrace(out);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
13	[BUG]  [BUGGY]  Option  option  =  getOption(opt,  value,  exp);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(opt,  value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(opt,  value,  exp);	  Option    option    =    getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
14	[BUG]  [BUGGY]  Option  option  =  getOption(opt,  value,  values);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(opt,  value,  values);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(opt,  value,  values);	  Option    option    =    getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
15	[BUG]  [BUGGY]  Option  option  =  getOption(opt,  value,  value);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(opt,  value,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(opt,  value,  value);	  Option    option    =    getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
16	[BUG]  [BUGGY]  Option  option  =  getOption(opt,  value,  requiredOptions);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(opt,  value,  requiredOptions);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(opt,  value,  requiredOptions);	  Option    option    =    getOption(opt,    value);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
17	[BUG]  [BUGGY]  Option  cmd  =(Option)getOption(opt);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =(Option)getOption(opt);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =(Option)getOption(opt);	  Option    cmd    =    getOption(value);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
18	[BUG]  [BUGGY]  e.printStackTrace(cmd);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(cmd);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(cmd);	  e.printStackTrace(time);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
19	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  value));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  value));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
20	[BUG]  [BUGGY]  Context.report(JSError.make(value,  MISSING_PROPERTY,  value));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  MISSING_PROPERTY,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  MISSING_PROPERTY,  value));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
21	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  e));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  e));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  e));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
22	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  null));  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  null));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  null));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  exp);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(opt,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(opt,  exp);	  Option    option    =    options.getOption(value,    exp);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(options,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(options,  value);	  Option    option    =    options.getOption(value,    exp);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  exp);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(options,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(options,  exp);	  Option    option    =    options.getOption(value,    exp);    	non-compiled	[CE]  	34	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(value,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(value,  value);	  Option    option    =    options.getOption(value,    exp);    	non-compiled	[CE]  	34	None	replace
27	[BUG]  [BUGGY]  Context.report(JSError.make(value,  e));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  e));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  e));	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value),  exp);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(e,  value),  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value),  exp);	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value,  exp));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(e,  value,  exp));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value,  exp));	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value,  getMessage()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(e,  value,  getMessage()));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value,  getMessage()));	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  Option  option  =  getOption(option,  value);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(option,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(option,  value);	  Option    option    =    getOption(option);    	non-compiled	[CE]  	17	None	replace
32	[BUG]  [BUGGY]  Option  value  =(Option)options.getValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =(Option)options.getValue();  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)options.getValue();	  Option    value    =(Option)opt.getValue();    	non-compiled	[CE]  	12	None	replace
33	[BUG]  [BUGGY]  Option  value  =(Option)opt.getAssignedValue();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =(Option)opt.getAssignedValue();  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)opt.getAssignedValue();	  Option    value    =(Option)opt.getValue();    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  Context.report(JSError.make(value,  JsonError.make(opt)));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  JsonError.make(opt)));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  JsonError.make(opt)));	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  	32	None	replace
35	[BUG]  [BUGGY]  Context.report(JSError.make(opt,  JsonError.make(value)));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(opt,  JsonError.make(value)));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(opt,  JsonError.make(value)));	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  	32	None	replace
36	[BUG]  [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value)),  exp);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value)),  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  JsonError.make(value)),  exp);	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  	32	None	replace
37	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(option,  value);	  Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  	15	None	replace
38	[BUG]  [BUGGY]  Option  value  =(Option)options.clone();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =(Option)options.clone();  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)options.clone();	  Option    value    =(Option)opt.clone();    	non-compiled	[CE]  	11	None	replace
39	[BUG]  [BUGGY]  Option  value  =(Option)opts.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =(Option)opts.clone();  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)opts.clone();	  Option    value    =(Option)opt.clone();    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  Error.printStackTrace(System.err);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Error.printStackTrace(System.err);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Error.printStackTrace(System.err);	  e.printStackTrace(System.err);    	non-compiled	[CE]  	22	None	replace
41	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  value),  e);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  value),  e);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  value),  e);	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
42	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  XMODULE_REQUIRE_ERROR,  value));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  XMODULE_REQUIRE_ERROR,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  XMODULE_REQUIRE_ERROR,  value));	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  Context.report(JSError.make(value,  value,  e));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  value,  e));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  value,  e));	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  value,  e.getMessage()));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  value,  e.getMessage()));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  value,  e.getMessage()));	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  Option  option  =  getOption(options);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(options);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(options);	  Option    option    =    getOption(value);    	non-compiled	[CE]  	16	None	replace
46	[BUG]  [BUGGY]  Option  value  =  options.getOption(opt,  exp);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =  options.getOption(opt,  exp);  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(opt,  exp);	  Option    value    =    options.getOption(opt);    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  Option  value  =  options.getOption(option);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =  options.getOption(option);  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(option);	  Option    value    =    options.getOption(opt);    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  Option  value  =  options.getOption(value);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =  options.getOption(value);  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(value);	  Option    value    =    options.getOption(opt);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value.equalsIgno  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value.equalsIgno  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value.equalsIgno	  else    if(!(   "yes       ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgno    	non-compiled	[CE]  <identifier>  expected	29	None	replace
50	[BUG]  [BUGGY]  option  =  options.getOption(opt);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  option  =  options.getOption(opt);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	option  =  options.getOption(opt);	  option    option    =    options.getOption(value);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
51	[BUG]  [BUGGY]  option  =  options.getOption(value);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  option  =  options.getOption(value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	option  =  options.getOption(value);	  option    option    =    options.getOption(value);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
52	[BUG]  [BUGGY]  ||(opt!=  null  &&  opt.equals(value)))  {  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  ||(opt!=  null  &&  opt.equals(value)))  {  break;  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	||(opt!=  null  &&  opt.equals(value)))  {  break;	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
53	[BUG]  [BUGGY]  ||(opt!=  null  &&  opt.equals( "null ")))  {  e.printStackTrace();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  ||(opt!=  null  &&  opt.equals( "null ")))  {  e.printStackTrace();  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	||(opt!=  null  &&  opt.equals( "null ")))  {  e.printStackTrace();  }	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
54	[BUG]  [BUGGY]  ||(opt!=  null  &&  opt.equals(value)))  {  throw  new  RuntimeException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  ||(opt!=  null  &&  opt.equals(value)))  {  throw  new  RuntimeException( " ");  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	||(opt!=  null  &&  opt.equals(value)))  {  throw  new  RuntimeException( " ");  }	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
55	[BUG]  [BUGGY]  Option  cmd  =  getOption(opt,  value,  requiredOptions);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  getOption(opt,  value,  requiredOptions);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(opt,  value,  requiredOptions);	  Option    cmd    =    getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
56	[BUG]  [BUGGY]  Option  cmd  =  getOption(opt,  value  -  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  getOption(opt,  value  -  1);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(opt,  value  -  1);	  Option    cmd    =    getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  opt);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(value,  opt);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(value,  opt);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  value,  requiredOptions);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(opt,  value,  requiredOptions);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(opt,  value,  requiredOptions);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  value,  exp);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(opt,  value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(opt,  value,  exp);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
60	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(options,  value);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(options,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(options,  value);	  Option    cmd    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  opt);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(value,  opt);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(value,  opt);	  Option    option    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
62	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  value,  exp);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(opt,  value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(opt,  value,  exp);	  Option    option    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  value,  requiredOptions);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(opt,  value,  requiredOptions);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(opt,  value,  requiredOptions);	  Option    option    =    options.getOption(opt,    value);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
64	[BUG]  [BUGGY]  Context.report(JSError.make(value,  value),  exp);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  value),  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  value),  exp);	  Context.report(JSError.make(value,    value));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
65	[BUG]  [BUGGY]  Context.report(JSError.make(value,  value),  e);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  value),  e);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  value),  e);	  Context.report(JSError.make(value,    value));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
66	[BUG]  [BUGGY]  Context.report(JSError.make(value,  value)+  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  value)+  1);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  value)+  1);	  Context.report(JSError.make(value,    value));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
67	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  value));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(sourceName,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(sourceName,  value));	  Context.report(JSError.make(value,    value));    	non-compiled	[CE]  <identifier>  expected	2	None	replace
68	[BUG]  [BUGGY]  Option  cmd  =  getOption(value,  opt);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  getOption(value,  opt);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(value,  opt);	  Option    cmd    =    getOption(opt,    value);    	non-compiled	[CE]  	9	None	replace
69	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ",  value	  else    if(!(   "yes       ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgno    	non-compiled	[CE]  	29	None	replace
70	[BUG]  [BUGGY]  if(opt!=  null)  {  e.printStackTrace(exp);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt!=  null)  {  e.printStackTrace(exp);  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  e.printStackTrace(exp);  }	  e.printStackTrace(exp);    	non-compiled	[CE]  	23	None	replace
71	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value)+  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(e,  value)+  1);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value)+  1);	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
72	[BUG]  [BUGGY]  Option  cmd  =  getOption(value,  exp);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  getOption(value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(value,  exp);	  Option    cmd    =    getOption(value);    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  if(opt  ==  null)  {  e.printStackTrace();  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt  ==  null)  {  e.printStackTrace();  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt  ==  null)  {  e.printStackTrace();  }	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  	26	None	replace
74	[BUG]  [BUGGY]  if(opt!=  null)  {  opt.printStackTrace();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt!=  null)  {  opt.printStackTrace();  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  opt.printStackTrace();  }	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  	26	None	replace
75	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  NON_GLOBAL_DEPRECATED_ERROR,  value));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  NON_GLOBAL_DEPRECATED_ERROR,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  NON_GLOBAL_DEPRECATED_ERROR,  value));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  	33	None	replace
76	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  NON_GLOBAL_MEMBER_ERROR,  value));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  NON_GLOBAL_MEMBER_ERROR,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  NON_GLOBAL_MEMBER_ERROR,  value));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  	33	None	replace
77	[BUG]  [BUGGY]  Option  value  =  options.getOption(options);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =  options.getOption(options);  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(options);	  Option    value    =    options.getOption(opt);    	non-compiled	[CE]  	10	None	replace
78	[BUG]  [BUGGY]  Option  value  =  options.getOption(opt,  requiredOptions);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =  options.getOption(opt,  requiredOptions);  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(opt,  requiredOptions);	  Option    value    =    options.getOption(opt);    	non-compiled	[CE]  	10	None	replace
79	[BUG]  [BUGGY]  e.printStackTrace(System.out);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(System.out);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(System.out);	  e.printStackTrace(System.err);    	non-compiled	[CE]  	22	None	replace
80	[BUG]  [BUGGY]  Context.report(JSError.make(value,  JsonError.make(option)));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  JsonError.make(option)));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  JsonError.make(option)));	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
81	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  JsonError.make(value)));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(sourceName,  JsonError.make(value)));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(sourceName,  JsonError.make(value)));	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  	32	None	replace
82	[BUG]  [BUGGY]  if(opt  ==  null)  {  e.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt  ==  null)  {  e.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt  ==  null)  {  e.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }	  if(opt!=    null)    {    e.printStackTrace();    }    else    {    opt.addValueForProcessing(value);    }    	non-compiled	[CE]  	27	None	replace
83	[BUG]  [BUGGY]  Option  option  =  getOption(value,  opt);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(value,  opt);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(value,  opt);	  Option    option    =    getOption(opt,    value);    	non-compiled	[CE]  	18	None	replace
84	[BUG]  [BUGGY]  Option  option  =  getOption(value,  exp);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  getOption(value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(value,  exp);	  Option    option    =    getOption(value);    	non-compiled	[CE]  	16	None	replace
85	[BUG]  [BUGGY]  Context.report(JSError.make(sourceName,  value,  exp));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(sourceName,  value,  exp));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(sourceName,  value,  exp));	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
86	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  value)+  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  value)+  1);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  value)+  1);	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
87	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1. ".equalsIgno  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1. ".equalsIgno  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1. ".equalsIgno	  else    if(!(   "yes       ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgno    	non-compiled	[CE]  	29	None	replace
88	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value,  null));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(e,  value,  null));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value,  null));	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value,  JsonStringEncoder.getInstance()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(e,  value,  JsonStringEncoder.getInstance()));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value,  JsonStringEncoder.getInstance()));	  Context.report(JSError.make(e,    value));    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  exp  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(value,  exp  +  1);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(value,  exp  +  1);	  Option    option    =    options.getOption(value,    exp);    	non-compiled	[CE]  	34	None	replace
91	[BUG]  [BUGGY]  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt!=  null)  {  throw  new  RuntimeException( " ");  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  throw  new  RuntimeException( " ");  }	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  	26	None	replace
92	[BUG]  [BUGGY]  if(opt!=  null)  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  if(opt!=  null)  {  break;  }  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  break;  }	  if(opt!=    null)    {    e.printStackTrace();    }    	non-compiled	[CE]  	26	None	replace
93	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value,  exp);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  cmd  =  options.getOption(value,  exp);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(value,  exp);	  Option    cmd    =    options.getOption(value);    	non-compiled	[CE]  	13	None	replace
94	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  tokenList));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  tokenList));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  MISSING_PROPERTY,  tokenList));	  Context.report(JSError.make(value,    exp,    MISSING_PROPERTY));    	non-compiled	[CE]  	33	None	replace
95	[BUG]  [BUGGY]  Option  value  =(Option)this.options.clone();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =(Option)this.options.clone();  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)this.options.clone();	  Option    value    =(Option)opt.clone();    	non-compiled	[CE]  	11	None	replace
96	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  value,  value);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  option  =  options.getOption(opt,  value,  value);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(opt,  value,  value);	  Option    option    =    options.getOption(opt,    value);    	non-compiled	[CE]  	19	None	replace
97	[BUG]  [BUGGY]  e.printStackTrace(printStackTrace());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(printStackTrace());  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(printStackTrace());	  e.printStackTrace(out);    	non-compiled	[CE]  	31	None	replace
98	[BUG]  [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value),  e.getMessage()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value),  e.getMessage()));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  JsonError.make(value),  e.getMessage()));	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  	32	None	replace
99	[BUG]  [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value)),  e);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value)),  e);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  JsonError.make(value)),  e);	  Context.report(JSError.make(value,    JsonError.make(value)));    	non-compiled	[CE]  	32	None	replace
100	[BUG]  [BUGGY]  Context.report(JSError.make(value,  option));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  option));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  option));	  Context.report(JSError.make(value,    value));    	non-compiled	[CE]  	2	None	replace
101	[BUG]  [BUGGY]  Context.report(JSError.make(value,  options));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  options));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  options));	  Context.report(JSError.make(value,    value));    	non-compiled	[CE]  	2	None	replace
102	[BUG]  [BUGGY]  e.printStackTrace(error);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(error);  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(error);	  e.printStackTrace(exp);    	non-compiled	[CE]  	23	None	replace
103	[BUG]  [BUGGY]  e.printStackTrace(processProperties());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  e.printStackTrace(processProperties());  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(processProperties());	  e.printStackTrace(exp);    	non-compiled	[CE]  	23	None	replace
104	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  value,  null));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  exp,  value,  null));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  value,  null));	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
105	[BUG]  [BUGGY]  Context.report(JSError.make(value,  expression,  value));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Context.report(JSError.make(value,  expression,  value));  [BUGGY]      else  if  (!(     "yes     ".equalsIgnoreCase(value)      ||       "true     ".equalsIgnoreCase(value)            ||       "1     ".equalsIgnoreCase(value)))  ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  expression,  value));	  Context.report(JSError.make(value,    exp,    value));    	non-compiled	[CE]  	3	None	replace
106	[BUG]  [BUGGY]  Option  value  =(Option)option.getValue();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =(Option)option.getValue();  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)option.getValue();	  Option    value    =(Option)opt.getValue();    	non-compiled	[CE]  	12	None	replace
107	[BUG]  [BUGGY]  Option  value  =  options.getOption(opt,  value);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }      [BUGGY]  Option  value  =  options.getOption(opt,  value);  [BUGGY]      ||       "true     ".equalsIgnoreCase(value)  ||       "1     ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(opt,  value);	  Option    value    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
