bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Context.report(JSError.make(e,  value));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Context.report(JSError.make(e,  value));  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(e,  value));	      Context.reportCodeChange();    	non-compiled	[CE]  	14	None	replace
2	[BUG]  [BUGGY]  Context.report(JSError.make(value,  value));  [CE]  class  or  interface  expected  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Context.report(JSError.make(value,  value));  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  value));	      Context.reportCodeChange();    	non-compiled	[CE]  class  or  interface  expected	14	None	replace
3	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  value));  [CE]  class  or  interface  expected  [FE]              AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Context.report(JSError.make(value,  exp,  value));  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  value));	      Context.reportCodeChange();    	non-compiled	[CE]  class  or  interface  expected	14	None	replace
4	[BUG]  [BUGGY]  Option  option  =  options.getOption(option,  value);  [CE]  class  or  interface  expected  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  options.getOption(option,  value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(option,  value);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  class  or  interface  expected	13	None	replace
5	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCas  [CE]  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCas  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCas	  else    if(!(   "yes   ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgnoreCase(value)))    {    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCa  [CE]  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCa  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCa	  else    if(!(   "yes   ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgnoreCase    	non-compiled	[CE]  	9	None	replace
7	[BUG]  [BUGGY]  Option  cmd  =  getOption(value);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  getOption(value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(value);	      Option    cmd    =    getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
8	[BUG]  [BUGGY]  Option  cmd  =  getOption(option);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  getOption(option);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(option);	      Option    cmd    =    getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
9	[BUG]  [BUGGY]  Option  cmd  =  getOption(opt,  value);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  getOption(opt,  value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  getOption(opt,  value);	      Option    cmd    =    getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
10	[BUG]  [BUGGY]  Option  value  =  options.getOption(opt);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  value  =  options.getOption(opt);  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =  options.getOption(opt);	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  Option  value  =(Option)opt.clone();  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  value  =(Option)opt.clone();  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)opt.clone();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  Option  value  =(Option)opt.getValue();  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  value  =(Option)opt.getValue();  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  value  =(Option)opt.getValue();	      	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(value);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  options.getOption(value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(value);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
14	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(opt,  value);  [CE]  class  or  interface  expected  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  options.getOption(opt,  value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(opt,  value);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	5	None	replace
15	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option);  [CE]  class  or  interface  expected  [FE]              AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  options.getOption(option);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  options.getOption(option);	      Option    cmd    =    options.getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	5	None	replace
16	[BUG]  [BUGGY]  Option  option  =  getOption(value);  [CE]  class  or  interface  expected  [FE]                AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  getOption(value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(value);	      Option    option    =    getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	8	None	replace
17	[BUG]  [BUGGY]  Option  option  =  getOption(option);  [CE]  class  or  interface  expected  [FE]                  AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  getOption(option);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(option);	      Option    option    =    getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	8	None	replace
18	[BUG]  [BUGGY]  Option  option  =  getOption(opt,  value);  [CE]  class  or  interface  expected  [FE]                    AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  getOption(opt,  value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  getOption(opt,  value);	      Option    option    =    getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	8	None	replace
19	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  value);  [CE]  class  or  interface  expected  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  options.getOption(opt,  value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(opt,  value);	      Option    option    =    options.getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	6	None	replace
20	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(value);  [CE]  class  or  interface  expected  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  option.getOption(value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  option.getOption(value);	      Option    cmd    =    option.getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	11	None	replace
21	[BUG]  [BUGGY]  Option  cmd  =  option.getOption(option);  [CE]  class  or  interface  expected  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  cmd  =  option.getOption(option);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  cmd  =  option.getOption(option);	      Option    cmd    =    option.getOption(opt);    	non-compiled	[CE]  class  or  interface  expected	11	None	replace
22	[BUG]  [BUGGY]  e.printStackTrace(System.err);  [CE]  cannot  find  symbol  t  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  e.printStackTrace(System.err);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(System.err);	      e.printStackTrace();    	non-compiled	[CE]  cannot  find  symbol  t	4	None	replace
23	[BUG]  [BUGGY]  e.printStackTrace(exp);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  e.printStackTrace(exp);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(exp);	      e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  e.printStackTrace(time);  [CE]  class  or  interface  expected  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  e.printStackTrace(time);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(time);	      e.printStackTrace();    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(options);  [CE]  class  or  interface  expected  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  options.getOption(options);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(options);	      Option    option    =    options.getOption(value);    	non-compiled	[CE]  class  or  interface  expected	10	None	replace
26	[BUG]  [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  [CE]  class  or  interface  expected  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  e.printStackTrace();  }	      e.printStackTrace();    	non-compiled	[CE]  class  or  interface  expected	4	None	replace
27	[BUG]  [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [CE]  cannot  find  symbol  options  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  if(opt!=  null)  {  e.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	if(opt!=  null)  {  e.printStackTrace();  }  else  {  opt.addValueForProcessing(value);  }	      e.printStackTrace();    	non-compiled	[CE]  cannot  find  symbol  options	4	None	replace
28	[BUG]  [BUGGY]  else  if(!( "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCase(value)))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  else  if(!( "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCase(value)))  {  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgnoreCase(value)))  {	  else    if(!(   "yes   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgnoreCase(value)))    {    	non-compiled	[CE]  	2	None	replace
29	[BUG]  [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgno  [CE]  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgno  [BUGGY]    ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes   ".equalsIgnoreCase(value)||   "true ".equalsIgnoreCase(value)||   "false ".equalsIgnoreCase(value)||   "1 ".equalsIgno	  else    if(!(   "yes   ".equalsIgnoreCase(value)||       "true   ".equalsIgnoreCase(value)||       "false   ".equalsIgnoreCase(value)||       "1   ".equalsIgnoreCase    	non-compiled	[CE]  	9	None	replace
30	[BUG]  [BUGGY]  option  option  =  options.getOption(value);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  option  option  =  options.getOption(value);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	option  option  =  options.getOption(value);	      Option    option    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  e.printStackTrace(out);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  e.printStackTrace(out);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	e.printStackTrace(out);	      e.printStackTrace();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
32	[BUG]  [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value)));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Context.report(JSError.make(value,  JsonError.make(value)));  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  JsonError.make(value)));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
33	[BUG]  [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Context.report(JSError.make(value,  exp,  MISSING_PROPERTY));  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Context.report(JSError.make(value,  exp,  MISSING_PROPERTY));	      Context.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  Option  option  =  options.getOption(value,  exp);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }    [BUGGY]  Option  option  =  options.getOption(value,  exp);  [BUGGY]    else  if  (!(   "yes   ".equalsIgnoreCase(value)      ||     "true   ".equalsIgnoreCase(value)            ||     "1   ".equalsIgnoreCase(value)))  ||     "true   ".equalsIgnoreCase(value)  ||     "1   ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	Option  option  =  options.getOption(value,  exp);	      Option    option    =    options.getOption(value);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
