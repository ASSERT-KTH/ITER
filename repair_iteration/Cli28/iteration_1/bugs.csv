bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    properties.add(opt);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    properties.add(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    properties.add(opt);		non-compiled	[CE]  cannot  find  symbol	9	None	add
2	[BUG]  [BUGGY]    Properties  properties  =  options.getProperty(option);  [CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    Properties  properties  =  options.getProperty(option);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    Properties  properties  =  options.getProperty(option);		non-compiled	[CE]  variable  properties  is  already  defined  in  method  processProperties(Properties)	9	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    options.addOption(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	add	    options.addOption(opt);		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	9	1
5	[BUG]  [BUGGY]    options.addOption(opt);  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    options.addOption(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    options.addOption(opt);		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	9	1	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    eatTheRest  =  true;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    eatTheRest  =  true;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
12	[BUG]  [BUGGY]    eatTheRest  =  true;  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    eatTheRest  =  true;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    eatTheRest  =  true;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    cmd.addArg( "-- ");		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
13	[BUG]  [BUGGY]    cmd.addArg( "-- ");  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( "-- ");		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption  =  true;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    cmd.addArg( "-- ");  stopAtNonOption  =  true;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
14	[BUG]  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption  =  true;  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption  =  true;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( "-- ");  stopAtNonOption  =  true;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
14	[BUG]  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption;  [CE]  not  a  statement  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( "-- ");  stopAtNonOption;		non-compiled	[CE]  not  a  statement	5	None	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption  =  false;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    cmd.addArg( "-- ");  stopAtNonOption  =  false;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
16	[BUG]  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption  =  false;  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( "-- ");  stopAtNonOption  =  false;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( "-- ");  stopAtNonOption  =  false;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    options.addOption(opt);  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	add	    options.addOption(opt);		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	18	1
22	[BUG]  [BUGGY]    options.addOption(opt);  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    options.addOption(opt);  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	    options.addOption(opt);		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	18	1	add
23	[BUG]  [BUGGY]    opt.addOption(value);  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    opt.addOption(value);  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	    opt.addOption(value);		non-compiled	[CE]  cannot  find  symbol	18	None	add
24	[BUG]  [BUGGY]    option  =  options.getOption(value);  [CE]  incompatible  types  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    option  =  options.getOption(value);  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	    option  =  options.getOption(value);		non-compiled	[CE]  incompatible  types	18	None	add
25	[BUG]  [BUGGY]    options.addOption(value);  [CE]  no  suitable  method  found  for  addOption(String)  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    options.addOption(value);  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	    options.addOption(value);		non-compiled	[CE]  no  suitable  method  found  for  addOption(String)	18	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  value!=  null)  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	add	if(opt.hasArg()  &&  value!=  null)  {	if  (opt.hasArg())  {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	10	1
32	[BUG]  [BUGGY]  if(opt.hasArg()  &&  value!=  null)  {  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  value!=  null)  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	if(opt.hasArg()  &&  value!=  null)  {	if  (opt.hasArg())  {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	10	1	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  ||  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	add	if(opt.hasArg()  ||  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	10	1
35	[BUG]  [BUGGY]  if(opt.hasArg()  ||  opt.hasArg())  {  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  ||  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	if(opt.hasArg()  ||  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	10	1	replace
35	[BUG]  [BUGGY]    [CE]  class  or  interface  expected  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	  	if  (opt.hasArg())  {  	non-compiled	[CE]  class  or  interface  expected	10	None	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if(value!=  null  ||  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	add	if(value!=  null  ||  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	12	1
42	[BUG]  [BUGGY]  if(value!=  null  ||  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if(value!=  null  ||  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(value!=  null  ||  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	12	1	replace
43	[BUG]  [BUGGY]  if(option.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if(option.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(option.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	non-compiled	[CE]  cannot  find  symbol	12	None	replace
45	[BUG]  [BUGGY]    [CE]  class  or  interface  expected  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	  	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	non-compiled	[CE]  class  or  interface  expected	12	None	replace
51	[BUG]  [BUGGY]  String  value  =  properties.get(option);  [CE]  incompatible  types  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  properties.get(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  properties.get(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  incompatible  types	8	None	replace
53	[BUG]  [BUGGY]  String  value  =  options.getProperty(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  options.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  options.getProperty(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
54	[BUG]  [BUGGY]  String  value  =  properties.getKey(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  properties.getKey(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  properties.getKey(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
61	[BUG]  [BUGGY]    opt.addArg(value);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt.addArg(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt.addArg(value);		non-compiled	[CE]  cannot  find  symbol	13	None	add
62	[BUG]  [BUGGY]    value  =  properties.getArg(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    value  =  properties.getArg(option);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    value  =  properties.getArg(option);		non-compiled	[CE]  cannot  find  symbol	13	None	add
64	[BUG]  [BUGGY]    Opt.addArg(value);  [CE]  cannot  find  symbol  Opt  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    Opt.addArg(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    Opt.addArg(value);		non-compiled	[CE]  cannot  find  symbol  Opt	13	None	add
65	[BUG]  [BUGGY]    opt  =  opt.getArg();  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt  =  opt.getArg();  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt  =  opt.getArg();		non-compiled	[CE]  cannot  find  symbol	13	None	add
71	[BUG]  [BUGGY]  opt.addValueForProcessing(value,  properties);  [CE]  method  addValueForProcessing  in  class  Option  cannot  be  applied  to  given  types;  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]  opt.addValueForProcessing(value,  properties);  [BUGGY]  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	opt.addValueForProcessing(value,  properties);	opt.addValueForProcessing(value);  	non-compiled	[CE]  method  addValueForProcessing  in  class  Option  cannot  be  applied  to  given  types;	14	None	replace
73	[BUG]  [BUGGY]  opt.addValueForProcesing(value,  properties);  [CE]  cannot  find  symbol  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]  opt.addValueForProcesing(value,  properties);  [BUGGY]  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	opt.addValueForProcesing(value,  properties);	opt.addValueForProcessing(value);  	non-compiled	[CE]  cannot  find  symbol	14	None	replace
82	[BUG]  [BUGGY]  [FE]  RuntimeException  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    opt.addValueForProcessing(value);  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	add	    opt.addValueForProcessing(value);		compilable	  [FE]  RuntimeException  testPropertyOptionFlags	11	1
83	[BUG]  [BUGGY]    opt.addValueForProcessing(value);  [FE]  RuntimeException  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    opt.addValueForProcessing(value);  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    opt.addValueForProcessing(value);		compilable	  [FE]  RuntimeException  testPropertyOptionFlags	11	1	add
83	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.hasArg())  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.hasArg())  {  return;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    if(opt.hasArg())  {  if(opt.hasArg())  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	11	None	add
84	[BUG]  [BUGGY]    boolean  exp  =  options.hasOption(option)&&  opt.hasArg();  [CE]  variable  exp  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    boolean  exp  =  options.hasOption(option)&&  opt.hasArg();  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    boolean  exp  =  options.hasOption(option)&&  opt.hasArg();		non-compiled	[CE]  variable  exp  is  already  defined  in  method  processProperties(Properties)	11	None	add
85	[BUG]  [BUGGY]    boolean  exp  =  options.hasOption(option);  [CE]  variable  exp  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    boolean  exp  =  options.hasOption(option);  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    boolean  exp  =  options.hasOption(option);		non-compiled	[CE]  variable  exp  is  already  defined  in  method  processProperties(Properties)	11	None	add
91	[BUG]  [BUGGY]  cmd.addOption(value);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]  cmd.addOption(value);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	cmd.addOption(value);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
92	[BUG]  [BUGGY]  cmd.addOption(opt,  value);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]  cmd.addOption(opt,  value);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	cmd.addOption(opt,  value);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
93	[BUG]  [BUGGY]  cmd.addValue(value);  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]  cmd.addValue(value);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	cmd.addValue(value);	cmd.addOption(opt);  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
94	[BUG]  [BUGGY]  cmd.addOption(option);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]  cmd.addOption(option);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	cmd.addOption(option);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
101	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  break;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
102	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "false ".equalsIgnoreCase(value)))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "false ".equalsIgnoreCase(value)))  {  break;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "false ".equalsIgnoreCase(value)))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
104	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)))  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)))  {  break;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)))  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
105	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "false ".equalsIgnoreCase(value)))  }  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "false ".equalsIgnoreCase(value)))  }  break;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "false ".equalsIgnoreCase(value)))  }  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
111	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties);		non-compiled	[CE]  cannot  find  symbol	20	None	add
112	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  Option>();  [CE]  generics  are  not  supported  in  -source  1.4  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  Option>();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  Option>();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	20	None	add
113	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions.clear();  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions.clear();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions.clear();		non-compiled	[CE]  cannot  find  symbol	20	None	add
114	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  options.getRequiredOptions();  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions  =  options.getRequiredOptions();		non-compiled	[CE]  cannot  find  symbol	20	None	add
115	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  CommandLine>();  [CE]  generics  are  not  supported  in  -source  1.4  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  CommandLine>();  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties);  requiredOptions  =  new  ArrayList  <  CommandLine>();		non-compiled	[CE]  generics  are  not  supported  in  -source  1.4	20	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	add	Option  opt  =  options.getOption(option);	Option  opt  =  getOptions().getOption(option);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	6	1
132	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  options.getOption(option);	Option  opt  =  getOptions().getOption(option);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	6	1	replace
133	[BUG]  [BUGGY]  Option  opt  =  options().getOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  options().getOption(option);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  options().getOption(option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
134	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  options.getKey());  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  options.getKey());  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  getOptions().getOption(option,  options.getKey());	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
135	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  opt  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	  	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol  opt	6	None	replace
141	[BUG]  [BUGGY]    String  value  =  opt.getValues();  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValues();  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValues();		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
142	[BUG]  [BUGGY]    String  value  =  opt.getKey();  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getKey();  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getKey();		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
143	[BUG]  [BUGGY]    String  value  =  opt.getValue(value);  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValue(value);  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValue(value);		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
144	[BUG]  [BUGGY]    String  value  =  opt.getValues().toString();  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValues().toString();  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValues().toString();		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
145	[BUG]  [BUGGY]    String  value  =(String)opt.getValues();  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =(String)opt.getValues();  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =(String)opt.getValues();		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
151	[BUG]  [BUGGY]    cmd.addOption(option);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    cmd.addOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    cmd.addOption(option);		non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	7	None	add
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    requiredOptions.remove(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	add	    requiredOptions.remove(option);		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	7	1
154	[BUG]  [BUGGY]    requiredOptions.remove(option);  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    requiredOptions.remove(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    requiredOptions.remove(option);		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	7	1	add
154	[BUG]  [BUGGY]    cmd.addValue(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    cmd.addValue(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    cmd.addValue(option);		non-compiled	[CE]  cannot  find  symbol	7	None	add
155	[BUG]  [BUGGY]    options.add(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    options.add(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    options.add(option);		non-compiled	[CE]  cannot  find  symbol	7	None	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	add	return  parse(options,  arguments,  properties,  true);	return  parse(options,  arguments,  properties,  false);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	19	1
162	[BUG]  [BUGGY]  return  parse(options,  arguments,  properties,  true);  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	return  parse(options,  arguments,  properties,  true);	return  parse(options,  arguments,  properties,  false);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	19	1	replace
163	[BUG]  [BUGGY]  return  parseOptions(options,  arguments,  properties,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parseOptions(options,  arguments,  properties,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	return  parseOptions(options,  arguments,  properties,  true);	return  parse(options,  arguments,  properties,  false);  	non-compiled	[CE]  cannot  find  symbol	19	None	replace
164	[BUG]  [BUGGY]  return  parse(options,  arguments,  properties,  null);  [CE]  no  suitable  method  found  for  parse(Options,String[],Properties,<null>)  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  null);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	return  parse(options,  arguments,  properties,  null);	return  parse(options,  arguments,  properties,  false);  	non-compiled	[CE]  no  suitable  method  found  for  parse(Options,String[],Properties,<null>)	19	None	replace
171	[BUG]  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {  [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)))  {	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
174	[BUG]  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value)))  {  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value)))  {  [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value)))  {	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]    String  value  =  opt.getValue(opt.getKey());  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValue(opt.getKey());  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValue(opt.getKey());		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
4	[BUG]  [BUGGY]    String  value  =  opt.getValue();  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValue();  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValue();		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
23	[BUG]  [BUGGY]  cmd.addChildToFront(opt);  [CE]  cannot  find  symbol  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]  cmd.addChildToFront(opt);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	cmd.addChildToFront(opt);	cmd.addOption(opt);  	non-compiled	[CE]  cannot  find  symbol	17	None	replace
24	[BUG]  [BUGGY]  cmd.addOption(opt,  true);  [CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]  cmd.addOption(opt,  true);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	cmd.addOption(opt,  true);	cmd.addOption(opt);  	non-compiled	[CE]  method  addOption  in  class  CommandLine  cannot  be  applied  to  given  types;	17	None	replace
41	[BUG]  [BUGGY]    requiredOptions.remove(options.getKey());  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    requiredOptions.remove(options.getKey());  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    requiredOptions.remove(options.getKey());		non-compiled	[CE]  cannot  find  symbol	20	None	add
43	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties,  false);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties,  false);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties,  false);		non-compiled	[CE]  cannot  find  symbol	20	None	add
45	[BUG]  [BUGGY]    cmd.parse(options,  arguments,  properties,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parse(options,  arguments,  properties,  true);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parse(options,  arguments,  properties,  true);		non-compiled	[CE]  cannot  find  symbol	20	None	add
62	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  continue;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	11	None	add
63	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  addValueForProcessing(value);  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  addValueForProcessing(value);  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  addValueForProcessing(value);  }		non-compiled	[CE]  illegal  start  of  expression	11	None	add
64	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  return;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  return;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  return;  }		non-compiled	[CE]  illegal  start  of  expression	11	None	add
65	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    if(opt.hasArg())  {  if(opt.getValues()  ==  null)  {  continue;  }  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    if(opt.hasArg())  {  if(opt.getValues()  ==  null)  {  continue;  }		non-compiled	[CE]  illegal  start  of  expression	11	None	add
101	[BUG]  [BUGGY]  String  value  =  opt.getProperty(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  opt.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  opt.getProperty(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol	8	None	replace
103	[BUG]  [BUGGY]  String  value  =  opt.getProperty(property);  [CE]  cannot  find  symbol  property  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  opt.getProperty(property);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  opt.getProperty(property);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  cannot  find  symbol  property	8	None	replace
123	[BUG]  [BUGGY]  opt.addValueToProcessing(value,  properties);  [CE]  cannot  find  symbol  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]  opt.addValueToProcessing(value,  properties);  [BUGGY]  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	opt.addValueToProcessing(value,  properties);	opt.addValueForProcessing(value);  	non-compiled	[CE]  cannot  find  symbol	14	None	replace
124	[BUG]  [BUGGY]  opt.addValueForProcessing(value,  property);  [CE]  cannot  find  symbol  property  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]  opt.addValueForProcessing(value,  property);  [BUGGY]  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	opt.addValueForProcessing(value,  property);	opt.addValueForProcessing(value);  	non-compiled	[CE]  cannot  find  symbol  property	14	None	replace
144	[BUG]  [BUGGY]    if(opt.hasArg())  {  Option  opt  =  options.getOption(opt);  }  [CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    if(opt.hasArg())  {  Option  opt  =  options.getOption(opt);  }  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	    if(opt.hasArg())  {  Option  opt  =  options.getOption(opt);  }		non-compiled	[CE]  variable  opt  is  already  defined  in  method  processProperties(Properties)	18	None	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	add	if(opt.hasArg()  &&  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	10	1
164	[BUG]  [BUGGY]  if(opt.hasArg()  &&  opt.hasArg())  {  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(opt.hasArg()  &&  opt.hasArg())  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	if(opt.hasArg()  &&  opt.hasArg())  {	if  (opt.hasArg())  {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	10	1	replace
202	[BUG]  [BUGGY]    option  =  cmd.getOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    option  =  cmd.getOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    option  =  cmd.getOption(option);		non-compiled	[CE]  cannot  find  symbol	7	None	add
204	[BUG]  [BUGGY]    e.removeFirstElement();  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    e.removeFirstElement();  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    e.removeFirstElement();		non-compiled	[CE]  cannot  find  symbol	7	None	add
205	[BUG]  [BUGGY]    processOption(option);  [CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    processOption(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    processOption(option);		non-compiled	[CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;	7	None	add
222	[BUG]  [BUGGY]    opt.addValueToProcessing(opt);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    opt.addValueToProcessing(opt);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    opt.addValueToProcessing(opt);		non-compiled	[CE]  cannot  find  symbol	9	None	add
223	[BUG]  [BUGGY]    opt.addValue(value);  [CE]  cannot  find  symbol  value  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    opt.addValue(value);  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    opt.addValue(value);		non-compiled	[CE]  cannot  find  symbol  value	9	None	add
224	[BUG]  [BUGGY]    opt.addValueFor(opt.getKey());  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    opt.addValueFor(opt.getKey());  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    opt.addValueFor(opt.getKey());		non-compiled	[CE]  cannot  find  symbol	9	None	add
242	[BUG]  [BUGGY]    opt.addValueForArgualProperty(value);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt.addValueForArgualProperty(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt.addValueForArgualProperty(value);		non-compiled	[CE]  cannot  find  symbol	13	None	add
244	[BUG]  [BUGGY]    opt.addValueForArg(value);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt.addValueForArg(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt.addValueForArg(value);		non-compiled	[CE]  cannot  find  symbol	13	None	add
245	[BUG]  [BUGGY]    opt  =  getOptions().getArg(value);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt  =  getOptions().getArg(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt  =  getOptions().getArg(value);		non-compiled	[CE]  cannot  find  symbol	13	None	add
263	[BUG]  [BUGGY]  Option  opt  =  getOptions().createOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().createOption(option);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  getOptions().createOption(option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
264	[BUG]  [BUGGY]  Option  opt  =  getOptions().removeOption(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().removeOption(option);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  getOptions().removeOption(option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  cannot  find  symbol	6	None	replace
281	[BUG]  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value!=  null)  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value!=  null)  {  break;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  String  value  =  opt.getValue();  if(value!=  null)  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
282	[BUG]  [BUGGY]    opt.addValueForProcessing(value);  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    opt.addValueForProcessing(value);  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    opt.addValueForProcessing(value);		non-compiled	[CE]  	2	None	add
283	[BUG]  [BUGGY]    if(opt.hasArg())  {  opt.addValueForAssignmentToName(value);  }  [CE]  cannot  find  symbol  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  opt.addValueForAssignmentToName(value);  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  opt.addValueForAssignmentToName(value);  }		non-compiled	[CE]  cannot  find  symbol	2	None	add
284	[BUG]  [BUGGY]    if(opt.hasArg())  {  if(opt.hasArg())  {  break;  }  [CE]  illegal  start  of  expression  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if(opt.hasArg())  {  if(opt.hasArg())  {  break;  }  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if(opt.hasArg())  {  if(opt.hasArg())  {  break;  }		non-compiled	[CE]  illegal  start  of  expression	2	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if((  opt.getValues()  ==  null)||(opt.getValues().length  ==  0))  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	add	if((  opt.getValues()  ==  null)||(opt.getValues().length  ==  0))  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	12	1
304	[BUG]  [BUGGY]  if((  opt.getValues()  ==  null)||(opt.getValues().length  ==  0))  {  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if((  opt.getValues()  ==  null)||(opt.getValues().length  ==  0))  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if((  opt.getValues()  ==  null)||(opt.getValues().length  ==  0))  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	12	1	replace
304	[BUG]  [BUGGY]  if(options.hasOption(opt)&&(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0))  {  [CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if(options.hasOption(opt)&&(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0))  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(options.hasOption(opt)&&(opt.getValues()  ==  null  ||  opt.getValues().length  ==  0))  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	non-compiled	[CE]  method  hasOption  in  class  Options  cannot  be  applied  to  given  types;	12	None	replace
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    cmd.addArg( " ");		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
322	[BUG]  [BUGGY]    cmd.addArg( " ");  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( " ");		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
322	[BUG]  [BUGGY]    cmd.addArg(arguments);  [CE]  method  addArg  in  class  CommandLine  cannot  be  applied  to  given  types;  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg(arguments);  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg(arguments);		non-compiled	[CE]  method  addArg  in  class  CommandLine  cannot  be  applied  to  given  types;	5	None	add
324	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  eatTheRest  =  true;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    cmd.addArg( " ");  eatTheRest  =  true;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
325	[BUG]  [BUGGY]    cmd.addArg( " ");  eatTheRest  =  true;  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  eatTheRest  =  true;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( " ");  eatTheRest  =  true;		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
325	[BUG]  [BUGGY]    cmd.addArg( " ");  stopAtNonOption;  [CE]  not  a  statement  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  stopAtNonOption;  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( " ");  stopAtNonOption;		non-compiled	[CE]  not  a  statement	5	None	add
342	[BUG]  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCas  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]  else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCas  [BUGGY]  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	else  if(!( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCas	else  if  (!( "yes ".equalsIgnoreCase(value)    ||   "true ".equalsIgnoreCase(value)      ||   "1 ".equalsIgnoreCase(value)))  	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getValues().length);  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getValues().length);  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValues().substring(0,  opt.getValues().length);		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
3	[BUG]  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getValues().length).trim();  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getValues().length).trim();  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValues().substring(0,  opt.getValues().length).trim();		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
4	[BUG]  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getKey());  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getKey());  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValues().substring(0,  opt.getKey());		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
5	[BUG]  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getValues().length  -  1);  [CE]  variable  value  is  already  defined  in  method  processProperties(Properties)  [CONTEXT]  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [BUGGY]    String  value  =  opt.getValues().substring(0,  opt.getValues().length  -  1);  [BUGGY]  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	    String  value  =  opt.getValues().substring(0,  opt.getValues().length  -  1);		non-compiled	[CE]  variable  value  is  already  defined  in  method  processProperties(Properties)	15	None	add
33	[BUG]  [BUGGY]    opt.addValueForArgs(value);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt.addValueForArgs(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt.addValueForArgs(value);		non-compiled	[CE]  cannot  find  symbol	13	None	add
34	[BUG]  [BUGGY]    opt.addValueForArgument(value);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]    opt.addValueForArgument(value);  [BUGGY]  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	    opt.addValueForArgument(value);		non-compiled	[CE]  cannot  find  symbol	13	None	add
121	[BUG]  [BUGGY]    if( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)		non-compiled	[CE]  	2	None	add
122	[BUG]  [BUGGY]    if( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value)  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value)  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value)|| "2 ".equalsIgnoreCase(value)		non-compiled	[CE]  	2	None	add
123	[BUG]  [BUGGY]    if((  opt.getValues()  ==  null)||( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value))  [CE]  [CONTEXT]  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  }  [BUGGY]    if((  opt.getValues()  ==  null)||( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value))  [BUGGY]  else  if  (!( "yes ".equalsIgnoreCase(value)      ||   "true ".equalsIgnoreCase(value)            ||   "1 ".equalsIgnoreCase(value)))  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	    if((  opt.getValues()  ==  null)||( "yes ".equalsIgnoreCase(value)|| "true ".equalsIgnoreCase(value)|| "1 ".equalsIgnoreCase(value))		non-compiled	[CE]  	2	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	add	    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	18	1
153	[BUG]  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  }  else  if  (!( "yes ".equalsIgnoreCase(value)  ||   "true ".equalsIgnoreCase(value)  ||   "1 ".equalsIgnoreCase(value)))  {    break;  }  [BUGGY]    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }  [BUGGY]  cmd.addOption(opt);  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	    if(opt.hasArg())  {  requiredOptions.remove(opt.getKey());  }		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	18	1	add
184	[BUG]  [BUGGY]  return  parse(options,  arguments,  properties,  false,  options.mapping);  [CE]  cannot  find  symbol  mapping  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]  return  parse(options,  arguments,  properties,  false,  options.mapping);  [BUGGY]  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	return  parse(options,  arguments,  properties,  false,  options.mapping);	return  parse(options,  arguments,  properties,  false);  	non-compiled	[CE]  cannot  find  symbol  mapping	19	None	replace
213	[BUG]  [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }  [CE]  'try'  without  'catch'  or  'finally'  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(value);  }		non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	add
214	[BUG]  [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(option);  }  [CE]  'try'  without  'catch'  or  'finally'  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(option);  }  [BUGGY]  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	    if(opt.hasArg())  {  try  {  opt.addValueForProcessing(option);  }		non-compiled	[CE]  'try'  without  'catch'  or  'finally'	9	None	add
244	[BUG]  [BUGGY]    boolean  exp  =  options.isRequired(option);  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    boolean  exp  =  options.isRequired(option);  [BUGGY]  if  (opt.hasArg())    {  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	    boolean  exp  =  options.isRequired(option);		non-compiled	[CE]  cannot  find  symbol	11	None	add
272	[BUG]  [BUGGY]  if(option.hasArg()  &&  value!=  null)  {  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]  if(option.hasArg()  &&  value!=  null)  {  [BUGGY]  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	if(option.hasArg()  &&  value!=  null)  {	if  (opt.hasArg())  {  	non-compiled	[CE]  cannot  find  symbol	10	None	replace
304	[BUG]  [BUGGY]  if((  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)&&!Options.isRequired(value))  {  [CE]  cannot  find  symbol  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  [BUGGY]  if((  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)&&!Options.isRequired(value))  {  [BUGGY]  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if((  opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)&&!Options.isRequired(value))  {	if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)    {  	non-compiled	[CE]  cannot  find  symbol	12	None	replace
334	[BUG]  [BUGGY]    e.removeProperty(option);  [CE]  cannot  find  symbol  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    e.removeProperty(option);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    e.removeProperty(option);		non-compiled	[CE]  cannot  find  symbol	7	None	add
335	[BUG]  [BUGGY]    processOption(e,  cmd);  [CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]    processOption(e,  cmd);  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	    processOption(e,  cmd);		non-compiled	[CE]  method  processOption  in  class  Parser  cannot  be  applied  to  given  types;	7	None	add
362	[BUG]  [BUGGY]  arguments  =  new  ArrayList[0];  [CE]  incompatible  types  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]  arguments  =  new  ArrayList[0];  [BUGGY]  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	arguments  =  new  ArrayList[0];	arguments  =  new  String[0];  	non-compiled	[CE]  incompatible  types	4	None	replace
392	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	    cmd.addArg( " ");  requiredOptions  =  options.getRequiredOptions();		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1
393	[BUG]  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getRequiredOptions();  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getRequiredOptions();  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( " ");  requiredOptions  =  options.getRequiredOptions();		compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	5	1	add
393	[BUG]  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getOptions();  [CE]  incompatible  types  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getOptions();  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( " ");  requiredOptions  =  options.getOptions();		non-compiled	[CE]  incompatible  types	5	None	add
395	[BUG]  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getAllRequiredOptions();  [CE]  cannot  find  symbol  [CONTEXT]    setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  [BUGGY]    cmd.addArg( " ");  requiredOptions  =  options.getAllRequiredOptions();  [BUGGY]  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  {  String  t  =  (String)  iterator.next();  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	    cmd.addArg( " ");  requiredOptions  =  options.getAllRequiredOptions();		non-compiled	[CE]  cannot  find  symbol	5	None	add
424	[BUG]  [BUGGY]    cmd.parseOptions(options,  arguments,  properties);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    cmd.parseOptions(options,  arguments,  properties);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    cmd.parseOptions(options,  arguments,  properties);		non-compiled	[CE]  cannot  find  symbol	20	None	add
425	[BUG]  [BUGGY]    requiredOptions.clear();  cmd.parse(options,  arguments,  properties,  true);  [CE]  cannot  find  symbol  [CONTEXT]  public  CommandLine  parse(Options  options,  String[]  arguments,  Properties  properties)  throws  ParseException  {  [BUGGY]    requiredOptions.clear();  cmd.parse(options,  arguments,  properties,  true);  [BUGGY]  return  parse(options,  arguments,  properties,  false);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  List  requiredOptions  String[]  arguments  boolean  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	    requiredOptions.clear();  cmd.parse(options,  arguments,  properties,  true);		non-compiled	[CE]  cannot  find  symbol	20	None	add
453	[BUG]  [BUGGY]  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	add	String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);	String  value  =  properties.getProperty(option);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	8	1
454	[BUG]  [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);  [FE]  AssertionFailedError  testPropertyOptionFlags  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  properties!=  null?  properties.getProperty(option):  properties.getProperty(option);	String  value  =  properties.getProperty(option);  	compilable	  [FE]  AssertionFailedError  testPropertyOptionFlags	8	1	replace
454	[BUG]  [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.get(option);  [CE]  incompatible  types  [CONTEXT]  if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);    [BUGGY]  String  value  =  properties!=  null?  properties.getProperty(option):  properties.get(option);  [BUGGY]    if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	String  value  =  properties!=  null?  properties.getProperty(option):  properties.get(option);	String  value  =  properties.getProperty(option);  	non-compiled	[CE]  incompatible  types	8	None	replace
512	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  e);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  e);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  getOptions().getOption(option,  e);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	6	None	replace
513	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  option);  [CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;  [CONTEXT]  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();  if  (!cmd.hasOption(option))  {  [BUGGY]  Option  opt  =  getOptions().getOption(option,  option);  [BUGGY]    String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  try  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	Option  opt  =  getOptions().getOption(option,  option);	Option  opt  =  getOptions().getOption(option);  	non-compiled	[CE]  method  getOption  in  class  Options  cannot  be  applied  to  given  types;	6	None	replace
