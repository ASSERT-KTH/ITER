projects/Cli28/src/java/org/apache/commons/cli/Parser.java242checkRequiredOptions();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=options.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=opts.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=options.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=options.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=opts.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=options.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=options.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.opts.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=properties.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=t.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.opts.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=properties.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=arguments.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnicăstopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){log.warning("msg.bad.required.properties");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequireOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=options.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=opts.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.options.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingException(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.addArg(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingException("");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=opts.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequireOptions();}else{cmd.addArg(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(test);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.addArg(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.options.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){checkRequireOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(iterator,opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,requiredOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=opts.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.options.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptions();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,this);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,neededOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=opt.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?getRequiredOptions():null;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?checkRequiredOptions():null;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,blockAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=opt.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption("opt");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242iterator.remove();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(msg,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(cmd,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(opt,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,this);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.options.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingClass(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,stopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){log.warning("msg.bad.required.option",str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=arguments.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptions(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(t,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(t,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingArguments(msg,stopAtNonOption);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(msg,arguments,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(options,str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(msg,str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242log.warning("msg.bad.required.option",str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.arguments.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.addArg(test);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(iterator,opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(option,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(t,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(t,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,str,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,requiredOptions,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,neededOptions,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,arguments,requiredOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=iterator.getOption(t,options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,iterator,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,iterator,requiredOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,iterator,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=properties.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getGroup(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(opt,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(true);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||eatTheRest){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){checkRequiredOptions(options);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?getRequiredOptions():options;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242RequiredOptionscmd=stopAtNonOption?getRequiredOptions():null;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?getRequiredOptions():arguments;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,arguments,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(iterator,opt,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(options,iterator,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=optionGroup.getOption(t,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionsopt=options.getOption(t,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,null);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,this,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,block);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(opt,iterator,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(opt,iterator,requiredOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(opt,iterator,options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.addArg(arguments[0]);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,stopAtNonOption,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.properties.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnicătehnicstopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnicstopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnictehnicstopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnicătehnstopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?checkRequiredOptions():options;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?checkRequiredOptions(cmd):null;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242RequiredOptionscmd=stopAtNonOption?checkRequiredOptions():null;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(options,iterator,opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,options,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(iterator,opt,options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingException(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingException(t,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getGroup();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(true);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt.getOption(),stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,stopAtNonOption){if(stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.properties.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(iterator,opt,neededOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(options,iterator,neededOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=option.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,arguments,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,this.arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,arguments,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption||stopAtNonOption){checkRequireOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.checkRequireOptions();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequireFields();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,iterator,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=iterator.getOption(t,options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,iterator,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){tryFailedToParse(opt,stopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,blockAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,iterator){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,eatTheRest){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,str,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,argument);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingClass(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingClass(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||eatTheRest){checkRequiredOptions();}else{thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.options.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,null);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,this,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,this,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(true);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=option.getOptionGroup();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(opt,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=properties.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingRequireOptions();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingRequireOptions(t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.options.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(t,iterator,opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(iterator,opt,t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||eatTheRest){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){thrownewIllegalArgumentException(".");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242&&stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||!stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){thrownewIllegalArgumentException("".equals(str));}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=opts.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=opt.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,blockAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.getOption(t,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=t.getOption(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,blockAtNonOption,eatTheRest);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,blockAtNonOption,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=opt.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=opt.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.throwAtNonOption("");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.throwInternal();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingException("");}else{thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(t,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(cmd,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(t,cmd);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(options,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption("opts");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption("stopAtNonOption");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption("opt",str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,stopAtNonOption,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(options,cmd,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption,options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=cmd.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=opts.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.addArg(arguments[t]);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingArguments(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingArguments(t);}else{thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=options;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=options.stopAtNonOption;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=eatTheRest;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=options.options;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242log.warning("msg.bad.required.properties");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Gründen.checkState(stopAtNonOption){log.warning("msg.bad.required.properties");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Gründen.warning("msg.bad.required.properties");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,iterator,requiredOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,block){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnicătEhnicstopAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tehnicătehnicătTheResttAtNonOption){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtException("");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242ListIterator<String>iterator=this.opts.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=optionOptions.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,this.options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,stopsAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,blockAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242options.addOption(opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=opt.list().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(opt,iterator,t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(opt,iterator,neededOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(opt,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(opt,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(msg,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingClass(cmd);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242t.handleMissingClass(aughtExceptionHandler);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=stopAtNonOption?checkRequiredOptions():defaultOptions;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(opt,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOptionGroup(stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOptions(iterator,opt);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){checkRequireParams();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){log.warning("msg.require-options");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption("opt",stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption("opt",t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingException(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingException(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Log.warning("msg.bad.required.option",str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242log.warning("msg.bad.required.option",str,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,options,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=option.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(t,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=optionGroup.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(t,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.opts.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,arguments,t);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,block);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){cmd.addArg(str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){cmd.addArg(arguments[0]);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242safeTest(stopAtNonOption){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242safeTest(stopAtNonOption){thrownewIllegalStateException("".equals(arguments[0]));}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242safeTest(stopAtNonOption){thrownewIllegalStateException("".equals(arguments);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){checkRequireParams();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingArguments(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(cmd);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){thrownewIllegalArgumentException("--");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242ListIterator<String>iterator=opts.values().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Parchet.checkState(stopAtNonOption){log.warning("msg.bad.required.properties");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242log.warning("msg.bad.required.properties",stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242iterator.clear();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,this.stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){thrownewIllegalArgumentException("--");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,this.stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,iterator,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.opt.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,this,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tag().warning("msg.bad.required.option",str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||stopAtNonOption){reportError("msg.bad.required.option",str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242iterator.setIndex(iterator.getIndex());
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242iterator.setIterator(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,str,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,"opt");
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242OptionGroupgroup=options.getOptionGroup(t,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(stopAtNonOption){aughtExceptionHandler.handleMissingArguments(cmd,stopAtNonOption);}else{cmd.addArg(str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingException(t);}else{cmd.addArg(str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=this.opt.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,str,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingClass(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242log.warning("msg.bad.required.properties");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(options);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,this.blockAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parseOption(iterator,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(t!=null){aughtExceptionHandler.handleMissingArguments(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingArguments(t);}else{cmd.addArg(str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||this.stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242||blockAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242try==stopAtNonOption){checkRequiredOptions();}else{cmd.addArg(test);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242try==stopAtNonOption&&checkRequiredOptions();}else{cmd.addArg(test);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iteratoriterator=options.opts.iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getArgumentGroup();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242try==stopAtNonOption){checkRequireOptions();}else{cmd.addArg(t);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242try==stopAtNonOption){checkRequireOptions();}else{cmd.addArg(str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242try==stopAtNonOption){checkRequireOptions();}else{cmd.addArg(test);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,stopAtNonOption){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt.getOption(),str,stopAtNonOption)){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt.getArgument(),str,stopAtNonOption)){thrownewIllegalArgumentException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt.getOption(),str,stopAtNonOption)){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt.getArgument(),str,stopAtNonOption)){thrownewIllegalStateException("");}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,str,requiredOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242parse(opt,iterator,requiredOptions,group);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=options.getOption(t,iterator,neededOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(msg,block,stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,str,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242tryFailedToParse(opt,t){checkRequiredOptions();}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242if(!stopAtNonOption){aughtExceptionHandler.handleMissingArguments(cmd,str);}
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242aughtExceptionHandler.handleMissingArguments(md,arguments);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.opts.keySet().iterator();
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,iterator,str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionoption=options.getOption(t,iterator,neededOptions);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=options.findOptions(stopAtNonOption);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242requiredOptions=options.opts.stopAtNonOption;
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optionopt=iterator.getOption(str);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Optiongroup=options.getOption(t,iterator);
projects/Cli28/src/java/org/apache/commons/cli/Parser.java242Iterator<String>iterator=this.opts.values().iterator();
