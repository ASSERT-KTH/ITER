bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option  option  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =(Option)iterator.next();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =(Option)iterator.next();		non-compiled	[CE]  illegal  start  of  type	56	None	add
2	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  illegal  start  of  type	56	None	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(str);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =  options.getOption(str);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =  options.getOption(str);		non-compiled	[CE]  illegal  start  of  type	56	None	add
4	[BUG]  [BUGGY]    Option  opt  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  opt  =  options.getOption(t);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  opt  =  options.getOption(t);		non-compiled	[CE]  illegal  start  of  type	56	None	add
5	[BUG]  [BUGGY]    Option  option  =(Option)options.get(t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =(Option)options.get(t);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =(Option)options.get(t);		non-compiled	[CE]  illegal  start  of  type	56	None	add
6	[BUG]  [BUGGY]  cmd  =  new  CommandLine(group.getOptions());  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(group.getOptions());  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(group.getOptions());	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
7	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(str);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(str);	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
8	[BUG]  [BUGGY]  cmd  =  new  CommandLine(str,  options.getOptions());  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(str,  options.getOptions());  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(str,  options.getOptions());	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
9	[BUG]  [BUGGY]  cmd  =  new  CommandLine(options);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(options);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(options);	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
10	[BUG]  [BUGGY]  cmd  =  new  CommandLine(0);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(0);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(0);	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
11	[BUG]  [BUGGY]    Option  option  =(Option)opt.getOption();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =(Option)opt.getOption();  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =(Option)opt.getOption();		non-compiled	[CE]  illegal  start  of  type	56	None	add
12	[BUG]  [BUGGY]    Option  option  =  options.getOption(opt);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =  options.getOption(opt);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =  options.getOption(opt);		non-compiled	[CE]  illegal  start  of  type	56	None	add
13	[BUG]  [BUGGY]    Option  option  =(Option)options.getOption(opt);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    Option  option  =(Option)options.getOption(opt);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    Option  option  =(Option)options.getOption(opt);		non-compiled	[CE]  illegal  start  of  type	56	None	add
14	[BUG]  [BUGGY]  cmd  =  new  CommandLine(true);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(true);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(true);	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
15	[BUG]  [BUGGY]  cmd  =  new  CommandLine(t);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]  cmd  =  new  CommandLine(t);  [BUGGY]    boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	cmd  =  new  CommandLine(t);	cmd  =  new  CommandLine();  	non-compiled	[CE]  illegal  start  of  type	55	None	replace
16	[BUG]  [BUGGY]    OptionOption  option  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]    for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }  setOptions(options);  [BUGGY]    OptionOption  option  =  options.getOption(t);  [BUGGY]  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	    OptionOption  option  =  options.getOption(t);		non-compiled	[CE]  illegal  start  of  type	56	None	add
