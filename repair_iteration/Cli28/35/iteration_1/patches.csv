bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  iterator  =  this.options.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  this.options.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
2	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  iterator  =  opts.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  opts.iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
3	[BUG]  [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  iterator  =  options.keySet().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  options.keySet().iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
4	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption);	      OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
5	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator);	      OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
6	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  eatTheRest);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  eatTheRest);	      OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
7	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  opts.keySet().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  opts.keySet().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  options.values().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  options.values().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  optionList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  optionList.keySet().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  optionList.keySet().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(t);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Option  group  =  options.getOptionGroup(t);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(t);	      Option    group    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
11	[BUG]  [BUGGY]  Option  group  =  options.getGroup(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Option  group  =  options.getGroup(t);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getGroup(t);	      Option    group    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
12	[BUG]  [BUGGY]  Option  group  =  opt.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Option  group  =  opt.getOptionGroup(options);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  opt.getOptionGroup(options);	      Option    group    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Option  group  =  options.getOptionGroup(str);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(str);	      Option    group    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
14	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  this.opts.iterator();	      Iterator    <    Option>    iterator    =    opt.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  t  =  iterator.getIterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  t  =  iterator.getIterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.getIterator();	      t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
16	[BUG]  [BUGGY]  t  =  iterator.nextToken();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  t  =  iterator.nextToken();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.nextToken();	      t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")||  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "- ")||  str.endsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")||  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
18	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")&&  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(str.startsWith( "- ")&&  str.endsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")&&  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")||  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(str.startsWith( "- ")||  str.endsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")||  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  this.options.iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
21	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  opts.iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  options.keySet().iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "- ")&&!stopAtNonOption)  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&!stopAtNonOption)  {	  else    if(t.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
24	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")||  stopAtNonOption)  {	  else    if(t.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
25	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")||  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "-- ")||  t.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")||  t.startsWith( "-- "))  {	  else    if(t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")||  t.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "-- ")||  t.startsWith( "--))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")||  t.startsWith( "--))  {	  else    if(t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  else  if(str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(str.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "-- "))  {	  else    if(t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  str.startsWith( "- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  t.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(stopAtNonOption  &&  t.startsWith( "- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  t.startsWith( "- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
30	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  t.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  t.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  this.options.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  this.options.iterator();	      Iterator    <    Option>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&  t.startsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
33	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")||  t.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "- ")||  t.startsWith( "--))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")||  t.startsWith( "--))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
34	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  t.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  t.iterator();	      Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
35	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")||  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(str.startsWith( "- ")||  str.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")||  str.startsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
36	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||!stopAtNonOption)  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "- ")||!stopAtNonOption)  {	  else    if(t.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Option  group  =  options.getOptionGroup(opt,  stopAtNonOption);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  stopAtNonOption);	      Option    group    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  iterator);	      Option    group    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
39	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  this);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  this);  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  this);	      OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  options.values().iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  str.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.keySet().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  opt.keySet().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  opt.keySet().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")||!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "-- ")||!stopAtNonOption)  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")||!stopAtNonOption)  {	  else    if(t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
44	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  requiredOptions.iterator();	      Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator();  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  options.getOptions().iterator();	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  Iterator  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  iterator  =  options.values().iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  options.values().iterator();	      Iterator    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  option.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  option.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  option.iterator();	      Iterator    <    Option>    iterator    =    opt.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  t  =  iterator.previous();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  t  =  iterator.previous();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.previous();	      t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
49	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  Iterator  <  Option>  iterator  =  neededOptions.iterator();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  neededOptions.iterator();	      Iterator    <    Option>    iterator    =    opt.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  arguments.startsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  arguments.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(!stopAtNonOption  &&  arguments.startsWith( "- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  arguments.startsWith( "- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")&&  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "-- ")&&  str.endsWith( "-- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")&&  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t)&&!stopAtNonOption;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t)&&!stopAtNonOption;  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t)&&!stopAtNonOption;	      OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")&&!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( "-- ")&&!stopAtNonOption)  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")&&!stopAtNonOption)  {	  else    if(t.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  else  if(t.startsWith( ". ")||  t.startsWith( ".- "))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  else  if(t.startsWith( ". ")||  t.startsWith( ".- "))  {  [BUGGY]    {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( ". ")||  t.startsWith( ".- "))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
56	[BUG]  [BUGGY]  t  =  iterator.remove();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }      [BUGGY]  t  =  iterator.remove();  [BUGGY]    else  if  (t.startsWith(   "-   "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.remove();	      t    =    iterator.next();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
