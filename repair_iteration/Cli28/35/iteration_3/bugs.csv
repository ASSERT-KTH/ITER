bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  opts.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
2	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(t,  stopAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(t,  stopAtNonOption);	  Option    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
3	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(t,  iterator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(t,  iterator);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(t,  iterator);	  Option    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
4	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t)||  stopAtNonOption;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t)||  stopAtNonOption;  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t)||  stopAtNonOption;	  OptionGroup    group    =    options.getOptionGroup(t)&&!stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
5	[BUG]  [BUGGY]  t  =  iterator.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.clone();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.clone();	  t    =    iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
6	[BUG]  [BUGGY]  Option  group  =  options.getGroup(t,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getGroup(t,  stopAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getGroup(t,  stopAtNonOption);	  Option    group    =    options.getGroup(t);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  Option  group  =  options.getGroup(t,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getGroup(t,  iterator);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getGroup(t,  iterator);	  Option    group    =    options.getGroup(t);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
8	[BUG]  [BUGGY]  Option  group  =  options.getGroup(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getGroup(t,  eatTheRest);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getGroup(t,  eatTheRest);	  Option    group    =    options.getGroup(t);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  opts.values().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  opts.values().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  arguments);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator,  arguments);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  iterator.getOptionGroup(options);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  iterator.getOptionGroup(options);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  stopAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
13	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  str);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator,  str);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")&&!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")&&!stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "- ")&&!stopAtNonOption)  {	  else    if(stopAtNonOption.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
15	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
16	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||!stopAtNonOption  &&  cmd.contains(t))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||!stopAtNonOption  &&  cmd.contains(t))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "- ")||!stopAtNonOption  &&  cmd.contains(t))  {	  else    if(stopAtNonOption.startsWith(   "-   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
17	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  opts.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  opts.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
18	[BUG]  [BUGGY]  t  =  iterator.getIterator(str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.getIterator(str);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.getIterator(str);	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  this.neededOptions.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  this.neededOptions.iterator();	  Iterator    <    Option>    iterator    =    neededOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
20	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")||  stopAtNonOption)  {	  else    if(t.startsWith(   "--   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
21	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "-- ")||!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption.startsWith( "-- ")||!stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "-- ")||!stopAtNonOption)  {	  else    if(t.startsWith(   "--   ")||!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
22	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  this.opts.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
23	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  t.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  t.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
24	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  arguments);	  OptionGroup    group    =    options.getOptionGroup(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  cmd);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  cmd);	  OptionGroup    group    =    options.getOptionGroup(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  iterator);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  iterator);	  OptionGroup    group    =    options.getOptionGroup(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  OptionGroup  group  =  opts.getOptionGroup(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  opts.getOptionGroup(t,  eatTheRest);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  opts.getOptionGroup(t,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  block);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  block);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  block);	  OptionGroup    group    =    options.getOptionGroup(t,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
29	[BUG]  [BUGGY]  else  if(str.startsWith( "-- ")&&  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "-- ")&&  str.endsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "-- ")&&  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "--   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
30	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")||  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-- ")||  str.endsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")||  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "--   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
31	[BUG]  [BUGGY]  else  if(str.startsWith( "-- ")||  str.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "-- ")||  str.endsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "-- ")||  str.endsWith( "-- "))  {	  else    if(t.startsWith(   "--   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
32	[BUG]  [BUGGY]  t  =  iterator.nextToken().trim();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.nextToken().trim();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.nextToken().trim();	  t    =    iterator.nextToken();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
33	[BUG]  [BUGGY]  t  =  iterator.nextToken().toLowerCase();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.nextToken().toLowerCase();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.nextToken().toLowerCase();	  t    =    iterator.nextToken();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
34	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  optionList.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  optionList.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  optionList.iterator();	  Iterator    <    Option>    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
35	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")&&  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "- ")&&  str.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")&&  str.startsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")&&    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
36	[BUG]  [BUGGY]  Option  group  =  opts.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  opts.getOptionGroup(str);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  opts.getOptionGroup(str);	  Option    group    =    options.getOptionGroup(str);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  Option  group  =  opt.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  opt.getOptionGroup(str);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  opt.getOptionGroup(str);	  Option    group    =    options.getOptionGroup(str);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
38	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  str.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  str.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
39	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&  stopAtNonOption)  {	  else    if(t.startsWith(   "-   ")||    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
40	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||  t.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption.startsWith( "- ")||  t.startsWith( "- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "- ")||  t.startsWith( "- "))  {	  else    if(t.startsWith(   "-   ")||    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
41	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  opt.values().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  opt.values().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
42	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains( "- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains( "- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  arguments.contains( "- "))  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
43	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(!stopAtNonOption  &&  arguments.length()  >  0)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  arguments.length()  >  0)  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
44	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- "))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- "))  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
45	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
46	[BUG]  [BUGGY]  Option  group  =  option.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  option.getOptionGroup(options);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  option.getOptionGroup(options);	  Option    group    =    opt.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opts);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opts);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opts);	  Option    group    =    opt.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
48	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&!stopAtNonOption  &&  getOptions().hasOption(t))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&!stopAtNonOption  &&  getOptions().hasOption(t))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&!stopAtNonOption  &&  getOptions().hasOption(t))  {	  else    if(t.startsWith(   "-   ")&&!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
49	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  str.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  str.startsWith( "- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  str.startsWith( "- "))  {	  else    if(stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
50	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  t.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  t.startsWith( "-- "))  {	  else    if(stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
51	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  t.startsWith( "- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  t.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  t.startsWith( "- ")||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
52	[BUG]  [BUGGY]  else  if(stopAtNonOption.startsWith( "-- ")&&!stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption.startsWith( "-- ")&&!stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption.startsWith( "-- ")&&!stopAtNonOption)  {	  else    if(t.startsWith(   "--   ")&&!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
53	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")&&  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-- ")&&  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")&&  stopAtNonOption)  {	  else    if(t.startsWith(   "--   ")&&!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
54	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  stopAtNonOption,  arguments);	  Option    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
55	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  t);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  t);	  Option    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
56	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
57	[BUG]  [BUGGY]  Iterator  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  arguments.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  arguments.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
58	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")&&  t.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-- ")&&  t.startsWith( "--))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")&&  t.startsWith( "--))  {	  else    if(t.startsWith(   "--   ")||    t.startsWith(   "--))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
59	[BUG]  [BUGGY]  else  if(str.startsWith( "-- ")||  str.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "-- ")||  str.startsWith( "--))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "-- ")||  str.startsWith( "--))  {	  else    if(t.startsWith(   "--   ")||    t.startsWith(   "--))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
60	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")&&  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-- ")&&  t.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")&&  t.startsWith( "-- "))  {	  else    if(t.startsWith(   "--   ")||    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
61	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  this.requiredOptions.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  this.requiredOptions.iterator();	  Iterator    <    Option>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
62	[BUG]  [BUGGY]  else  if(t.startsWith( "-   ")||  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-   ")||  str.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-   ")||  str.startsWith( "-- "))  {	  else    if(str.startsWith(   "-   ")||    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
63	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "- ")||  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "- ")||  str.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  str.startsWith( "- ")||  str.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    str.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
64	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroups().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroups().iterator();  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  options.getOptionGroups().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
65	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroup().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroup().iterator();  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  options.getOptionGroup().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
66	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "--))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&  t.startsWith( "--))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
67	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")||  str.startsWith( "--))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "- ")||  str.startsWith( "--))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")||  str.startsWith( "--))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  Option  group  =  iterator.getOptionGroup(opt);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  iterator.getOptionGroup(opt);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  iterator.getOptionGroup(opt);	  Option    group    =    options.getOptionGroup(opt,    iterator);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
69	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(iterator,  opt);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(iterator,  opt);	  Option    group    =    options.getOptionGroup(opt,    iterator);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
70	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  arguments);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  iterator,  arguments);	  Option    group    =    options.getOptionGroup(opt,    iterator);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
71	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  null);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  null);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  null);	  OptionGroup    group    =    options.getOptionGroup(t,    this);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
72	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  this,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  this,  stopAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  this,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(t,    this);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
73	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains( "-- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  arguments.contains( "-- "))  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
74	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
75	[BUG]  [BUGGY]  else  if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "-- ")||  str.startsWith( "-- "))  {	  else    if(str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
76	[BUG]  [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  opts.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
77	[BUG]  [BUGGY]  Iterator  iterator  =  optionList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  optionList.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  optionList.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
78	[BUG]  [BUGGY]  else  if(t.startsWith( ": ")||  t.startsWith( ":: "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( ": ")||  t.startsWith( ":: "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( ": ")||  t.startsWith( ":: "))  {	  else    if(t.startsWith(   ".   ")||    t.startsWith(   ".-   "))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
79	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "-- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&  t.startsWith( "-- ")||  stopAtNonOption)  {	  else    if(t.startsWith(   "-   ")&&    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
80	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&  str.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&  str.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&  str.startsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")&&    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
81	[BUG]  [BUGGY]  else  if(t.startsWith( ": ")||  t.startsWith( ":- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( ": ")||  t.startsWith( ":- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( ": ")||  t.startsWith( ":- "))  {	  else    if(t.startsWith(   ".   ")||    t.startsWith(   ".-   "))    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
82	[BUG]  [BUGGY]  Iterator  iterator  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  options.options().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  options.options().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
83	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")||  str.endsWith( "--))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "- ")||  str.endsWith( "--))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")||  str.endsWith( "--))  {	  else    if(str.startsWith(   "-   ")||    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  requiredOptions.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  option.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  option.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  option.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
87	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t)||!stopAtNonOption;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t)||!stopAtNonOption;  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t)||!stopAtNonOption;	  OptionGroup    group    =    options.getOptionGroup(t)&&!stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
88	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  eatTheRest);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
89	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  requiredOptions);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator,  requiredOptions);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
90	[BUG]  [BUGGY]  t  =  iterator.first();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.first();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.first();	  t    =    iterator.previous();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
91	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0)  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
92	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opt.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  opt.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  opt.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
93	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(options);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(options);	  Option    group    =    options.getOptionGroup(str);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(cmd);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(cmd);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(cmd);	  Option    group    =    options.getOptionGroup(str);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
95	[BUG]  [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  requiredOptions.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  requiredOptions.iterator();	  Iterator    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.length()  >  0)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  arguments.length()  >  0)  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
97	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")||  stopAtNonOption  &&  cmd.hasArg(t))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")||  stopAtNonOption  &&  cmd.hasArg(t))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")||  stopAtNonOption  &&  cmd.hasArg(t))  {	  else    if(t.startsWith(   "-   ")||    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
98	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.options.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  this.options.values().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  this.options.values().iterator();	  Iterator    <    Option>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
99	[BUG]  [BUGGY]  t  =  iterator.firstToken();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.firstToken();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.firstToken();	  t    =    iterator.nextToken();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
100	[BUG]  [BUGGY]  t  =  iterator.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.getOptions();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.getOptions();	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
101	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&!stopAtNonOption  &&  options.hasOption(t))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&!stopAtNonOption  &&  options.hasOption(t))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&!stopAtNonOption  &&  options.hasOption(t))  {	  else    if(t.startsWith(   "-   ")&&!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
102	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  stopAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  iterator,  stopAtNonOption);	  Option    group    =    options.getOptionGroup(opt,    iterator);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
103	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  requiredOptions);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  iterator,  requiredOptions);	  Option    group    =    options.getOptionGroup(opt,    iterator);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
104	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(t,  this);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(t,  this);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(t,  this);	  Option    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator(0);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptions().iterator(0);  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  options.getOptions().iterator(0);	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
106	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  blockAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  blockAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "-- ")||  stopAtNonOption)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(!stopAtNonOption  &&  str.startsWith( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  str.startsWith( "-- ")||  stopAtNonOption)  {	  else    if(!stopAtNonOption    &&    str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
108	[BUG]  [BUGGY]  else  if(str.startsWith( "- ")&&  arguments.endsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "- ")&&  arguments.endsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "- ")&&  arguments.endsWith( "-- "))  {	  else    if(str.startsWith(   "-   ")&&    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
109	[BUG]  [BUGGY]  Iterator  iterator  =  opt.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  opt.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  opt.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
110	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  this.stopAtNonOption);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  this.stopAtNonOption);	  Option    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
111	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  this.options.values().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  this.options.values().iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
112	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  this.opts.keySet().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
113	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  eatTheRest);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  stopAtNonOption,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(t,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
114	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  arguments.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
115	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =(this.options!=  null)?  this.options.iterator()  :  options.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
116	[BUG]  [BUGGY]  else  if(t.startsWith( "-- ")&&!stopAtNonOption  &&  getOptions().hasOption(t))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "-- ")&&!stopAtNonOption  &&  getOptions().hasOption(t))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "-- ")&&!stopAtNonOption  &&  getOptions().hasOption(t))  {	  else    if(t.startsWith(   "--   ")&&!stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
117	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
118	[BUG]  [BUGGY]  else  if(str.startsWith( "-- ")&&  str.indexOf( "-- ")  >=  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(str.startsWith( "-- ")&&  str.indexOf( "-- ")  >=  0)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(str.startsWith( "-- ")&&  str.indexOf( "-- ")  >=  0)  {	  else    if(str.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
119	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  arguments.iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  arguments.iterator();	  Iterator    <    Option>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
120	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(!stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(!stopAtNonOption  &&  arguments.length  >  0)  {	  else    if(!stopAtNonOption    &&    arguments.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
121	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  neededOptions);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(opt,  iterator,  neededOptions);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(opt,  iterator,  neededOptions);	  Option    group    =    options.getOptionGroup(opt,    iterator);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
122	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptions().iterator();  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  Option>  iterator  =  opts.getOptions().iterator();	  Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
123	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  <  String>  iterator  =  this.options.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  <  String>  iterator  =  this.options.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
124	[BUG]  [BUGGY]  t  =  iterator.requires();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.requires();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.requires();	  t    =    iterator.getIterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
125	[BUG]  [BUGGY]  Option  group  =  options.getGroup(opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getGroup(opt);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getGroup(opt);	  Option    group    =    opt.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
126	[BUG]  [BUGGY]  t  =  iterator.peek();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  t  =  iterator.peek();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	t  =  iterator.peek();	  t    =    iterator.remove();    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
127	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  arguments.startsWith( "-- "))  {	  else    if(!stopAtNonOption    &&    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
128	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  neededOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  iterator,  neededOptions);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  iterator,  neededOptions);	  OptionGroup    group    =    options.getOptionGroup(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
129	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "-- ")||  t.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")&&  t.startsWith( "-- ")||  t.startsWith( "-- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")&&  t.startsWith( "-- ")||  t.startsWith( "-- "))  {	  else    if(t.startsWith(   "-   ")&&    t.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
130	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  this,  iterator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  this,  iterator);  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  this,  iterator);	  OptionGroup    group    =    options.getOptionGroup(t,    this);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
131	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")||  str.endsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")||  str.endsWith( "- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")||  str.endsWith( "- "))  {	  else    if(t.startsWith(   "-   ")||    str.endsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
132	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Iterator  iterator  =  this.options.keySet().iterator();  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Iterator  iterator  =  this.options.keySet().iterator();	  Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
133	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(stopAtNonOption  &&  arguments.startsWith( "- "))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(stopAtNonOption  &&  arguments.startsWith( "- "))  {	  else    if(stopAtNonOption    &&    t.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
134	[BUG]  [BUGGY]  else  if(t.startsWith( "- ")||  t.startsWith( "-))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  else  if(t.startsWith( "- ")||  t.startsWith( "-))  {  [BUGGY]      {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	else  if(t.startsWith( "- ")||  t.startsWith( "-))  {	  else    if(t.startsWith(   "-   ")||    t.startsWith(   "--))    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
135	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(t)&&!stopAtNonOption;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  eatTheRest  =  true;  }  else  {  cmd.addArg(t);  }  }        [BUGGY]  Option  group  =  options.getOptionGroup(t)&&!stopAtNonOption;  [BUGGY]      else  if  (t.startsWith(     "-     "))    {  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  processOption(t,  iterator);  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	Option  group  =  options.getOptionGroup(t)&&!stopAtNonOption;	  Option    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
