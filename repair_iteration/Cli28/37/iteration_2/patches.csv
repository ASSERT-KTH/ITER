bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  opts.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  opts.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  t.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  t.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  t.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptionGroup().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptionGroup().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opts.getOptionGroup().iterator();	  Iterator    <    Option>    iterator    =    options.getOptionGroup().iterator();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
4	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  arguments);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  arguments);	  eatTheRest    =    processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
5	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  options,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  options,  stopAtNonOption);	  eatTheRest    =    processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
6	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  options,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  options,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  options,  iterator);	  eatTheRest    =    processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
7	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  options,  group);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  options,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  options,  group);	  eatTheRest    =    processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
8	[BUG]  [BUGGY]  Iterator  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  t.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  t.iterator();	  Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
9	[BUG]  [BUGGY]  parseOption(t,  iterator,  neededOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  neededOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  neededOptions,  stopAtNonOption);	  processOption(t,    iterator,    neededOptions,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
10	[BUG]  [BUGGY]  processOption(t,  iterator,  arguments,  neededOptions,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  arguments,  neededOptions,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  arguments,  neededOptions,  eatTheRest);	  processOption(t,    iterator,    neededOptions,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
11	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opt.iterator();	  Iterator    <    Option>    iterator    =    t.iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  parseOption(t,  str,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  str,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  str,  iterator);	  parseOption(t,    iterator,    str);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
13	[BUG]  [BUGGY]  parse(t,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parse(t,  iterator,  arguments);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parse(t,  iterator,  arguments);	  parseOption(t,    iterator,    str);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
14	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  option,  iterator);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  option,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  option,  iterator);	  eatTheRest    =    processOption(t,    iterator,    option);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
15	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  option,  group);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  option,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  option,  group);	  eatTheRest    =    processOption(t,    iterator,    option);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
16	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  option,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  option,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  option,  stopAtNonOption);	  eatTheRest    =    processOption(t,    iterator,    option);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
17	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  this.neededOptions.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  this.neededOptions.iterator();	  Iterator    <    Option>    iterator    =    neededOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
18	[BUG]  [BUGGY]  processOption(t,  iterator,  arguments,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  arguments,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  arguments,  group);	  processOption(t,    iterator,    requiredOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
19	[BUG]  [BUGGY]  processOption(t,  iterator,  str,  requiredOptions,  group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  str,  requiredOptions,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  str,  requiredOptions,  group);	  processOption(t,    iterator,    requiredOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
20	[BUG]  [BUGGY]  processOption(t,  iterator,  group,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  group,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  group,  requiredOptions);	  processOption(t,    iterator,    requiredOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
21	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  this.requiredOptions.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  this.requiredOptions.iterator();	  Iterator    <    Option>    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
22	[BUG]  [BUGGY]  Iterator  iterator  =  selectedOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  selectedOptions.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  selectedOptions.keySet().iterator();	  Iterator    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
23	[BUG]  [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  opts.values().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  opts.values().iterator();	  Iterator    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opts.values().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opts.values().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
25	[BUG]  [BUGGY]  processOption(t,  iterator,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  options,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  options,  stopAtNonOption);	  processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  processOption(t,  iterator,  options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  options,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  options,  eatTheRest);	  processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  opts.values().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  opts.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
28	[BUG]  [BUGGY]  processOption(t,  block,  iterator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  block,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  block,  iterator);	  processOption(t,    iterator,    block);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
29	[BUG]  [BUGGY]  processOption(t,  iterator,  block,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  block,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  block,  eatTheRest);	  processOption(t,    iterator,    block);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
30	[BUG]  [BUGGY]  processOption(t,  iterator,  block,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  block,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  block,  requiredOptions);	  processOption(t,    iterator,    block);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
31	[BUG]  [BUGGY]  processOption(t,  iterator,  block,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  block,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  block,  stopAtNonOption);	  processOption(t,    iterator,    block);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
32	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptionGroups().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptionGroups().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opts.getOptionGroups().iterator();	  Iterator    <    Option>    iterator    =    options.getOptionGroups().iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
33	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroup(group).iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroup(group).iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  options.getOptionGroup(group).iterator();	  Iterator    <    Option>    iterator    =    options.getOptionGroups().iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
34	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  this.opts.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  this.opts.iterator();	  Iterator    iterator    =    opt.iterator();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
35	[BUG]  [BUGGY]  Iterator  iterator  =  option.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  option.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  option.iterator();	  Iterator    iterator    =    opt.iterator();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
36	[BUG]  [BUGGY]  parseOption(t,  iterator,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  arguments,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  arguments,  stopAtNonOption);	  parseOption(t,    iterator,    arguments);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  parse(t,  iterator,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parse(t,  iterator,  arguments,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parse(t,  iterator,  arguments,  stopAtNonOption);	  parseOption(t,    iterator,    arguments);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  parseOption(t,  iterator,  str,  arguments);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  str,  arguments);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  str,  arguments);	  parseOption(t,    iterator,    arguments);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  parseOption(t,  iterator,  arguments,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  arguments,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  arguments,  eatTheRest);	  parseOption(t,    iterator,    arguments);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
40	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  neededOptions,  group,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions,  group,  stopAtNonOption);	  processOption(t,    iterator,    neededOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
41	[BUG]  [BUGGY]  Iterator  iterator  =  optionList.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  optionList.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  optionList.iterator();	  Iterator    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  neededOptions,  stopAtNonOption,  arguments);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions,  stopAtNonOption,  arguments);	  processOption(t,    iterator,    neededOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
43	[BUG]  [BUGGY]  Iterator  iterator  =  options.options.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  options.options.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  options.options.iterator();	  Iterator    iterator    =    options.requireOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
44	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  str);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  str);	  eatTheRest    =    processOption(t,    iterator,    iterator);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
45	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  argumentList);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  argumentList);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  argumentList);	  eatTheRest    =    processOption(t,    iterator,    iterator);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
46	[BUG]  [BUGGY]  parseOption(t,  iterator,  arguments,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  arguments,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  arguments,  requiredOptions);	  parseOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
47	[BUG]  [BUGGY]  parseOption(t,  iterator,  str,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  str,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  str,  requiredOptions);	  parseOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  parseOption(t,  iterator,  argumentList,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  argumentList,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  argumentList,  requiredOptions);	  parseOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
49	[BUG]  [BUGGY]  parseOption(t,  iterator,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  requiredOptions,  stopAtNonOption);	  parseOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
50	[BUG]  [BUGGY]  parse(t,  iterator,  neededOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parse(t,  iterator,  neededOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parse(t,  iterator,  neededOptions,  stopAtNonOption);	  parseOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
51	[BUG]  [BUGGY]  parse(t,  iterator,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parse(t,  iterator,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parse(t,  iterator,  requiredOptions,  stopAtNonOption);	  parseOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
52	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptionGroup().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptionGroup().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opt.getOptionGroup().iterator();	  Iterator    <    Option>    iterator    =    opt.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
53	[BUG]  [BUGGY]  processOption(t,  iterator,  needsOptions,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  needsOptions,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  needsOptions,  eatTheRest);	  processOption(t,    iterator,    needsOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
54	[BUG]  [BUGGY]  processOption(t,  iterator,  needsOptions,  group);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  needsOptions,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  needsOptions,  group);	  processOption(t,    iterator,    needsOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
55	[BUG]  [BUGGY]  processOption(t,  iterator,  needsOptions,  stopAtNonOption,  group);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  needsOptions,  stopAtNonOption,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  needsOptions,  stopAtNonOption,  group);	  processOption(t,    iterator,    needsOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
56	[BUG]  [BUGGY]  Iterator  iterator  =  getOptions().keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  getOptions().keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  getOptions().keySet().iterator();	  Iterator    iterator    =    getOptions().values().iterator();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
57	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  beanList,  iterator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  beanList,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  beanList,  iterator);	  eatTheRest    =    processOption(t,    iterator,    beanList);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOption(t,  iterator,  beanList);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  processOption(t,  iterator,  beanList);  }  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	if(stopAtNonOption)  {  eatTheRest  =  processOption(t,  iterator,  beanList);  }	  eatTheRest    =    processOption(t,    iterator,    beanList);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
59	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  eatTheRest  =  processOption(t,  iterator,  beanList);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  if(!stopAtNonOption)  {  eatTheRest  =  processOption(t,  iterator,  beanList);  }  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	if(!stopAtNonOption)  {  eatTheRest  =  processOption(t,  iterator,  beanList);  }	  eatTheRest    =    processOption(t,    iterator,    beanList);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
60	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  beanList,  requiredOptions);	  eatTheRest    =    processOption(t,    iterator,    beanList);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
61	[BUG]  [BUGGY]  processOption(t,  iterator,  arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  arguments,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  arguments,  stopAtNonOption);	  processOption(t,    iterator,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
62	[BUG]  [BUGGY]  processOption(t,  iterator,  str,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  str,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  str,  requiredOptions,  stopAtNonOption);	  processOption(t,    iterator,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  processOption(t,  iterator,  options,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  options,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  options,  requiredOptions,  stopAtNonOption);	  processOption(t,    iterator,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  processOption(t,  iterator,  blockAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  blockAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  blockAtNonOption);	  processOption(t,    iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
65	[BUG]  [BUGGY]  processOption(t,  iterator,  option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  option);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  option);	  processOption(t,    iterator,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
66	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  this.opts.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  this.opts.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
67	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  t.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  t.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  requiredOptions,  stopAtNonOption);	  eatTheRest    =    processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
69	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  str,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  str,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  str,  requiredOptions);	  eatTheRest    =    processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
70	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  group,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  group,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  group,  iterator);	  eatTheRest    =    processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
71	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  block);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  block);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  block);	  eatTheRest    =    processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
72	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  group,  stopAtNonOption);	  eatTheRest    =    processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
73	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  arguments.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  arguments.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
74	[BUG]  [BUGGY]  parseOption(t,  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  stopAtNonOption);	  parseOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
75	[BUG]  [BUGGY]  parseOption(t,  iterator,  block);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  block);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  block);	  parseOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
76	[BUG]  [BUGGY]  parseOption(t,  iterator,  group);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  group);	  parseOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  neededOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  neededOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  neededOptions,  stopAtNonOption);	  eatTheRest    =    processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
78	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  neededOptions,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  neededOptions,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  neededOptions,  iterator);	  eatTheRest    =    processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
79	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  requiredOptions,  iterator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  requiredOptions,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  requiredOptions,  iterator);	  eatTheRest    =    processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
80	[BUG]  [BUGGY]  Iterator  iterator  =  option.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  option.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  option.keySet().iterator();	  Iterator    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
81	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.values().iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.values().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opt.values().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
82	[BUG]  [BUGGY]  processOption(t,  iterator,  str,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  str,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  str,  stopAtNonOption);	  processOption(t,    iterator,    str);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
83	[BUG]  [BUGGY]  processOption(t,  iterator,  str,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  str,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  str,  eatTheRest);	  processOption(t,    iterator,    str);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
84	[BUG]  [BUGGY]  parseOption(t,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  group,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  group,  eatTheRest);	  parseOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
85	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opt.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  opt.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  opt.iterator();	  Iterator    <    String>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
86	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  option.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  option.getOptions().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  option.getOptions().iterator();	  Iterator    <    Option>    iterator    =    opt.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
87	[BUG]  [BUGGY]  Iterator  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  requiredOptions.keySet().iterator();	  Iterator    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
88	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  requiredOptions.keySet().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
89	[BUG]  [BUGGY]  Iterator  iterator  =  opt.arguments.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  opt.arguments.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  opt.arguments.iterator();	  Iterator    iterator    =    this.arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  Iterator  iterator  =  options.arguments.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  options.arguments.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  options.arguments.iterator();	  Iterator    iterator    =    this.arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  Iterator  iterator  =  getOptions().valueList().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  getOptions().valueList().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  getOptions().valueList().iterator();	  Iterator    iterator    =    getOptions().values().iterator();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
92	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  optionOptions.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  optionOptions.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  optionOptions.iterator();	  Iterator    <    Option>    iterator    =    this.opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  option.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  option.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  option.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
94	[BUG]  [BUGGY]  processOption(t,  iterator,  eatTheRest,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  eatTheRest,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  eatTheRest,  requiredOptions,  stopAtNonOption);	  processOption(t,    iterator,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
95	[BUG]  [BUGGY]  parseOption(t,  str,  iterator,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  str,  iterator,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  str,  iterator,  requiredOptions);	  parseOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
96	[BUG]  [BUGGY]  parseOption(t,  iterator,  options);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  options);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  options);	  parseOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
97	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  opt,  requiredOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  opt,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  opt,  requiredOptions);	  eatTheRest    =    processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
98	[BUG]  [BUGGY]  Iterator  iterator  =  neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  neededOptions.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  neededOptions.iterator();	  Iterator    iterator    =    opt.iterator();    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
99	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  group,  requiredOptions);	  eatTheRest    =    processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
100	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  groupIterator,  iterator);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  groupIterator,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  groupIterator,  iterator);	  eatTheRest    =    processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
101	[BUG]  [BUGGY]  Iterator  iterator  =  this.requiredOptions.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  this.requiredOptions.values().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  this.requiredOptions.values().iterator();	  Iterator    iterator    =    this.requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
102	[BUG]  [BUGGY]  processOption(t,  iterator,  arguments,  neededOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  arguments,  neededOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  arguments,  neededOptions,  stopAtNonOption);	  processOption(t,    iterator,    neededOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
103	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  requiredOptions.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  requiredOptions.iterator();	  Iterator    <    String>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
104	[BUG]  [BUGGY]  processOption(t,  options,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  options,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  options,  iterator);	  processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
105	[BUG]  [BUGGY]  processOption(t,  group,  requiredOptions,  iterator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  group,  requiredOptions,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  group,  requiredOptions,  iterator);	  processOption(t,    iterator,    requiredOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
106	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opt.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  opt.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  opt.keySet().iterator();	  Iterator    <    String>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
107	[BUG]  [BUGGY]  processOption(t,  group,  iterator);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  group,  iterator);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  group,  iterator);	  processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
108	[BUG]  [BUGGY]  processOption(t,  iterator,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  group,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  group,  eatTheRest);	  processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptionGroups().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptionGroups().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opt.getOptionGroups().iterator();	  Iterator    <    Option>    iterator    =    options.getOptionGroups().iterator();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
110	[BUG]  [BUGGY]  parseOption(t,  iterator,  needsOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  needsOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  needsOptions,  stopAtNonOption);	  parseOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
111	[BUG]  [BUGGY]  Iterator  iterator  =  options.opts.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  options.opts.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  options.opts.iterator();	  Iterator    iterator    =    options.requireOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
112	[BUG]  [BUGGY]  parseOption(t,  iterator,  getArguments());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  getArguments());  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  getArguments());	  parseOption(t,    iterator,    arguments);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
113	[BUG]  [BUGGY]  Iterator  iterator  =  options.options().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  options.options().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  options.options().iterator();	  Iterator    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
114	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList,  neededOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList,  neededOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  beanList,  neededOptions);	  eatTheRest    =    processOption(t,    iterator,    beanList);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
115	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionList().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionList().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  options.getOptionList().iterator();	  Iterator    <    Option>    iterator    =    options.getOptionGroup().iterator();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
116	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  neededOptions,  group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  neededOptions,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  neededOptions,  group);	  eatTheRest    =    processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
117	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opt.values().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  String>  iterator  =  opt.values().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  opt.values().iterator();	  Iterator    <    String>    iterator    =    options.values().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
118	[BUG]  [BUGGY]  processOption(t,  iterator,  block,  group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  block,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  block,  group);	  processOption(t,    iterator,    block);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
119	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  str,  option);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  str,  option);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  str,  option);	  eatTheRest    =    processOption(t,    iterator,    option);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
120	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.getOptions().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  this.opts.getOptions().iterator();	  Iterator    <    Option>    iterator    =    opts.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
121	[BUG]  [BUGGY]  parseOption(t,  iterator,  argument);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  argument);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  argument);	  parseOption(t,    iterator,    str);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
122	[BUG]  [BUGGY]  processOption(t,  iterator,  options,  group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  options,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  options,  group);	  processOption(t,    iterator,    options);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
123	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  t.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  t.getOptions().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  t.getOptions().iterator();	  Iterator    <    Option>    iterator    =    opt.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
124	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  block,  requiredOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  block,  requiredOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  block,  requiredOptions);	  eatTheRest    =    processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
125	[BUG]  [BUGGY]  processOption(t,  iterator,  needsOptions,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  needsOptions,  str);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  needsOptions,  str);	  processOption(t,    iterator,    needsOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
126	[BUG]  [BUGGY]  processOption(t,  iterator,  block,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  block,  requiredOptions,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  block,  requiredOptions,  stopAtNonOption);	  processOption(t,    iterator,    requiredOptions,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
127	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList,  group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  beanList,  group);	  eatTheRest    =    processOption(t,    iterator,    beanList);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
128	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group,  neededOptions);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group,  neededOptions);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  group,  neededOptions);	  eatTheRest    =    processOption(t,    iterator,    group);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
129	[BUG]  [BUGGY]  processOption(t,  iterator,  str,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  str,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  str,  group);	  processOption(t,    iterator,    requiredOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
130	[BUG]  [BUGGY]  Iterator  iterator  =  this.opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  this.opts.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  this.opts.keySet().iterator();	  Iterator    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
131	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  arguments.iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  arguments.iterator();	  Iterator    <    Option>    iterator    =    this.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
132	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  preferredOptions.keySet().iterator();	  Iterator    <    Option>    iterator    =    opt.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
133	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  this.opts.keySet().iterator();	  Iterator    <    Option>    iterator    =    opts.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
134	[BUG]  [BUGGY]  processOption(t,  iterator,  requiredOptions,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  requiredOptions,  group,  stopAtNonOption);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  requiredOptions,  group,  stopAtNonOption);	  processOption(t,    iterator,    neededOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
135	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  neededOptions,  group,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions,  group,  eatTheRest);	  processOption(t,    iterator,    neededOptions,    group);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
136	[BUG]  [BUGGY]  processOption(t,  iterator,  argument);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  argument);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  argument);	  processOption(t,    iterator,    str);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
137	[BUG]  [BUGGY]  Iterator  iterator  =  neededOptions.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  neededOptions.keySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  neededOptions.keySet().iterator();	  Iterator    iterator    =    optionList.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
138	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  requiredOptions,  group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  eatTheRest  =  processOption(t,  iterator,  requiredOptions,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  requiredOptions,  group);	  eatTheRest    =    processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
139	[BUG]  [BUGGY]  parseOption(t,  iterator,  neededOptions,  group);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  neededOptions,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  neededOptions,  group);	  parseOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
140	[BUG]  [BUGGY]  Iterator  iterator  =  getOptions().entrySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  Iterator  iterator  =  getOptions().entrySet().iterator();  [BUGGY]      processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  getOptions().entrySet().iterator();	  Iterator    iterator    =    getOptions().values().iterator();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
141	[BUG]  [BUGGY]  processOption(t,  iterator,  beanDesc,  neededOptions,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  processOption(t,  iterator,  beanDesc,  neededOptions,  eatTheRest);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  beanDesc,  neededOptions,  eatTheRest);	  processOption(t,    iterator,    neededOptions,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
142	[BUG]  [BUGGY]  parseOption(t,  iterator,  arguments,  group);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      else  if  (t.startsWith(     "-     "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {      [BUGGY]  parseOption(t,  iterator,  arguments,  group);  [BUGGY]      }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  arguments,  group);	  parseOption(t,    iterator,    arguments);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
