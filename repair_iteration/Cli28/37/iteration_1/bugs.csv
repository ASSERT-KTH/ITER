bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Iterator  <  Option>  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  <  Option>  iterator  =  options.iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  <  Option>  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
2	[BUG]  [BUGGY]    Iterator  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  iterator  =  options.iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
3	[BUG]  [BUGGY]    Iterator  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  iterator  =  options.keySet().iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  iterator  =  options.keySet().iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
4	[BUG]  [BUGGY]    Iterator  iterator  =  arguments.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  iterator  =  arguments.iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  iterator  =  arguments.iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
5	[BUG]  [BUGGY]    Iterator  <  Option>  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  <  Option>  iterator  =  options.keySet().iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  <  Option>  iterator  =  options.keySet().iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
6	[BUG]  [BUGGY]  processOption(t,  iterator,  requiredOptions);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]  processOption(t,  iterator,  requiredOptions);  [BUGGY]  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  requiredOptions);	processOption(t,  iterator);  	non-compiled	[CE]  illegal  start  of  type	77	None	replace
7	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]  eatTheRest  =  processOption(t,  iterator);  [BUGGY]  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator);	processOption(t,  iterator);  	non-compiled	[CE]  illegal  start  of  type	77	None	replace
8	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]  processOption(t,  iterator,  neededOptions);  [BUGGY]  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions);	processOption(t,  iterator);  	non-compiled	[CE]  illegal  start  of  type	77	None	replace
9	[BUG]  [BUGGY]  parseOption(t,  iterator);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]  parseOption(t,  iterator);  [BUGGY]  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator);	processOption(t,  iterator);  	non-compiled	[CE]  illegal  start  of  type	77	None	replace
10	[BUG]  [BUGGY]  processOption(t,  iterator,  eatTheRest);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]  processOption(t,  iterator,  eatTheRest);  [BUGGY]  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  eatTheRest);	processOption(t,  iterator);  	non-compiled	[CE]  illegal  start  of  type	77	None	replace
11	[BUG]  [BUGGY]    Iterator  <  Option>  iterator  =  options.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  <  Option>  iterator  =  options.getOptions().iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  <  Option>  iterator  =  options.getOptions().iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
12	[BUG]  [BUGGY]    Iterator  <  Option>  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  <  Option>  iterator  =  opts.iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  <  Option>  iterator  =  opts.iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
13	[BUG]  [BUGGY]    Iterator  iterator  =  getOptions().iterator();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  iterator  =  getOptions().iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  iterator  =  getOptions().iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
14	[BUG]  [BUGGY]    Iterator  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  iterator  =  requiredOptions.iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  iterator  =  requiredOptions.iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
15	[BUG]  [BUGGY]    Iterator  <  String>  iterator  =  options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  else  if  (t.startsWith( "- "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {  [BUGGY]    Iterator  <  String>  iterator  =  options.iterator();  [BUGGY]  processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	    Iterator  <  String>  iterator  =  options.iterator();		non-compiled	[CE]  illegal  start  of  type	78	None	add
