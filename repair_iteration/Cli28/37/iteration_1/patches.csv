bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  String>  iterator  =  this.options.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  this.options.iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  String>  iterator  =  opts.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  opts.iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  String>  iterator  =  options.keySet().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  options.keySet().iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
4	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  this.opts.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  this.opts.iterator();	      Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  t.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  t.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  t.iterator();	      Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  processOption(t,  iterator,  requiredOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  requiredOptions,  stopAtNonOption);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  requiredOptions,  stopAtNonOption);	  processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  processOption(t,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  arguments);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  arguments);	  processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  processOption(t,  iterator,  options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  options);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  options);	  processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  this.arguments.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  this.arguments.iterator();	      Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
10	[BUG]  [BUGGY]  Iterator  iterator  =  opts.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  opts.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  opts.iterator();	      Iterator    iterator    =    arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  this.options.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  this.options.iterator();	      Iterator    <    Option>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
12	[BUG]  [BUGGY]  Iterator  iterator  =  this.options.iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  this.options.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  this.options.iterator();	      Iterator    iterator    =    getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
13	[BUG]  [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  opts.keySet().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  opts.keySet().iterator();	      Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  Iterator  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  options.values().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  options.values().iterator();	      Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
15	[BUG]  [BUGGY]  Iterator  iterator  =  optionList.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  optionList.keySet().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  optionList.keySet().iterator();	      Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
16	[BUG]  [BUGGY]  parseOption(t,  iterator,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  parseOption(t,  iterator,  eatTheRest);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  eatTheRest);	  parseOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
17	[BUG]  [BUGGY]  parseOption(t,  iterator,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  parseOption(t,  iterator,  str);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  str);	  parseOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
18	[BUG]  [BUGGY]  parseOption(t,  iterator,  arguments);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  parseOption(t,  iterator,  arguments);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  arguments);	  parseOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  parseOption(t,  iterator,  requiredOptions);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  parseOption(t,  iterator,  requiredOptions);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  requiredOptions);	  parseOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  opts.keySet().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opts.keySet().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  options.values().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  options.values().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.keySet().iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  opt.keySet().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opt.keySet().iterator();	      Iterator    <    Option>    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  requiredOptions);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  requiredOptions);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  requiredOptions);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
24	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  options);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  options);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
25	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  iterator);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  iterator);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  iterator);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  option);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  option);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  option);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
27	[BUG]  [BUGGY]  processOption(t,  iterator,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  stopAtNonOption);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  stopAtNonOption);	  processOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  processOption(t,  iterator,  block);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  block);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  block);	  processOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  processOption(t,  iterator,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  group);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  group);	  processOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  processOption(t,  iterator,  str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  str);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  str);	  processOption(t,    iterator,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroups().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroups().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  options.getOptionGroups().iterator();	      Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
32	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroup().iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  options.getOptionGroup().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  options.getOptionGroup().iterator();	      Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  opts.getOptions().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opts.getOptions().iterator();	      Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  Iterator  iterator  =  this.requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  this.requiredOptions.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  this.requiredOptions.iterator();	      Iterator    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
35	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  neededOptions,  stopAtNonOption);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions,  stopAtNonOption);	  processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
36	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  neededOptions,  eatTheRest);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions,  eatTheRest);	  processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
37	[BUG]  [BUGGY]  processOption(t,  iterator,  neededOptions,  group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  neededOptions,  group);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  neededOptions,  group);	  processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  processOption(t,  iterator,  needsOptions,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  needsOptions,  stopAtNonOption);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  needsOptions,  stopAtNonOption);	  processOption(t,    iterator,    neededOptions);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  parseOption(t,  iterator,  neededOptions);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  parseOption(t,  iterator,  neededOptions);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	parseOption(t,  iterator,  neededOptions);	  parseOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  Iterator  iterator  =  getOptions().values().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  getOptions().values().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  getOptions().values().iterator();	      Iterator    iterator    =    getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
41	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  opt.getOptions().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  opt.getOptions().iterator();	      Iterator    <    Option>    iterator    =    options.getOptions().iterator();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  Iterator  iterator  =  options.requireOptions.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  options.requireOptions.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  options.requireOptions.iterator();	      Iterator    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
43	[BUG]  [BUGGY]  Iterator  iterator  =  opt.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  opt.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  opt.iterator();	      Iterator    iterator    =    requiredOptions.iterator();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
44	[BUG]  [BUGGY]  Iterator  iterator  =  opt.keySet().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  iterator  =  opt.keySet().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  iterator  =  opt.keySet().iterator();	      Iterator    iterator    =    options.keySet().iterator();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
45	[BUG]  [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  String>  iterator  =  options.values().iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  String>  iterator  =  options.values().iterator();	      Iterator    <    String>    iterator    =    options.iterator();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  neededOptions);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  neededOptions);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  neededOptions);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  group);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  group);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  requiredOptions.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  requiredOptions.iterator();	      Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
49	[BUG]  [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  eatTheRest  =  processOption(t,  iterator,  beanList);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	eatTheRest  =  processOption(t,  iterator,  beanList);	  eatTheRest    =    processOption(t,    iterator);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  processOption(t,  iterator,  requiredOptions,  group);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  processOption(t,  iterator,  requiredOptions,  group);  [BUGGY]    }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	processOption(t,  iterator,  requiredOptions,  group);	  processOption(t,    iterator,    requiredOptions);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
51	[BUG]  [BUGGY]  Iterator  <  Option>  iterator  =  neededOptions.iterator();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    else  if  (t.startsWith(   "-   "))  {  if  (stopAtNonOption  &&  !getOptions().hasOption(t))  {  eatTheRest  =  true;  cmd.addArg(t);  }  else  {    [BUGGY]  Iterator  <  Option>  iterator  =  neededOptions.iterator();  [BUGGY]    processOption(t,  iterator);  }  }  else  {  cmd.addArg(t);  if  (stopAtNonOption)  {  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	Iterator  <  Option>  iterator  =  neededOptions.iterator();	      Iterator    <    Option>    iterator    =    opts.iterator();    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
