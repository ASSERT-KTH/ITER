bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!cmd.hasArg()  &&  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasArg()  &&  option.equals(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasArg()  &&  option.equals(option))  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  if(!cmd.hasArgs())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasArgs())  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasArgs())  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
3	[BUG]  [BUGGY]  if(!cmd.hasArg()  &&  option.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasArg()  &&  option.length()  >  0)  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasArg()  &&  option.length()  >  0)  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
4	[BUG]  [BUGGY]  if(option.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasArg())  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option.hasArg())  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
5	[BUG]  [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  options.getOption(option,  value);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  options.getOption(option,  value);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
6	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  getOptions().getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  getOptions().getOption(option);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
7	[BUG]  [BUGGY]  if(!cmd.hasOption(option)&&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasOption(option)&&!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasOption(option)&&!cmd.hasOption(option))  {	  if(!cmd.hasOption(option)||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
8	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)||!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option!=  null  ||!cmd.hasOption(option)||!cmd.hasOption(option))  {	  if(!cmd.hasOption(option)||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
9	[BUG]  [BUGGY]  if(option.hasOption(option)||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.hasOption(option)||!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option.hasOption(option)||!cmd.hasOption(option))  {	  if(!cmd.hasOption(option)||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
10	[BUG]  [BUGGY]  Option  cmd  =  option.getOption();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  option.getOption();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  option.getOption();	      Option    cmd    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
11	[BUG]  [BUGGY]  Option  cmd  =  e.getArg();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  e.getArg();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  e.getArg();	      Option    cmd    =    e.getOption();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  Option  cmd  =  e.getOption(option,  value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  e.getOption(option,  value);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  e.getOption(option,  value);	      Option    cmd    =    e.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  Option  cmd  =  e.getOption(option  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  e.getOption(option  +  1);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  e.getOption(option  +  1);	      Option    cmd    =    e.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.getArguments();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.getArguments();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.getArguments();	      Enumeration    <    String>    cmd    =    e.getArgs();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.getArg();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.getArg();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.getArg();	      Enumeration    <    String>    cmd    =    e.getArgs();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.getArg1();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.getArg1();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.getArg1();	      Enumeration    <    String>    cmd    =    e.getArgs();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option!=  null  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {	  if(!cmd.hasOption(option)&&!properties.containsKey(option))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
18	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option  ==  null  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {	  if(!cmd.hasOption(option)&&!properties.containsKey(option))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  if(!cmd.hasOption(option)||!properties.containsKey(option))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasOption(option)||!properties.containsKey(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasOption(option)||!properties.containsKey(option))  {	  if(!cmd.hasOption(option)&&!properties.containsKey(option))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOptions();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.nextElement().getOptions();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  options  =  e.nextElement().getOptions();	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  option.getOptions();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  options  =  option.getOptions();	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.getOptions(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  options  =  e.getOptions(option);	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  Option  cmd  =  getOption(option,  value);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  getOption(option,  value);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  getOption(option,  value);	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  Option  cmd  =  getOption(option.toString());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  getOption(option.toString());  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  getOption(option.toString());	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  Option  cmd  =  getOption(option  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =  getOption(option  +  1);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =  getOption(option  +  1);	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  &&!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option  ==  null  &&!cmd.hasOption(option))  {	  if(option!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.nextElement().getCmd();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.nextElement().getCmd();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.nextElement().getCmd();	      Enumeration    <    String>    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.getCmd().toLowerCase();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.getCmd().toLowerCase();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.getCmd().toLowerCase();	      Enumeration    <    String>    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.getCmd().toString();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.getCmd().toString();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.getCmd().toString();	      Enumeration    <    String>    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
30	[BUG]  [BUGGY]  String  cmd  =  option.getCmd();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  String  cmd  =  option.getCmd();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	String  cmd  =  option.getCmd();	      String    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  String  cmd  =  e.getCmd()  + "n ";  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  String  cmd  =  e.getCmd()  + "n ";  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	String  cmd  =  e.getCmd()  + "n ";	      String    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
32	[BUG]  [BUGGY]  String  cmd  =  e.getCmd()  +  option;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  String  cmd  =  e.getCmd()  +  option;  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	String  cmd  =  e.getCmd()  +  option;	      String    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
33	[BUG]  [BUGGY]  if(opt  ==  null  ||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(opt  ==  null  ||!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(opt  ==  null  ||!cmd.hasOption(option))  {	  if(cmd    ==    null    ||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
34	[BUG]  [BUGGY]  Option  cmd  =(Option)e.next();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =(Option)e.next();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =(Option)e.next();	      Option    cmd    =(Option)e.nextElement();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
35	[BUG]  [BUGGY]  Option  cmd  =(Option)e.getValue();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =(Option)e.getValue();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =(Option)e.getValue();	      Option    cmd    =(Option)e.nextElement();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
36	[BUG]  [BUGGY]  option  cmd  =(Option)e.nextElement();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  option  cmd  =(Option)e.nextElement();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	option  cmd  =(Option)e.nextElement();	      Option    cmd    =(Option)e.nextElement();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
37	[BUG]  [BUGGY]  if(cmd  ==  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(cmd  ==  null  &&!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(cmd  ==  null  &&!cmd.hasOption(option))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
38	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)&&!properties.containsKey(option))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)&&!properties.containsKey(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option!=  null  &&!cmd.hasOption(option)&&!properties.containsKey(option))  {	  if(!cmd.hasOption(option)&&!properties.containsKey(option))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  if(option  ==  null  ||!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!option.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option  ==  null  ||!option.hasOption(option))  {	  if(cmd    ==    null    ||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
40	[BUG]  [BUGGY]  Option  cmd  =(Option)e.getCmd();  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  cmd  =(Option)e.getCmd();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  cmd  =(Option)e.getCmd();	      Option    cmd    =(Option)e.nextElement();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
41	[BUG]  [BUGGY]  if(option!=  null  &&!option.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!option.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option!=  null  &&!option.hasOption(option))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  if(opt!=  null  &&!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(opt!=  null  &&!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(opt!=  null  &&!cmd.hasOption(option))  {	  if(cmd!=    null    &&!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
43	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasArg(option))  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!cmd.hasArg(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option  ==  null  ||!cmd.hasArg(option))  {	  if(option    ==    null    ||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option  ==  null  ||!cmd.hasOption(option)||!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option  ==  null  ||!cmd.hasOption(option)||!cmd.hasOption(option))  {	  if(!cmd.hasOption(option)||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
45	[BUG]  [BUGGY]  if(cmd.hasArg())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(cmd.hasArg())  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(cmd.hasArg())  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  Enumeration  <  String>  cmd  =  e.getCmd(option);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  cmd  =  e.getCmd(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  cmd  =  e.getCmd(option);	      Enumeration    <    String>    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  if(!cmd.hasArg()  ||  option.equals(option))  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasArg()  ||  option.equals(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasArg()  ||  option.equals(option))  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(!cmd.hasArg()  ||  option.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(!cmd.hasArg()  ||  option.length()  ==  0)  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(!cmd.hasArg()  ||  option.length()  ==  0)  {	  if(!cmd.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(option.length()  ==  0  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option.length()  ==  0  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option.length()  ==  0  ||!cmd.hasOption(option)&&!properties.containsKey(option))  {	  if(!cmd.hasOption(option)&&!properties.containsKey(option))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  Option  option  =  getOption(option);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  option  =  getOption(option);	      Option    cmd    =    getOption(option);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  String  cmd  =  e.getCmd()  + ": "  +  option;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  String  cmd  =  e.getCmd()  + ": "  +  option;  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	String  cmd  =  e.getCmd()  + ": "  +  option;	      String    cmd    =    e.getCmd();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  Enumeration  <  String>  options  =  e.options();  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Enumeration  <  String>  options  =  e.options();  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Enumeration  <  String>  options  =  e.options();	      Enumeration    <    String>    options    =    e.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
53	[BUG]  [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)||!cmd.hasOption(option))  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  if(option!=  null  &&!cmd.hasOption(option)||!cmd.hasOption(option))  {  [BUGGY]    {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	if(option!=  null  &&!cmd.hasOption(option)||!cmd.hasOption(option))  {	  if(!cmd.hasOption(option)||!cmd.hasOption(option))    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
54	[BUG]  [BUGGY]  Option  option  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  options.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  option  =  options.getOption(option);	      Option    cmd    =    options.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  Option  option  =  e.getOption(option);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    {  if  (properties  ==  null)  {  return;  }  for  (Enumeration  e  =  properties.propertyNames();  e.hasMoreElements();)  {  String  option  =  e.nextElement().toString();    [BUGGY]  Option  option  =  e.getOption(option);  [BUGGY]    if  (!cmd.hasOption(option))    {  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {  if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)  {  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	Option  option  =  e.getOption(option);	      Option    cmd    =    e.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
