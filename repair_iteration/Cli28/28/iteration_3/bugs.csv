bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length!=  1)  {	  if(arguments    ==    null    ||    arguments.length    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  >  1)  {	  if(arguments    ==    null    ||    arguments.length    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(str);	  OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  cmd);	  OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  1)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  1  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  >  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  1  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  >=  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  <  1  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
11	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  2  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  2  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  >  2  ||  arguments.length  >  0)  {	  if(arguments    ==    null    ||    arguments.length    <    2    ||    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
12	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getAllOptions();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getAllOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getAllOptions();	  OptionGroup    group    =    cmd.getSelectedOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptionGroup(options,  stopAtNonOption);	  OptionGroup    group    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
14	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(opts);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(opts);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptionGroup(opts);	  OptionGroup    group    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
15	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptions(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptions(options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptions(options,  stopAtNonOption);	  OptionGroup    group    =    cmd.getOptions(options);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
16	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions(cmd);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptions(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptions(cmd);	  OptionGroup    group    =    cmd.getOptions(options);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
17	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptions(options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptions(options,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptions(options,  eatTheRest);	  OptionGroup    group    =    cmd.getOptions(options);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
18	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments!=  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
19	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
20	[BUG]  [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  &&  arguments.length  >  0)  {	  if(arguments!=    null    &&    arguments.length    >    0)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
21	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  2)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  >=  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  >=  2)  {	  if(arguments    ==    null    ||    arguments.length!=    2)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(cmd);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)options.get(cmd);	  OptionGroup    group    =(OptionGroup)options.get(group);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
23	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(stopAtNonOption,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(stopAtNonOption,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(stopAtNonOption,  cmd);	  OptionGroup    group    =    options.getOptionGroup(stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
24	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(false);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(false);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptionGroup(false);	  OptionGroup    group    =    options.getOptionGroup(false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(false,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
26	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  ==  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  ==  1)  {	  if(arguments    ==    null    ||    arguments.length    ==    2)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
27	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opt,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opt,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(opt,  cmd);	  OptionGroup    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
28	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opt,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opt,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(opt,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
29	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(options,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(options,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
30	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getGroup(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getGroup(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getGroup(options);	  OptionGroup    group    =    cmd.getGroup();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getGroup(true);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getGroup(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getGroup(true);	  OptionGroup    group    =    cmd.getGroup();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroup();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroup();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getGroup();	  OptionGroup    group    =    cmd.getGroup();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.options.get(opt);	  OptionGroup    group    =(OptionGroup)options.get(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
34	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)opts.get(option);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)opts.get(option);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)opts.get(option);	  OptionGroup    group    =(OptionGroup)options.get(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
35	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  true,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  true,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(cmd,  true,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(true,    eatTheRest);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
36	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getImplicitOptionGroup();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getImplicitOptionGroup();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getImplicitOptionGroup();	  OptionGroup    group    =    cmd.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getSelectedOptionGroup(options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getSelectedOptionGroup(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getSelectedOptionGroup(options);	  OptionGroup    group    =    cmd.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
38	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true,  stopAtNonOption,  cmd);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true,  stopAtNonOption,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(true,  stopAtNonOption,  cmd);	  OptionGroup    group    =    options.getOptionGroup(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
39	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(true,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(true,  stopAtNonOption,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(true,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
40	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions(false);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptions(false);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptions(false);	  OptionGroup    group    =    options.getOptions(true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
41	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions(true,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptions(true,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptions(true,  stopAtNonOption);	  OptionGroup    group    =    options.getOptions(true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
42	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions(false,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptions(false,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptions(false,  stopAtNonOption);	  OptionGroup    group    =    options.getOptions(true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
43	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions(true,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptions(true,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptions(true,  eatTheRest);	  OptionGroup    group    =    options.getOptions(true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
44	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(false,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(false,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptionGroup(false,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
45	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false,  stopAtNonOption,  cmd);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false,  stopAtNonOption,  cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(false,  stopAtNonOption,  cmd);	  OptionGroup    group    =    options.getOptionGroup(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
46	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(true,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  group  =  options.getOptionGroup(true,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	Option  group  =  options.getOptionGroup(true,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opts);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opts);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(opts);	  OptionGroup    group    =    options.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(cmd);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.options.get(cmd);	  OptionGroup    group    =(OptionGroup)opts.get(cmd);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
49	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(cmd);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(cmd);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.opts.get(cmd);	  OptionGroup    group    =(OptionGroup)opts.get(cmd);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
50	[BUG]  [BUGGY]  OptionGroup  group  =  options.getGroups();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getGroups();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getGroups();	  OptionGroup    group    =    cmd.getGroups();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getGroups(options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getGroups(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getGroups(options);	  OptionGroup    group    =    cmd.getGroups();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  <  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  <  1)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments!=  null  ||  arguments.length  <  1)  {	  if(arguments!=    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
53	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(i);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(i);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.options.get(i);	  OptionGroup    group    =(OptionGroup)this.options.get(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
54	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  stopAtNonOption,  arguments);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(cmd,  stopAtNonOption,  arguments);	  OptionGroup    group    =    options.getOptionGroup(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
55	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(cmd,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(cmd,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(cmd,  stopAtNonOption,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(cmd,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.opts.get(options);	  OptionGroup    group    =(OptionGroup)this.opts.get(group);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
58	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptions(false,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptions(false,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptions(false,  eatTheRest);	  OptionGroup    group    =    options.getOptions(true);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
59	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(null,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(null,  stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
60	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getGroup(opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getGroup(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getGroup(opt);	  OptionGroup    group    =    cmd.getGroups();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opt,  this.stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(opt,  this.stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(opt,  this.stopAtNonOption);	  OptionGroup    group    =    options.getOptionGroup(opt,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  OptionGroup  group  =  options.getSelectedOptions();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getSelectedOptions();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getSelectedOptions();	  OptionGroup    group    =    cmd.getSelectedOptions();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
63	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  1  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length!=  1  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  2)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  ==  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments!=  null  ||  arguments.length  ==  2)  {	  if(arguments!=    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  &&  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments!=  null  &&  arguments.length  <  2)  {	  if(arguments!=    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
66	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(opt);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.opts.get(opt);	  OptionGroup    group    =(OptionGroup)this.opts.get(group);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
67	[BUG]  [BUGGY]  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  &&  arguments.length  ==  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  &&  arguments.length  ==  0)  {	  if(arguments!=    null    &&    arguments.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(opt  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(opt  -  1);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)options.get(opt  -  1);	  OptionGroup    group    =(OptionGroup)options.get(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
69	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(opt,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(opt,  stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)options.get(opt,  stopAtNonOption);	  OptionGroup    group    =(OptionGroup)options.get(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
70	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)opts.get(cmd  -  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)opts.get(cmd  -  1);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)opts.get(cmd  -  1);	  OptionGroup    group    =(OptionGroup)opts.get(cmd);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
71	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)opts.get(options);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)opts.get(options);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)opts.get(options);	  OptionGroup    group    =(OptionGroup)opts.get(cmd);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
72	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(opt);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(opt);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptionGroup(opt);	  OptionGroup    group    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  Option  group  =  options.getOptionGroup(true);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  Option  group  =  options.getOptionGroup(true);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	Option  group  =  options.getOptionGroup(true);	  OptionGroup    group    =    options.getOptionGroup(false);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)options.get(stopAtNonOption);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)options.get(stopAtNonOption);	  OptionGroup    group    =(OptionGroup)options.get(opt);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
75	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  2)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  2)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments  ==  null  ||  arguments.length  <  2  ||  arguments.length  <  2)  {	  if(arguments    ==    null    ||    arguments.length    <    1    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getSelectedGroup();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getSelectedGroup();  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getSelectedGroup();	  OptionGroup    group    =    cmd.getSelectedOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
77	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(option);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.opts.get(option);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.opts.get(option);	  OptionGroup    group    =(OptionGroup)this.opts.get(group);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  cmd.getOptionGroup(options,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  cmd.getOptionGroup(options,  eatTheRest);	  OptionGroup    group    =    cmd.getOptionGroup(options);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =(OptionGroup)this.options.get(t);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =(OptionGroup)this.options.get(t);	  OptionGroup    group    =(OptionGroup)this.options.get(group);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
80	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(t,  str);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(t,  str);	  OptionGroup    group    =    options.getOptionGroup(t);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
81	[BUG]  [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false,  stopAtNonOption,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  OptionGroup  group  =  options.getOptionGroup(false,  stopAtNonOption,  eatTheRest);  [BUGGY]      if  (arguments  ==  null)  {  {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	OptionGroup  group  =  options.getOptionGroup(false,  stopAtNonOption,  eatTheRest);	  OptionGroup    group    =    options.getOptionGroup(false,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
82	[BUG]  [BUGGY]  if(arguments!=  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      group.setSelected(null);  }  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;      [BUGGY]  if(arguments!=  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {  [BUGGY]      {  arguments  =  new  String[0];  }  List  tokenList  =  Arrays.asList(flatten(getOptions(),  arguments,  stopAtNonOption));  ListIterator  iterator  =  tokenList.listIterator();  while  (iterator.hasNext())  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	if(arguments!=  null  ||  arguments.length  <  2  ||  arguments.length  >  0)  {	  if(arguments!=    null    ||    arguments.length    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
