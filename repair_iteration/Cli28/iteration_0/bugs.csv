bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] else if (!("yes".equalsIgnoreCase(value)  || "true".equalsIgnoreCase(value)   || "1".equalsIgnoreCase(value))) [FE] AssertionFailedError [CONTEXT] try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } } [BUGGY] else if (!("yes".equalsIgnoreCase(value)      || "true".equalsIgnoreCase(value)            || "1".equalsIgnoreCase(value))) [BUGGY] || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   break; } cmd.addOption(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } } [BUGGY] [BUGGY] else if (!("yes".equalsIgnoreCase(value)      || "true".equalsIgnoreCase(value)            || "1".equalsIgnoreCase(value))) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   break; } cmd.addOption(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	1.0	284	286	1	add	
4	[BUG] [BUGGY] arguments = new String[0]; [FE] AssertionFailedError [CONTEXT]  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { [BUGGY] arguments = new String[0]; [BUGGY] } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next(); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	replace	
5	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { [BUGGY] [BUGGY] arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next(); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	169	169	1	add	
6	[BUG] [BUGGY] Option opt = getOptions().getOption(option); [FE] AssertionFailedError [CONTEXT] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [BUGGY] Option opt = getOptions().getOption(option); [BUGGY]   String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	replace	
7	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [BUGGY] [BUGGY] Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	265	265	1	add	
8	[BUG] [BUGGY] String value = properties.getProperty(option); [FE] AssertionFailedError [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  [BUGGY] String value = properties.getProperty(option); [BUGGY]  if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	replace	
9	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  [BUGGY] [BUGGY] String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	268	268	1	add	
10	[BUG] [BUGGY] if (opt.hasArg()) { [FE] AssertionFailedError [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); [BUGGY] if (opt.hasArg())    { [BUGGY] { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	replace	
11	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); [BUGGY] [BUGGY] if (opt.hasArg())    { { if (opt.getValues() == null || opt.getValues().length == 0) { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	270	271	1	add	
12	[BUG] [BUGGY] if (opt.getValues() == null || opt.getValues().length == 0)  { [FE] AssertionFailedError [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { [BUGGY] if (opt.getValues() == null || opt.getValues().length == 0)     { [BUGGY] { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	
13	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { [BUGGY] [BUGGY] if (opt.getValues() == null || opt.getValues().length == 0)     { { try { opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	add	
14	[BUG] [BUGGY] opt.addValueForProcessing(value); [FE] AssertionFailedError [CONTEXT] if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { [BUGGY] opt.addValueForProcessing(value); [BUGGY] } catch (RuntimeException exp) {  } } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	replace	
15	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { try { [BUGGY] [BUGGY] opt.addValueForProcessing(value); } catch (RuntimeException exp) {  } } } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	276	276	1	add	
17	[BUG] [BUGGY] cmd.addOption(opt); [FE] AssertionFailedError [CONTEXT] } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   break; } [BUGGY] cmd.addOption(opt); [BUGGY] } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else if (!("yes".equalsIgnoreCase(value) || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   break; } [BUGGY] [BUGGY] cmd.addOption(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	293	293	1	add	
19	[BUG] [BUGGY] return parse(options, arguments, properties, false); [FE] AssertionFailedError [CONTEXT] public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { [BUGGY] return parse(options, arguments, properties, false); [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public CommandLine parse(Options options, String[] arguments, Properties properties) throws ParseException { [BUGGY] [BUGGY] return parse(options, arguments, properties, false); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	103	103	1	add	
21	[BUG] [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [FE] AssertionFailedError [CONTEXT] { if (properties == null) { return; } [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)  { [BUGGY] { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	259	260	1	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { if (properties == null) { return; } [BUGGY] [BUGGY] for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)  { { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	259	260	1	add	
23	[BUG] [BUGGY] String option = e.nextElement().toString(); [FE] AssertionFailedError [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [BUGGY] String option = e.nextElement().toString(); [BUGGY]  if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	261	261	1	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { [BUGGY] [BUGGY] String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	261	261	1	add	
25	[BUG] [BUGGY] if (!cmd.hasOption(option)) { [FE] AssertionFailedError [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); [BUGGY] if (!cmd.hasOption(option))   { [BUGGY] { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { if (properties == null) { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); [BUGGY] [BUGGY] if (!cmd.hasOption(option))   { { Option opt = getOptions().getOption(option);  String value = properties.getProperty(option); if (opt.hasArg()) { if (opt.getValues() == null || opt.getValues().length == 0) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	263	264	1	add	
27	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   break; } cmd.addOption(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	295	295	1	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] || "true".equalsIgnoreCase(value) || "1".equalsIgnoreCase(value))) {   break; } cmd.addOption(opt); } [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5	295	295	1	add	
31	[BUG] [BUGGY] this.options = options; [FE] AssertionFailedError [CONTEXT] protected void setOptions(final Options options) { [BUGGY] this.options = options; [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	48	48	1	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void setOptions(final Options options) { [BUGGY] [BUGGY] this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	48	48	1	add	
33	[BUG] [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); [FE] AssertionFailedError [CONTEXT] protected void setOptions(final Options options) { this.options = options; [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); [BUGGY] } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	49	49	1	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void setOptions(final Options options) { this.options = options; [BUGGY] [BUGGY] this.requiredOptions = new ArrayList(options.getRequiredOptions()); } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	49	49	1	add	
35	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] protected void setOptions(final Options options) { this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); [BUGGY] } [BUGGY]  [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	50	50	1	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void setOptions(final Options options) { this.options = options; this.requiredOptions = new ArrayList(options.getRequiredOptions()); [BUGGY] [BUGGY] } [CLASS] Parser [METHOD] setOptions [RETURN_TYPE] void  Options options [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	50	50	1	add	
37	[BUG] [BUGGY] return options; [FE] AssertionFailedError [CONTEXT] protected Options getOptions() { [BUGGY] return options; [BUGGY] } [CLASS] Parser [METHOD] getOptions [RETURN_TYPE] Options  [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	54	54	1	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected Options getOptions() { [BUGGY] [BUGGY] return options; } [CLASS] Parser [METHOD] getOptions [RETURN_TYPE] Options  [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	54	54	1	add	
39	[BUG] [BUGGY] return requiredOptions; [FE] AssertionFailedError [CONTEXT] protected List getRequiredOptions() { [BUGGY] return requiredOptions; [BUGGY] } [CLASS] Parser [METHOD] getRequiredOptions [RETURN_TYPE] List  [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	59	59	1	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected List getRequiredOptions() { [BUGGY] [BUGGY] return requiredOptions; } [CLASS] Parser [METHOD] getRequiredOptions [RETURN_TYPE] List  [VARIABLES] Options options CommandLine cmd List requiredOptions boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	59	59	1	add	
41	[BUG] [BUGGY] return parse(options, arguments, null, false); [FE] AssertionFailedError [CONTEXT] public CommandLine parse(Options options, String[] arguments) throws ParseException { [BUGGY] return parse(options, arguments, null, false); [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	86	86	1	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] public CommandLine parse(Options options, String[] arguments) throws ParseException { [BUGGY] [BUGGY] return parse(options, arguments, null, false); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments [VARIABLES] Options options opts CommandLine cmd List requiredOptions String[] arguments boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	86	86	1	add	
43	[BUG] [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [FE] AssertionFailedError [CONTEXT] {  [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();)  { [BUGGY] { Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	147	148	1	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  [BUGGY] [BUGGY] for (Iterator it = options.helpOptions().iterator(); it.hasNext();)  { { Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	147	148	1	add	
45	[BUG] [BUGGY] Option opt = (Option) it.next(); [FE] AssertionFailedError [CONTEXT] {  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [BUGGY] Option opt = (Option) it.next(); [BUGGY] opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	149	149	1	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { [BUGGY] [BUGGY] Option opt = (Option) it.next(); opt.clearValues(); }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	149	149	1	add	
47	[BUG] [BUGGY] opt.clearValues(); [FE] AssertionFailedError [CONTEXT] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); [BUGGY] opt.clearValues(); [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	150	150	1	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); [BUGGY] [BUGGY] opt.clearValues(); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	150	150	1	add	
49	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); [BUGGY] } [BUGGY]  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	151	151	1	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); [BUGGY] [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	151	151	1	add	
51	[BUG] [BUGGY] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { [FE] AssertionFailedError [CONTEXT] {  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); }  [BUGGY] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)  { [BUGGY] { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	154	155	1	replace	
52	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  for (Iterator it = options.helpOptions().iterator(); it.hasNext();) { Option opt = (Option) it.next(); opt.clearValues(); }  [BUGGY] [BUGGY] for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)  { { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	154	155	1	add	
53	[BUG] [BUGGY] setOptions(options); [FE] AssertionFailedError [CONTEXT] }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  [BUGGY] setOptions(options); [BUGGY]  cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	
54	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  [BUGGY] [BUGGY] setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	add	
55	[BUG] [BUGGY] cmd = new CommandLine(); [FE] AssertionFailedError [CONTEXT]  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); [BUGGY] cmd = new CommandLine(); [BUGGY]  boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	replace	
56	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();) { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); [BUGGY] [BUGGY] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	163	163	1	add	
57	[BUG] [BUGGY] boolean eatTheRest = false; [FE] AssertionFailedError [CONTEXT] { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); [BUGGY] boolean eatTheRest = false; [BUGGY]  if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	165	165	1	replace	
58	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { OptionGroup group = (OptionGroup) it.next(); group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); [BUGGY] [BUGGY] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	165	165	1	add	
59	[BUG] [BUGGY] if (arguments == null) { [FE] AssertionFailedError [CONTEXT] group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; [BUGGY] if (arguments == null)  { [BUGGY] { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	replace	
60	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] group.setSelected(null); }  setOptions(options); cmd = new CommandLine(); boolean eatTheRest = false; [BUGGY] [BUGGY] if (arguments == null)  { { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	167	168	1	add	
61	[BUG] [BUGGY] List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [FE] AssertionFailedError [CONTEXT] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [BUGGY] List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [BUGGY]  ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	172	172	1	replace	
62	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] cmd = new CommandLine(); boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } [BUGGY] [BUGGY] List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	172	172	1	add	
63	[BUG] [BUGGY] ListIterator iterator = tokenList.listIterator(); [FE] AssertionFailedError [CONTEXT] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [BUGGY] ListIterator iterator = tokenList.listIterator(); [BUGGY]   while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	174	174	1	replace	
64	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] boolean eatTheRest = false; if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); [BUGGY] [BUGGY] ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	174	174	1	add	
65	[BUG] [BUGGY] while (iterator.hasNext()) { [FE] AssertionFailedError [CONTEXT] if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [BUGGY] while (iterator.hasNext())  { [BUGGY] { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }   [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	177	178	1	replace	
66	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (arguments == null) { arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  [BUGGY] [BUGGY] while (iterator.hasNext())  { { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }   [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	177	178	1	add	
67	[BUG] [BUGGY] String t = (String) iterator.next(); [FE] AssertionFailedError [CONTEXT] arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { [BUGGY] String t = (String) iterator.next(); [BUGGY]   if ("--".equals(t)) { eatTheRest = true; }  else if ("-".equals(t)) { [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	replace	
68	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] arguments = new String[0]; } List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption)); ListIterator iterator = tokenList.listIterator();  while (iterator.hasNext()) { [BUGGY] [BUGGY] String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }  else if ("-".equals(t)) { [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	179	179	1	add	
69	[BUG] [BUGGY] if ("--".equals(t)) { [FE] AssertionFailedError [CONTEXT] while (iterator.hasNext()) { String t = (String) iterator.next();  [BUGGY] if ("--".equals(t))   { [BUGGY] { eatTheRest = true; }  else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	182	183	1	replace	
70	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (iterator.hasNext()) { String t = (String) iterator.next();  [BUGGY] [BUGGY] if ("--".equals(t))   { { eatTheRest = true; }  else if ("-".equals(t)) { if (stopAtNonOption) { eatTheRest = true; [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	182	183	1	add	
71	[BUG] [BUGGY] else if ("-".equals(t)) { [FE] AssertionFailedError [CONTEXT] { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }  [BUGGY] else if ("-".equals(t))   { [BUGGY] { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	188	189	1	replace	
72	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { String t = (String) iterator.next();  if ("--".equals(t)) { eatTheRest = true; }  [BUGGY] [BUGGY] else if ("-".equals(t))   { { if (stopAtNonOption) { eatTheRest = true; } else { cmd.addArg(t); } } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	188	189	1	add	
73	[BUG] [BUGGY] else if (t.startsWith("-")) { [FE] AssertionFailedError [CONTEXT] { eatTheRest = true; } else { cmd.addArg(t); } }  [BUGGY] else if (t.startsWith("-"))   { [BUGGY] { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	replace	
74	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { eatTheRest = true; } else { cmd.addArg(t); } }  [BUGGY] [BUGGY] else if (t.startsWith("-"))   { { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	201	202	1	add	
75	[BUG] [BUGGY] if (stopAtNonOption && !getOptions().hasOption(t)) { [FE] AssertionFailedError [CONTEXT] } else { cmd.addArg(t); } }  else if (t.startsWith("-")) { [BUGGY] if (stopAtNonOption && !getOptions().hasOption(t))    { [BUGGY] { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	203	204	1	replace	
76	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } else { cmd.addArg(t); } }  else if (t.startsWith("-")) { [BUGGY] [BUGGY] if (stopAtNonOption && !getOptions().hasOption(t))    { { eatTheRest = true; cmd.addArg(t); } else { processOption(t, iterator); } }  [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	203	204	1	add	
77	[BUG] [BUGGY] processOption(t, iterator); [FE] AssertionFailedError [CONTEXT] else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { [BUGGY] processOption(t, iterator); [BUGGY] } }  else { cmd.addArg(t); if (stopAtNonOption) { [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	replace	
78	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] else if (t.startsWith("-")) { if (stopAtNonOption && !getOptions().hasOption(t)) { eatTheRest = true; cmd.addArg(t); } else { [BUGGY] [BUGGY] processOption(t, iterator); } }  else { cmd.addArg(t); if (stopAtNonOption) { [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	210	210	1	add	
79	[BUG] [BUGGY] if (eatTheRest) { [FE] AssertionFailedError [CONTEXT] { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } }  [BUGGY] if (eatTheRest)   { [BUGGY] { while (iterator.hasNext()) { String str = (String) iterator.next();  if (!"--".equals(str)) { cmd.addArg(str); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	226	227	1	replace	
80	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { cmd.addArg(t); if (stopAtNonOption) { eatTheRest = true; } }  [BUGGY] [BUGGY] if (eatTheRest)   { { while (iterator.hasNext()) { String str = (String) iterator.next();  if (!"--".equals(str)) { cmd.addArg(str); } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	226	227	1	add	
81	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] { String str = (String) iterator.next();  if (!"--".equals(str)) { cmd.addArg(str); } } } [BUGGY] } [BUGGY]  processProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	239	239	1	replace	
82	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { String str = (String) iterator.next();  if (!"--".equals(str)) { cmd.addArg(str); } } } [BUGGY] [BUGGY] } processProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	239	239	1	add	
83	[BUG] [BUGGY] processProperties(properties); [FE] AssertionFailedError [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } [BUGGY] processProperties(properties); [BUGGY] checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	241	241	1	replace	
84	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } [BUGGY] [BUGGY] processProperties(properties); checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	241	241	1	add	
85	[BUG] [BUGGY] checkRequiredOptions(); [FE] AssertionFailedError [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); [BUGGY] checkRequiredOptions(); [BUGGY]  return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	242	242	1	replace	
86	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (!"--".equals(str)) { cmd.addArg(str); } } } } processProperties(properties); [BUGGY] [BUGGY] checkRequiredOptions(); return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	242	242	1	add	
87	[BUG] [BUGGY] return cmd; [FE] AssertionFailedError [CONTEXT] { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); [BUGGY] return cmd; [BUGGY] } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	244	244	1	replace	
88	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { cmd.addArg(str); } } } } processProperties(properties); checkRequiredOptions(); [BUGGY] [BUGGY] return cmd; } [CLASS] Parser [METHOD] parse [RETURN_TYPE] CommandLine  Options options String[] arguments Properties properties boolean stopAtNonOption [VARIABLES] Options options opts CommandLine cmd boolean eatTheRest stopAtNonOption OptionGroup group Iterator it List requiredOptions tokenList Option opt String[] arguments String str t Properties properties ListIterator iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	244	244	1	add	
89	[BUG] [BUGGY] if (properties == null) { [FE] AssertionFailedError [CONTEXT] { [BUGGY] if (properties == null)  { [BUGGY] { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	254	255	1	replace	
90	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { [BUGGY] [BUGGY] if (properties == null)  { { return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	254	255	1	add	
91	[BUG] [BUGGY] return; [FE] AssertionFailedError [CONTEXT] { if (properties == null) { [BUGGY] return; [BUGGY] } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	256	256	1	replace	
92	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { if (properties == null) { [BUGGY] [BUGGY] return; } for (Enumeration e = properties.propertyNames(); e.hasMoreElements();) { String option = e.nextElement().toString(); if (!cmd.hasOption(option)) { Option opt = getOptions().getOption(option);  [CLASS] Parser [METHOD] processProperties [RETURN_TYPE] void  Properties properties [VARIABLES] Options options opts CommandLine cmd Enumeration e RuntimeException exp boolean List requiredOptions tokenList Option opt String option value Properties properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	256	256	1	add	
93	[BUG] [BUGGY] if (!getRequiredOptions().isEmpty()) { [FE] AssertionFailedError [CONTEXT] protected void checkRequiredOptions() throws MissingOptionException {  [BUGGY] if (!getRequiredOptions().isEmpty())  { [BUGGY] { throw new MissingOptionException(getRequiredOptions()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	308	309	1	replace	
94	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void checkRequiredOptions() throws MissingOptionException {  [BUGGY] [BUGGY] if (!getRequiredOptions().isEmpty())  { { throw new MissingOptionException(getRequiredOptions()); } } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	308	309	1	add	
95	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] protected void checkRequiredOptions() throws MissingOptionException {  if (!getRequiredOptions().isEmpty()) { throw new MissingOptionException(getRequiredOptions()); } [BUGGY] } [BUGGY]  [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	312	312	1	replace	
96	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] protected void checkRequiredOptions() throws MissingOptionException {  if (!getRequiredOptions().isEmpty()) { throw new MissingOptionException(getRequiredOptions()); } [BUGGY] [BUGGY] } [CLASS] Parser [METHOD] checkRequiredOptions [RETURN_TYPE] void  [VARIABLES] Options options opts CommandLine cmd List requiredOptions tokenList boolean  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	312	312	1	add	
97	[BUG] [BUGGY] while (iter.hasNext()) { [FE] AssertionFailedError [CONTEXT] {  [BUGGY] while (iter.hasNext())  { [BUGGY] { String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; }  [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	329	330	1	replace	
98	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  [BUGGY] [BUGGY] while (iter.hasNext())  { { String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; }  [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	329	330	1	add	
99	[BUG] [BUGGY] String str = (String) iter.next(); [FE] AssertionFailedError [CONTEXT] {  while (iter.hasNext()) { [BUGGY] String str = (String) iter.next(); [BUGGY]   if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; }  try [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	331	331	1	replace	
100	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] {  while (iter.hasNext()) { [BUGGY] [BUGGY] String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; }  try [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	331	331	1	add	
101	[BUG] [BUGGY] if (getOptions().hasOption(str) && str.startsWith("-")) { [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) { String str = (String) iter.next();  [BUGGY] if (getOptions().hasOption(str) && str.startsWith("-"))   { [BUGGY] { iter.previous(); break; }  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	334	335	1	replace	
102	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) { String str = (String) iter.next();  [BUGGY] [BUGGY] if (getOptions().hasOption(str) && str.startsWith("-"))   { { iter.previous(); break; }  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	334	335	1	add	
103	[BUG] [BUGGY] iter.previous(); [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) { String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { [BUGGY] iter.previous(); [BUGGY] break; }  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	336	336	1	replace	
104	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) { String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { [BUGGY] [BUGGY] iter.previous(); break; }  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	336	336	1	add	
105	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) { String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); [BUGGY] break; [BUGGY] }  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	337	337	1	replace	
106	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (iter.hasNext()) { String str = (String) iter.next();  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); [BUGGY] [BUGGY] break; }  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	337	337	1	add	
107	[BUG] [BUGGY] opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); [FE] AssertionFailedError [CONTEXT]  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; }  try { [BUGGY] opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); [BUGGY] } catch (RuntimeException exp) { iter.previous(); break; } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	343	343	1	replace	
108	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (getOptions().hasOption(str) && str.startsWith("-")) { iter.previous(); break; }  try { [BUGGY] [BUGGY] opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	343	343	1	add	
109	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT]  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; [BUGGY] } [BUGGY] } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	349	349	1	replace	
110	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; [BUGGY] [BUGGY] } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	349	349	1	add	
111	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT]  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } [BUGGY] } [BUGGY]  if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	350	350	1	replace	
112	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  try { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } [BUGGY] [BUGGY] } if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	350	350	1	add	
113	[BUG] [BUGGY] if (opt.getValues() == null && !opt.hasOptionalArg()) { [FE] AssertionFailedError [CONTEXT] { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } [BUGGY] if (opt.getValues() == null && !opt.hasOptionalArg())  { [BUGGY] { throw new MissingArgumentException(opt); } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	352	353	1	replace	
114	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { opt.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(str)); } catch (RuntimeException exp) { iter.previous(); break; } } [BUGGY] [BUGGY] if (opt.getValues() == null && !opt.hasOptionalArg())  { { throw new MissingArgumentException(opt); } } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	352	353	1	add	
115	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	356	356	1	replace	
116	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (opt.getValues() == null && !opt.hasOptionalArg()) { throw new MissingArgumentException(opt); } [CLASS] Parser [METHOD] processArgs [RETURN_TYPE] void  Option opt ListIterator iter [VARIABLES] Options options opts CommandLine cmd RuntimeException exp boolean List requiredOptions tokenList Option opt String str ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	356	356	1	add	
117	[BUG] [BUGGY] boolean hasOption = getOptions().hasOption(arg); [FE] AssertionFailedError [CONTEXT] { [BUGGY] boolean hasOption = getOptions().hasOption(arg); [BUGGY]   if (!hasOption) { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  Option opt = (Option) getOptions().getOption(arg).clone();  [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	369	369	1	replace	
118	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { [BUGGY] [BUGGY] boolean hasOption = getOptions().hasOption(arg);  if (!hasOption) { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  Option opt = (Option) getOptions().getOption(arg).clone();  [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	369	369	1	add	
119	[BUG] [BUGGY] if (!hasOption) { [FE] AssertionFailedError [CONTEXT] { boolean hasOption = getOptions().hasOption(arg);  [BUGGY] if (!hasOption)  { [BUGGY] { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  Option opt = (Option) getOptions().getOption(arg).clone();   if (opt.isRequired()) [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	372	373	1	replace	
120	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { boolean hasOption = getOptions().hasOption(arg);  [BUGGY] [BUGGY] if (!hasOption)  { { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  Option opt = (Option) getOptions().getOption(arg).clone();   if (opt.isRequired()) [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	372	373	1	add	
121	[BUG] [BUGGY] Option opt = (Option) getOptions().getOption(arg).clone(); [FE] AssertionFailedError [CONTEXT] { boolean hasOption = getOptions().hasOption(arg);  if (!hasOption) { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  [BUGGY] Option opt = (Option) getOptions().getOption(arg).clone(); [BUGGY]    if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); }    [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	378	378	1	replace	
122	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { boolean hasOption = getOptions().hasOption(arg);  if (!hasOption) { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  [BUGGY] [BUGGY] Option opt = (Option) getOptions().getOption(arg).clone();   if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); }    [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	378	378	1	add	
123	[BUG] [BUGGY] if (opt.isRequired()) { [FE] AssertionFailedError [CONTEXT] if (!hasOption) { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  Option opt = (Option) getOptions().getOption(arg).clone();   [BUGGY] if (opt.isRequired())  { [BUGGY] { getRequiredOptions().remove(opt.getKey()); }   if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt);  [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	382	383	1	replace	
124	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!hasOption) { throw new UnrecognizedOptionException("Unrecognized option: " + arg, arg); }  Option opt = (Option) getOptions().getOption(arg).clone();   [BUGGY] [BUGGY] if (opt.isRequired())  { { getRequiredOptions().remove(opt.getKey()); }   if (getOptions().getOptionGroup(opt) != null) { OptionGroup group = getOptions().getOptionGroup(opt);  [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	382	383	1	add	
125	[BUG] [BUGGY] if (getOptions().getOptionGroup(opt) != null) { [FE] AssertionFailedError [CONTEXT]   if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); }   [BUGGY] if (getOptions().getOptionGroup(opt) != null)  { [BUGGY] { OptionGroup group = getOptions().getOptionGroup(opt); if (group.isRequired()) { getRequiredOptions().remove(group); } group.setSelected(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	389	390	1	replace	
126	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   if (opt.isRequired()) { getRequiredOptions().remove(opt.getKey()); }   [BUGGY] [BUGGY] if (getOptions().getOptionGroup(opt) != null)  { { OptionGroup group = getOptions().getOptionGroup(opt); if (group.isRequired()) { getRequiredOptions().remove(group); } group.setSelected(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	389	390	1	add	
127	[BUG] [BUGGY] if (opt.hasArg()) { [FE] AssertionFailedError [CONTEXT] if (group.isRequired()) { getRequiredOptions().remove(group); } group.setSelected(opt); }  [BUGGY] if (opt.hasArg())  { [BUGGY] { processArgs(opt, iter); }  cmd.addOption(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	402	403	1	replace	
128	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (group.isRequired()) { getRequiredOptions().remove(group); } group.setSelected(opt); }  [BUGGY] [BUGGY] if (opt.hasArg())  { { processArgs(opt, iter); }  cmd.addOption(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	402	403	1	add	
129	[BUG] [BUGGY] processArgs(opt, iter); [FE] AssertionFailedError [CONTEXT] { getRequiredOptions().remove(group); } group.setSelected(opt); }  if (opt.hasArg()) { [BUGGY] processArgs(opt, iter); [BUGGY] }  cmd.addOption(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	404	404	1	replace	
130	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] { getRequiredOptions().remove(group); } group.setSelected(opt); }  if (opt.hasArg()) { [BUGGY] [BUGGY] processArgs(opt, iter); }  cmd.addOption(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	404	404	1	add	
131	[BUG] [BUGGY] cmd.addOption(opt); [FE] AssertionFailedError [CONTEXT] group.setSelected(opt); }  if (opt.hasArg()) { processArgs(opt, iter); }  [BUGGY] cmd.addOption(opt); [BUGGY] } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	408	408	1	replace	
132	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] group.setSelected(opt); }  if (opt.hasArg()) { processArgs(opt, iter); }  [BUGGY] [BUGGY] cmd.addOption(opt); } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	408	408	1	add	
133	[BUG] [BUGGY] } [FE] AssertionFailedError [CONTEXT] }  if (opt.hasArg()) { processArgs(opt, iter); }  cmd.addOption(opt); [BUGGY] } [BUGGY]  [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	409	409	1	replace	
134	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] }  if (opt.hasArg()) { processArgs(opt, iter); }  cmd.addOption(opt); [BUGGY] [BUGGY] } [CLASS] Parser [METHOD] processOption [RETURN_TYPE] void  String arg ListIterator iter [VARIABLES] Options options opts CommandLine cmd boolean hasOption OptionGroup group List requiredOptions tokenList Option opt String arg ListIterator iter  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	409	409	1	add	
