bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(value);	      Option    opt    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option,  value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option,  value);	      Option    opt    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(opt);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(opt);	      Option    opt    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(opt);  String  value  =  properties.getProperty(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(opt);  String  value  =  properties.getProperty(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(opt);  String  value  =  properties.getProperty(option);	      Option    opt    =    getOptions().getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
5	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(value);  String  value  =  properties.getProperty(option);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(value);  String  value  =  properties.getProperty(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(value);  String  value  =  properties.getProperty(option);	      Option    opt    =    getOptions().getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
6	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  option  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  option  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);	      Option    opt    =    getOptions().getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
7	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(value);  if(opt.hasArg())  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(value);  if(opt.hasArg())  {  return;  }  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(value);  if(opt.hasArg())  {  return;  }	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
8	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasValue())  {  return;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasValue())  {  return;  }  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option);  if(opt.hasValue())  {  return;  }	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
9	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(value);  if(opt.hasArg())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(value);  if(opt.hasArg())  {  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(value);  if(opt.hasArg())  {	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasValue())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasValue())  {  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option);  if(opt.hasValue())  {	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasValues())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasValues())  {  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option);  if(opt.hasValues())  {	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
12	[BUG]  [BUGGY]  String  value  =  properties.getProperty(opt);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  String  value  =  properties.getProperty(opt);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	String  value  =  properties.getProperty(opt);	      String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  String  value  =  properties.getValue(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  String  value  =  properties.getValue(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	String  value  =  properties.getValue(option);	      String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
14	[BUG]  [BUGGY]  String  value  =  properties.getProperty(option,  value);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  String  value  =  properties.getProperty(option,  value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	String  value  =  properties.getProperty(option,  value);	      String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  if(opt.getValues()!=  null  &&  opt.getValues().length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  if(opt.getValues()!=  null  &&  opt.getValues().length  ==  0)  {  [BUGGY]    {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(opt.getValues()!=  null  &&  opt.getValues().length  ==  0)  {	  if(opt.getValues()!=    null    ||    opt.getValues().length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  if(opt.getValues()  ==  null  &&  opt.getValues().length  ==  0)  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  if(opt.getValues()  ==  null  &&  opt.getValues().length  ==  0)  {  [BUGGY]    {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(opt.getValues()  ==  null  &&  opt.getValues().length  ==  0)  {	  if(opt.getValues()!=    null    ||    opt.getValues().length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  cmd  =  getOptions().getOption(value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  cmd  =  getOptions().getOption(value);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
18	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  cmd  =  getOptions().getOption(option,  value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  cmd  =  getOptions().getOption(option,  value);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
19	[BUG]  [BUGGY]  Option  cmd  =  getOptions().getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  cmd  =  getOptions().getOption(opt);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  cmd  =  getOptions().getOption(opt);	      Option    cmd    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
20	[BUG]  [BUGGY]  Option  opt  =  options.getOption(option);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  options.getOption(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  options.getOption(option);	      Option    opt    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
21	[BUG]  [BUGGY]  Option  opt  =  cmd.getOption(option);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  cmd.getOption(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  cmd.getOption(option);	      Option    opt    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
22	[BUG]  [BUGGY]  Option  opt  =  properties.getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  properties.getOption(opt);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  properties.getOption(opt);	      Option    opt    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
23	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(value);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  option  =  getOptions().getOption(value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  option  =  getOptions().getOption(value);	      Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  option  =  getOptions().getOption(opt);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  option  =  getOptions().getOption(opt);	      Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option,  value);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  option  =  getOptions().getOption(option,  value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  option  =  getOptions().getOption(option,  value);	      Option    option    =    getOptions().getOption(option);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
26	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option,  value);  String  value  =  properties.getProperty(option);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option,  value);  String  value  =  properties.getProperty(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option,  value);  String  value  =  properties.getProperty(option);	      Option    opt    =    getOptions().getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  if(opt.getValues()  ==  null  ||  opt.getValues().length!=  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  if(opt.getValues()  ==  null  ||  opt.getValues().length!=  0)  {  [BUGGY]    {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(opt.getValues()  ==  null  ||  opt.getValues().length!=  0)  {	  if(opt.getValues()!=    null    ||    opt.getValues().length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
28	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option,  value);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option,  value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option,  value);	      Option    opt    =    getOptions().getOption(option);    String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  String  value  =  properties.getStringValue(option);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  String  value  =  properties.getStringValue(option);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	String  value  =  properties.getStringValue(option);	      String    value    =    properties.getProperty(option);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  Option  option  =  getOptions().getOption(option);  if(opt.hasArg())  {  return;  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  option  =  getOptions().getOption(option);  if(opt.hasArg())  {  return;  }  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  option  =  getOptions().getOption(option);  if(opt.hasArg())  {  return;  }	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    return;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
31	[BUG]  [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasCmd())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  getOptions().getOption(option);  if(opt.hasCmd())  {  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  getOptions().getOption(option);  if(opt.hasCmd())  {	      Option    opt    =    getOptions().getOption(option);    if(opt.hasArg())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  if(opt.hasValues()  ||  opt.getValues().length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  if(opt.hasValues()  ||  opt.getValues().length  ==  0)  {  [BUGGY]    {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	if(opt.hasValues()  ||  opt.getValues().length  ==  0)  {	  if(opt.getValues()!=    null    ||    opt.getValues().length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  Option  opt  =  options.getOption(value);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    if  (!cmd.hasOption(option))  {  Option  opt  =  getOptions().getOption(option);  String  value  =  properties.getProperty(option);  if  (opt.hasArg())  {    [BUGGY]  Option  opt  =  options.getOption(value);  [BUGGY]    if  (opt.getValues()  ==  null  ||  opt.getValues().length  ==  0)      {  {  try  {  opt.addValueForProcessing(value);  }  catch  (RuntimeException  exp)  {  }  }  [CLASS]  Parser  [METHOD]  processProperties  [RETURN_TYPE]  void  Properties  properties  [VARIABLES]  Options  options  opts  CommandLine  cmd  Enumeration  e  RuntimeException  exp  boolean  List  requiredOptions  tokenList  Option  opt  String  option  value  Properties  properties  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.5773502691896258	272	273	1	replace	Option  opt  =  options.getOption(value);	      Option    opt    =    properties.getOption(option);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
