bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Option  option  =(Option)iterator.next();  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =(Option)iterator.next();  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =(Option)iterator.next();		non-compiled	[CE]  illegal  start  of  type	54	None	add
2	[BUG]  [BUGGY]    Option  option  =(Option)group.getOption(t);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =(Option)group.getOption(t);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =(Option)group.getOption(t);		non-compiled	[CE]  illegal  start  of  type	54	None	add
3	[BUG]  [BUGGY]    Option  option  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =  options.getOption(t);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =  options.getOption(t);		non-compiled	[CE]  illegal  start  of  type	54	None	add
4	[BUG]  [BUGGY]    Option  option  =  options.getOption(group);  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =  options.getOption(group);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =  options.getOption(group);		non-compiled	[CE]  illegal  start  of  type	54	None	add
5	[BUG]  [BUGGY]    Option  option  =(Option)group.getOption(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =(Option)group.getOption(options);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =(Option)group.getOption(options);		non-compiled	[CE]  illegal  start  of  type	54	None	add
6	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
7	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  defaultOptions.add(group);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  defaultOptions.add(group);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  defaultOptions.add(group);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
8	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  opts.add(group);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  opts.add(group);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  opts.add(group);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
9	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  options.addOption(group);  }  [CE]  illegal  start  of  type  [FE]          AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  options.addOption(group);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  options.addOption(group);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
10	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  opt  =(OptionGroup)it.next();  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  opt  =(OptionGroup)it.next();  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  opt  =(OptionGroup)it.next();  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
11	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
12	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
13	[BUG]  [BUGGY]    Option  option  =  group.getOption(t);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =  group.getOption(t);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =  group.getOption(t);		non-compiled	[CE]  illegal  start  of  type	54	None	add
14	[BUG]  [BUGGY]    Option  option  =  group.getOption(options);  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    Option  option  =  group.getOption(options);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    Option  option  =  group.getOption(options);		non-compiled	[CE]  illegal  start  of  type	54	None	add
15	[BUG]  [BUGGY]    OptionOption  option  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]    OptionOption  option  =  options.getOption(t);  [BUGGY]  setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	    OptionOption  option  =  options.getOption(t);		non-compiled	[CE]  illegal  start  of  type	54	None	add
16	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  requiredOptions.add(group);  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  requiredOptions.add(group);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  requiredOptions.add(group);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
17	[BUG]  [BUGGY]  if(options!=  null  ||  arguments.length  ==  0)  {  setOptions(options);  }  [CE]  illegal  start  of  type  [FE]      AssertionFailedError  [CONTEXT]  }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }    [BUGGY]  if(options!=  null  ||  arguments.length  ==  0)  {  setOptions(options);  }  [BUGGY]    cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null  ||  arguments.length  ==  0)  {  setOptions(options);  }	setOptions(options);  	non-compiled	[CE]  illegal  start  of  type	53	None	replace
