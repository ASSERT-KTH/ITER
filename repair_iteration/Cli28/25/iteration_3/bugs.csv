bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  option  =(Option)options.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.clone();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.clone();	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  Option  option  =(Option)options.getValue();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.getValue();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.getValue();	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
3	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOption(group,  stopAtNonOption);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOption(group,  stopAtNonOption);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group,  t);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOption(group,  t);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOption(group,  t);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  Option  opt  =  options.getOption(t);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOption(t);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOption(t);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOptions().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptions().iterator();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptions().iterator();	  Option    option    =    options.getOptionGroups().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOptionOptions().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptionOptions().iterator();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptionOptions().iterator();	  Option    option    =    options.getOptionGroups().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(t,  group,  eatTheRest);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(t,  group,  eatTheRest);	  Option    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  group,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(t,  group,  arguments);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(t,  group,  arguments);	  Option    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
10	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(opt,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(opt,  group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(opt,  group);	  OptionOption    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(group,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(group,  stopAtNonOption);	  Option    option    =    group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
12	[BUG]  [BUGGY]  Option  option  =  group.getOption(options,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(options,  stopAtNonOption,  arguments);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(options,  stopAtNonOption,  arguments);	  Option    option    =    group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
13	[BUG]  [BUGGY]  Option  option  =  group.getOption(options,  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(options,  stopAtNonOption,  options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(options,  stopAtNonOption,  options);	  Option    option    =    group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
14	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(group,  str);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(group,  str);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(group,  str);	  OptionOption    option    =    options.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
15	[BUG]  [BUGGY]  Option  option  =  options.getOption(opt,  group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(opt,  group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(opt,  group);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  Option  option  =  group.getOption(opt);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(opt);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(opt);	  Option    option    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.getOption(group,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.getOption(group,  stopAtNonOption);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
18	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(opt);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.getOption(opt);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.getOption(opt);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
19	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(group,  t);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.getOption(group,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.getOption(group,  t);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
20	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptionGroup(group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptionGroup(group);	  Option    option    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
21	[BUG]  [BUGGY]  Option  option  =  group.getOptionGroups();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOptionGroups();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOptionGroups();	  Option    option    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
22	[BUG]  [BUGGY]  Option  option  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOptions();	  Option    option    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
23	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(group,  str);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(group,  str);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  str,  group);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(t,  str,  group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(t,  str,  group);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  t);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(str,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(str,  t);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
26	[BUG]  [BUGGY]  options.setOptions(arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.setOptions(arguments);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.setOptions(arguments);	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    setOptions(options);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
27	[BUG]  [BUGGY]  Option  options  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  options  =  group.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  options  =  group.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
28	[BUG]  [BUGGY]  Option  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  options  =  opts.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  options  =  opts.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
29	[BUG]  [BUGGY]  Option  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  options  =  opt.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  options  =  opt.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  Option  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  options  =  option.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  options  =  option.getOptions();	  Option    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  Option  opt  =  option.getOption(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  option.getOption(opt);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  option.getOption(opt);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
32	[BUG]  [BUGGY]  Option  opt  =  group.getOption(opt);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  group.getOption(opt);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  group.getOption(opt);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
33	[BUG]  [BUGGY]  Option  option  =(Option)group.getValue();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getValue();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getValue();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
34	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  Option  option  =  group.getOptionGroup();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOptionGroup();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOptionGroup();	  Option    option    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
36	[BUG]  [BUGGY]  Option  option  =  group.getOption();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption();	  Option    option    =    options.getOptionGroup();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
37	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(t,  arguments);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(t,  arguments);	  Option    option    =    group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
38	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(t,  eatTheRest);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(t,  eatTheRest);	  Option    option    =    group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
39	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  null);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(t,  null);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(t,  null);	  Option    option    =    group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
40	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  group,  t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(str,  group,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(str,  group,  t);	  Option    option    =    options.getOption(group,    t);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
41	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(group,  t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(group,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(group,  t);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
42	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  eatTheRest);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(t,  group,  eatTheRest);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
43	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(t,  group,  stopAtNonOption);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
44	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  arguments);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(t,  group,  arguments);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(t,  group,  arguments);	  OptionOption    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
45	[BUG]  [BUGGY]  Option  option  =  options.getOption(opts);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(opts);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(opts);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
46	[BUG]  [BUGGY]  Option  option  =  options.getOption(options,  group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(options,  group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(options,  group);	  Option    option    =    options.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
47	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(arguments,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(arguments,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(arguments,  stopAtNonOption);	  Option    option    =(Option)group.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(option);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(option);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(option);	  Option    option    =(Option)group.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  options  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options  =  group.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options  =  group.getOptions();	  options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options  =  opts.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options  =  opts.getOptions();	  options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  options  =  groups.getOptions();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options  =  groups.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options  =  groups.getOptions();	  options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  options  =(Option)it.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options  =(Option)it.next();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options  =(Option)it.next();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  Option  option  =  group.getOptionGroup(opt);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOptionGroup(opt);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOptionGroup(opt);	  Option    option    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
54	[BUG]  [BUGGY]  Option  option  =  group.getOption(options,  str);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(options,  str);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(options,  str);	  Option    option    =    group.getOption(options,    t);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
55	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  group);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(t,  str,  group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(t,  str,  group);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
56	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(str,  t);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(str,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(str,  t);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
57	[BUG]  [BUGGY]  OptionOption  option  =  group.getOption(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  group.getOption(options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  group.getOption(options);	  OptionOption    option    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
58	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(t,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(t,  arguments);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(t,  arguments);	  Option    option    =(Option)group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
59	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(t,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(t,  null);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(t,  null);	  Option    option    =(Option)group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
60	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(str,  t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(str,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(str,  t);	  Option    option    =(Option)group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
61	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(t,  options,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(t,  options,  stopAtNonOption);	  Option    option    =    group.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
62	[BUG]  [BUGGY]  Option  option  =  group.getOption(str,  options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(str,  options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(str,  options);	  Option    option    =    group.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
63	[BUG]  [BUGGY]  Option  option  =(Option)options.get(0);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.get(0);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.get(0);	  Option    option    =(Option)options.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
64	[BUG]  [BUGGY]  Option  option  =(Option)opts.next();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)opts.next();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)opts.next();	  Option    option    =(Option)options.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
65	[BUG]  [BUGGY]  Option[]  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  opts.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  opts.getOptions();	  Option[]    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
66	[BUG]  [BUGGY]  Option[]  options  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  group.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  group.getOptions();	  Option[]    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
67	[BUG]  [BUGGY]  Option[]  options  =  option.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  option.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  option.getOptions();	  Option[]    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  Options  options  =  group.getOptions();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Options  options  =  group.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Options  options  =  group.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  Options  options  =  opts.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Options  options  =  opts.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Options  options  =  opts.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  Options  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Options  options  =  opt.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Options  options  =  opt.getOptions();	  Options    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  ==  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  ==  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  ==	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
72	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  [Delete]  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  [Delete]  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  [Delete]	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
73	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  >=  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  >=  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  >=	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
74	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  str);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  str);	  Option    option    =(Option)group.getOption(options,    t);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
75	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(str,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(str,  options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(str,  options);	  Option    option    =(Option)group.getOption(options,    t);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
76	[BUG]  [BUGGY]  List  <  String>  options  =  setOptions(options);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  List  <  String>  options  =  setOptions(options);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	List  <  String>  options  =  setOptions(options);	  Set    <    String>    options    =    setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
77	[BUG]  [BUGGY]  Set  <  String>  options  =  setOptions(opts);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Set  <  String>  options  =  setOptions(opts);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Set  <  String>  options  =  setOptions(opts);	  Set    <    String>    options    =    setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
78	[BUG]  [BUGGY]  Set  <  String>  options  =  setOptions(options,  group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Set  <  String>  options  =  setOptions(options,  group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Set  <  String>  options  =  setOptions(options,  group);	  Set    <    String>    options    =    setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
79	[BUG]  [BUGGY]  options.add(group,  t);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.add(group,  t);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.add(group,  t);	  options.add(group);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  options.add(group.opt);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.add(group.opt);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.add(group.opt);	  options.add(group);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
81	[BUG]  [BUGGY]  options.add(group,  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.add(group,  str);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.add(group,  str);	  options.add(group);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
82	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  group.setSelected(null);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)option.next();  group.setSelected(null);  }	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
85	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
86	[BUG]  [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
87	[BUG]  [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  }	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
88	[BUG]  [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
89	[BUG]  [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  ==  illegal  start  of  type  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  ==  illegal  start  of  type  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  ==  illegal  start  of  type	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
90	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  stopAtNonOption,  arguments);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  stopAtNonOption,  arguments);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  stopAtNonOption,  arguments);	  Option    option    =(Option)group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
91	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  stopAtNonOption,  options);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  stopAtNonOption,  options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  stopAtNonOption,  options);	  Option    option    =(Option)group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
92	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  stopAtNonOption,  t);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  stopAtNonOption,  t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  stopAtNonOption,  t);	  Option    option    =(Option)group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
93	[BUG]  [BUGGY]  options.setOptions(opts);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.setOptions(opts);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.setOptions(opts);	  options.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
94	[BUG]  [BUGGY]  options.setOptions(group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.setOptions(group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.setOptions(group);	  options.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
95	[BUG]  [BUGGY]  options.addOption(opt);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.addOption(opt);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.addOption(opt);	  options.setOptions(options);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
96	[BUG]  [BUGGY]  Option  option  =  opt.getOption(options);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  opt.getOption(options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  opt.getOption(options);	  Option    option    =    t.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
97	[BUG]  [BUGGY]  Option  option  =  t.getOption(group);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  t.getOption(group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  t.getOption(group);	  Option    option    =    t.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
98	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  arguments);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(group,  arguments);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(group,  arguments);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  Option  option  =  group.getOption(arguments);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(arguments);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(arguments);	  Option    option    =    options.getOption(arguments);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
100	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(t,  options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(t,  options,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(t,  options,  stopAtNonOption);	  Option    option    =(Option)group.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
101	[BUG]  [BUGGY]  Option  option  =  groups.getOption(str);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  groups.getOption(str);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  groups.getOption(str);	  Option    option    =    group.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
102	[BUG]  [BUGGY]  options.addOption(options);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.addOption(options);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.addOption(options);	  options.addOption(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  options.addOption(opts);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.addOption(opts);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.addOption(opts);	  options.addOption(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
105	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  option  =(Option)it.next();  group.addOption(option);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  option  =(Option)it.next();  group.addOption(option);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  option  =(Option)it.next();  group.addOption(option);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
106	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  if(opts!=  null)  {  setOptions(opts);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  if(opts!=  null)  {  setOptions(opts);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  if(opts!=  null)  {  setOptions(opts);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
107	[BUG]  [BUGGY]  options  =(Option)group.getOption(t);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options  =(Option)group.getOption(t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options  =(Option)group.getOption(t);	  Option    option    =(Option)group.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
108	[BUG]  [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  options.getOptions();  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
109	[BUG]  [BUGGY]  Option[]  opts  =  options.getOptions();  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  opts  =  options.getOptions();  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  opts  =  options.getOptions();  for(Iterator  it  =  opts.iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption(option);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
110	[BUG]  [BUGGY]  Option  option  =(Option)group.getOptions().next();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOptions().next();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOptions().next();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  Option  option  =(Option)group.clone();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.clone();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.clone();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
112	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  t,  null);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(group,  t,  null);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(group,  t,  null);	  Option    option    =    options.getOption(group,    t);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
113	[BUG]  [BUGGY]  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options  =  opt.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options  =  opt.getOptions();	  options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
114	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(opt,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptionGroup(opt,  group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptionGroup(opt,  group);	  Option    option    =    options.getOptionGroup(opt);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
115	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setOption	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
116	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.setSelected(null);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
117	[BUG]  [BUGGY]  Option  opt  =  options.getOption(opt,  group);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOption(opt,  group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOption(opt,  group);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
118	[BUG]  [BUGGY]  Option  opt  =  options.getOption(block);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOption(block);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOption(block);	  Option    opt    =    options.getOption(opt);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
119	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
120	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(opts);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(option	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
121	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(t,  block);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(t,  block);	  Option    option    =(Option)group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
122	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options);  }  else  {  for(Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  Option  option  =(Option)it.next();  group.addOption(	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
123	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(opt);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(opt);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(opt);	  Option    option    =(Option)group.getOption(str);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
124	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options,  group);  }  else  {  requiredOptions.add(opt);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(options,  group);  }  else  {  requiredOptions.add(opt);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options,  group);  }  else  {  requiredOptions.add(opt);  }	  if(options!=    null)    {    setOptions(options,    group);    }    else    {    requiredOptions.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
125	[BUG]  [BUGGY]  Option[]  options  =  opt.getOptions();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option[]  options  =  opt.getOptions();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option[]  options  =  opt.getOptions();	  Option[]    options    =    options.getOptions();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
126	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  group);	  Option    option    =(Option)group.getOption(t,    options);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
127	[BUG]  [BUGGY]  Option  option  =(Option)options.get(group);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.get(group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.get(group);	  Option    option    =(Option)options.next();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
128	[BUG]  [BUGGY]  Option  opt  =  options.getOptionGroups().iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOptionGroups().iterator();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOptionGroups().iterator();	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
129	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  eatTheRest);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  eatTheRest);	  Option    option    =(Option)group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
130	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(options,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(options,  null);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(options,  null);	  Option    option    =(Option)group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
131	[BUG]  [BUGGY]  Option  option  =  group.getOption(options,  eatTheRest);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(options,  eatTheRest);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(options,  eatTheRest);	  Option    option    =    group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
132	[BUG]  [BUGGY]  Option  option  =  opt.getOption(options,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  opt.getOption(options,  stopAtNonOption);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  opt.getOption(options,  stopAtNonOption);	  Option    option    =    group.getOption(options,    stopAtNonOption);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
133	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.getOption();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.getOption();	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(str,  options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(str,  options);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
135	[BUG]  [BUGGY]  Option  option  =  opt.getOptionGroups();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  opt.getOptionGroups();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  opt.getOptionGroups();	  Option    option    =    options.getOptionGroups();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
136	[BUG]  [BUGGY]  Option  option  =(Option)opt.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)opt.next();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)opt.next();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
137	[BUG]  [BUGGY]  options.add(group,  stopAtNonOption);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.add(group,  stopAtNonOption);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.add(group,  stopAtNonOption);	  options.add(group);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
138	[BUG]  [BUGGY]  options.addOption(group,  t);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.addOption(group,  t);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.addOption(group,  t);	  options.addOption(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
139	[BUG]  [BUGGY]  options.addOption(group,  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  options.addOption(group,  str);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	options.addOption(group,  str);	  options.addOption(group);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
140	[BUG]  [BUGGY]  if(options!=  null)  {  setOptions(options,  group);  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(options!=  null)  {  setOptions(options,  group);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(options!=  null)  {  setOptions(options,  group);  }	  if(options!=    null)    {    setOptions(options,    group);    }    else    {    requiredOptions.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
141	[BUG]  [BUGGY]  OptionGroup  optionGroup  =  options.getOptionGroup(group);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionGroup  optionGroup  =  options.getOptionGroup(group);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionGroup  optionGroup  =  options.getOptionGroup(group);	  if(options!=    null)    {    setOptions(options,    group);    }    else    {    requiredOptions.add(group);    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
142	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  str,  options);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(t,  str,  options);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(t,  str,  options);	  Option    option    =    group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
143	[BUG]  [BUGGY]  Option  option  =  group.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  group.getOption(t,  block);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  group.getOption(t,  block);	  Option    option    =    group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
144	[BUG]  [BUGGY]  Option  option  =(Option)this.options.getOption(group);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)this.options.getOption(group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)this.options.getOption(group);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
145	[BUG]  [BUGGY]  Option  option  =(Option)options.getOption(t);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)options.getOption(t);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)options.getOption(t);	  Option    option    =(Option)options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
146	[BUG]  [BUGGY]  Option  option  =  options.getOption(group,  t,  str);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(group,  t,  str);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(group,  t,  str);	  Option    option    =    options.getOption(group,    t);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
147	[BUG]  [BUGGY]  OptionOption  option  =  options.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOption(t,  block);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOption(t,  block);	  OptionOption    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
148	[BUG]  [BUGGY]  Option  option  =(Option)group.getOption(t,  argument);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.getOption(t,  argument);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.getOption(t,  argument);	  Option    option    =(Option)group.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
149	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  group.addOption(option  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)it.next();  group.addOption(option  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)it.next();  group.addOption(option	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
150	[BUG]  [BUGGY]  OptionOption  option  =  options.getOptionGroups().iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  OptionOption  option  =  options.getOptionGroups().iterator();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	OptionOption  option  =  options.getOptionGroups().iterator();	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setSelected(null);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
151	[BUG]  [BUGGY]  Option  option  =(Option)it.next();  group.setOption  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)it.next();  group.setOption  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)it.next();  group.setOption	  if(options!=    null)    {    setOptions(options);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.setOption    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
152	[BUG]  [BUGGY]  Option  option  =  options.getOption(str,  group);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(str,  group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(str,  group);	  Option    option    =    options.getOption(t,    group);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
153	[BUG]  [BUGGY]  Option  option  =  options.getOptionGroup(group.getName()).iterator();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOptionGroup(group.getName()).iterator();  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOptionGroup(group.getName()).iterator();	  Option    option    =    options.getOptionGroups().iterator();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
154	[BUG]  [BUGGY]  Option  option  =(Option)group.get();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)group.get();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)group.get();	  Option    option    =(Option)group.next();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
155	[BUG]  [BUGGY]  Option  opt  =  options.getOption(group,  str);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  opt  =  options.getOption(group,  str);  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  opt  =  options.getOption(group,  str);	  Option    opt    =    options.getOption(group);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
156	[BUG]  [BUGGY]  Option  option  =  options.getOption(t,  block);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  options.getOption(t,  block);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  options.getOption(t,  block);	  Option    option    =    options.getOption(t,    str);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
157	[BUG]  [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  setOptions(options);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(arguments!=  null  &&  arguments.length  ==  0)  {  setOptions(options);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(arguments!=  null  &&  arguments.length  ==  0)  {  setOptions(options);  }	  if(arguments!=    null    ||    arguments.length    ==    0)    {    setOptions(options);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
158	[BUG]  [BUGGY]  if(opts!=  null)  {  setOptions(opts);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(opts!=  null)  {  setOptions(opts);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(opts!=  null)  {  setOptions(opts);  }	  if(options!=    null)    {    setOptions(opts);    }    else    {    for(Iterator    it    =    options.getOptionGroups().iterator();    it.hasNext();)    {    Option    option    =(Option)it.next();    group.addOption(option);    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
159	[BUG]  [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  setOptions(options);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  if(arguments  ==  null  ||  arguments.length!=  0)  {  setOptions(options);  }  [BUGGY]        cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	if(arguments  ==  null  ||  arguments.length!=  0)  {  setOptions(options);  }	  if(arguments    ==    null    ||    arguments.length    ==    0)    {    setOptions(options);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
160	[BUG]  [BUGGY]  Option  option  =(Option)block.next();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =(Option)block.next();  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =(Option)block.next();	  Option    option    =(Option)it.next();    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
161	[BUG]  [BUGGY]  Option  option  =  t.getOption(options,  group);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      }  for  (Iterator  it  =  options.getOptionGroups().iterator();  it.hasNext();)  {  OptionGroup  group  =  (OptionGroup)  it.next();  group.setSelected(null);  }        [BUGGY]  Option  option  =  t.getOption(options,  group);  [BUGGY]      setOptions(options);  cmd  =  new  CommandLine();  boolean  eatTheRest  =  false;  if  (arguments  ==  null)  {  arguments  =  new  String[0];  }  [CLASS]  Parser  [METHOD]  parse  [RETURN_TYPE]  CommandLine  Options  options  String[]  arguments  Properties  properties  boolean  stopAtNonOption  [VARIABLES]  Options  options  opts  CommandLine  cmd  boolean  eatTheRest  stopAtNonOption  OptionGroup  group  Iterator  it  List  requiredOptions  tokenList  Option  opt  String[]  arguments  String  str  t  Properties  properties  ListIterator  iterator  	projects/Cli28/src/java/org/apache/commons/cli/Parser.java	0.25	161	161	1	replace	Option  option  =  t.getOption(options,  group);	  Option    option    =    t.getOption(options);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
