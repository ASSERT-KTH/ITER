bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	45	None	replace
2	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	45	None	replace
3	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	45	None	replace
4	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	45	None	replace
5	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	45	None	replace
6	[BUG]  [BUGGY]  if(var!=  null  ||  var.isLocal())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.isLocal())  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
7	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isLocal())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.isLocal())  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
8	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  ||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  ||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  ||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
9	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isLocal())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isLocal())  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
10	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
11	[BUG]  [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.isLocal())  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
12	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "name "))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "name "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "name "))  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
16	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "null "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "null "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "null "))  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
17	[BUG]  [BUGGY]  if(var!=  null  ||  var.isUnreferenced())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.isUnreferenced())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.isUnreferenced())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
18	[BUG]  [BUGGY]  if(var  ==  null  &&  var.isUnreferenced())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.isUnreferenced())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.isUnreferenced())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
19	[BUG]  [BUGGY]  if(var!=  null  &&  var.isFunction())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isFunction())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isFunction())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
20	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  ||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  ||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  ||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
21	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  ||  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  ||  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  ||  isPropertyAssign)  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
22	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
23	[BUG]  [BUGGY]  if(!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  if(referenced  ==  null  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(referenced  ==  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(referenced  ==  null  &&!referenced.contains(var))  {	  if(referenced    ==    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
28	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {	  if(lastArg    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	58	None	replace
29	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  lastArg.getType()  ==  Token.VAR)  {	  if(lastArg    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	58	None	replace
30	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(lastArg    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	58	None	replace
31	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  isPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
32	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  isPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
33	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  hasPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  hasPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  hasPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
34	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||!referenced.contains(var)&&  isPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
35	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
36	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
37	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
38	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  lastArg.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
39	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.NAME)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
40	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
41	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
42	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()!=  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  >=  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  >=  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  >=  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
44	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
45	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)||  isPropertyAssign)  {	  if(!referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	12	None	replace
46	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)||  isPropertyAssign)  {	  if(!referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	12	None	replace
47	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)||  isPropertyAssign)  {	  if(!referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	12	None	replace
48	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)||  isPropertyAssign)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)||  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)||  isPropertyAssign)  {	  if(!referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	12	None	replace
49	[BUG]  [BUGGY]  if(!referenced.contains(var)||  isPropertyAssign  ||  preserveFunctionExpressionNames)  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  isPropertyAssign  ||  preserveFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  isPropertyAssign  ||  preserveFunctionExpressionNames)  {	  if(!referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	12	None	replace
50	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
52	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
53	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
54	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(lastArg!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	62	None	replace
55	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(lastArg!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	62	None	replace
56	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
57	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(lastArg);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(lastArg);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(lastArg);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
58	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
59	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(v);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(v);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(v);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
60	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(p);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(p);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(p);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
61	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c  ==  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
62	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  if(var!=    null    ||!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  if(var  >=  null  &&!referenced.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  &&!referenced.contains(var)&&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  &&!referenced.contains(var)&&  isPropertyAssign)  {	  if(var!=    null    ||!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)||    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)||    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	1	None	replace
66	[BUG]  [BUGGY]  if(!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {	  if(!referenced.contains(var)||    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	1	None	replace
67	[BUG]  [BUGGY]  if(!referenced.contains(var)||  var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)||    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	1	None	replace
68	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
69	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
70	[BUG]  [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getName()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||!referenced.contains(var.getName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
71	[BUG]  [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var.getQualifiedName()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var.getQualifiedName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&!referenced.contains(var.getQualifiedName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
72	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
73	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
74	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
75	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
76	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
77	[BUG]  [BUGGY]  if(var!=  null  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
78	[BUG]  [BUGGY]  if(referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
79	[BUG]  [BUGGY]  if(var  ==  null  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
80	[BUG]  [BUGGY]  if(var!=  null  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
81	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(var!=    null    ||!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	27	None	replace
82	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
83	[BUG]  [BUGGY]  For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
85	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
86	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  break;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
87	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  throw  new  IllegalArgumentException( " ");  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
88	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  if(var!=    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	7	None	replace
89	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  hasPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  hasPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  hasPropertyAssign)  {	  if(var!=    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	7	None	replace
90	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  isUnreferencedFunctionExpressionNames)  {	  if(var!=    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	7	None	replace
91	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	5	None	replace
92	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(var    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	5	None	replace
93	[BUG]  [BUGGY]  Node  lastArg  =  var!=  null?  var.getLastChild()  :  var.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var!=  null?  var.getLastChild()  :  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var!=  null?  var.getLastChild()  :  var.getNext();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
94	[BUG]  [BUGGY]  Node  lastArg  =  var.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getFirstChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getFirstChild();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
95	[BUG]  [BUGGY]  Node  lastArg  =  var.getType()  ==  Token.FUNCTION?  var.getLastChild()  :  var.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getType()  ==  Token.FUNCTION?  var.getLastChild()  :  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getType()  ==  Token.FUNCTION?  var.getLastChild()  :  var.getNext();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
96	[BUG]  [BUGGY]  Node  lastArg  =  var.getType()  ==  Token.NAME?  var.getLastChild()  :  var.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getType()  ==  Token.NAME?  var.getLastChild()  :  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getType()  ==  Token.NAME?  var.getLastChild()  :  var.getNext();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
97	[BUG]  [BUGGY]  Node  lastArg  =  var.getType()  ==  Token.VAR?  var.getLastChild()  :  var.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getType()  ==  Token.VAR?  var.getLastChild()  :  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getType()  ==  Token.VAR?  var.getLastChild()  :  var.getNext();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
98	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {	  if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
99	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getLastChild()  +  1;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getLastChild()  +  1;	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
100	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.FUNCTION;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.FUNCTION;	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
101	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild().getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getLastChild().getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getLastChild().getNext();	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
102	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild()  ||  var.getType()!=  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getLastChild()  ||  var.getType()!=  Token.FUNCTION;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getLastChild()  ||  var.getType()!=  Token.FUNCTION;	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
103	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.VAR;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.VAR;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.VAR;	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
104	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.add(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.add(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.add(var))  {	  if(var!=    null    &&!referenced.add(var))    {    	non-compiled	[CE]  	59	None	replace
105	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.isEmpty())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.isEmpty())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.isEmpty())  {	  if(var!=    null    &&!referenced.add(var))    {    	non-compiled	[CE]  	59	None	replace
106	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
107	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
108	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCode  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCode  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCode	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
109	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.report  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.report  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.report	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
110	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCode  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCode  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCode	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
111	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.re  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.re  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.re	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
112	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.report  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.report  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.report	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
113	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    	non-compiled	[CE]  	6	None	replace
114	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    	non-compiled	[CE]  	6	None	replace
115	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    	non-compiled	[CE]  	6	None	replace
116	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  &&  var.getType()!=  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    	non-compiled	[CE]  	6	None	replace
117	[BUG]  [BUGGY]  if(!referenced.contains(var)||  mayHaveSecondarySideEffects)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  mayHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  mayHaveSecondarySideEffects)  {	  if(!referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
118	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  if(!referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
119	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  if(!referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
120	[BUG]  [BUGGY]  if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
121	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
122	[BUG]  [BUGGY]  if(var!=  null)  {  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
123	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  if(var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  if(var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION)  {  if(var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
124	[BUG]  [BUGGY]  if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
125	[BUG]  [BUGGY]  if(var!=  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  throw  new  IllegalArgumentException( " ");  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
126	[BUG]  [BUGGY]  lastArg  =  var.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getNext();	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    lastArg    =    c.getNext();    }    	non-compiled	[CE]  	49	None	replace
127	[BUG]  [BUGGY]  lastArg  =  c.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  c.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  c.getNext();	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    lastArg    =    c.getNext();    }    	non-compiled	[CE]  	49	None	replace
128	[BUG]  [BUGGY]  lastArg  =  c.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  c.getLastChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  c.getLastChild();	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    lastArg    =    c.getNext();    }    	non-compiled	[CE]  	49	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkState(lastArg!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(lastArg!=  null);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(lastArg!=  null);	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    lastArg    =    c.getNext();    }    	non-compiled	[CE]  	49	None	replace
130	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null);	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
132	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
133	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
134	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
135	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.VAR);	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
137	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var.getType()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
138	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var.getType()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var.getType()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
139	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var.getName()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var.getName()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
140	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var.getType())||!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var.getType())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var.getType())||!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
141	[BUG]  [BUGGY]  For(Node  var  =  lastArg;  c!=  null;  c  =  var.getNext())  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  var  =  lastArg;  c!=  null;  c  =  var.getNext())  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  var  =  lastArg;  c!=  null;  c  =  var.getNext())  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
142	[BUG]  [BUGGY]  For(Node  var  =  lastArg;  c!=  null;  c  =  var.getNext())  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  var  =  lastArg;  c!=  null;  c  =  var.getNext())  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  var  =  lastArg;  c!=  null;  c  =  var.getNext())  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION);	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null,  var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null,  var.getType()  ==  Token.FUNCTION);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null,  var.getType()  ==  Token.FUNCTION);	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
145	[BUG]  [BUGGY]  parentScope.removeChild(lastArg);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  parentScope.removeChild(lastArg);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	parentScope.removeChild(lastArg);	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
146	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.containsKey(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.containsKey(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.containsKey(var))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
147	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.containsKey(var.getString()))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
148	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.containsKey(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.containsKey(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.containsKey(var))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
149	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.toString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.toString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.containsKey(var.toString()))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
150	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.name))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.name))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.containsKey(var.name))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
151	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.getQualifiedName()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.getQualifiedName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.containsKey(var.getQualifiedName()))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
152	[BUG]  [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
153	[BUG]  [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
154	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
155	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
156	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
157	[BUG]  [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var.getType())||!referenced.contains(var.getString()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&!referenced.contains(var.getType())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&!referenced.contains(var.getType())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
158	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()!=  Token.FUNCTION)  {	  if(var!=    null    ||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	16	None	replace
159	[BUG]  [BUGGY]  if(var  >=  null  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    ||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	16	None	replace
160	[BUG]  [BUGGY]  if(!referenced.contains(var)||  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()!=    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	42	None	replace
161	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()!=    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	42	None	replace
162	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()!=    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	42	None	replace
163	[BUG]  [BUGGY]  if(var  >=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(var    ==    null    ||!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	30	None	replace
164	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
165	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
166	[BUG]  [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getType()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
167	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
168	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
169	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
170	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
171	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.NAME);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
172	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.NAME);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.NAME);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.NAME);	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
174	[BUG]  [BUGGY]  argList.removeChild(var.getString());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  argList.removeChild(var.getString());  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	argList.removeChild(var.getString());	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
175	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
176	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  compiler.reportCodeChange();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  compiler.reportCodeChange();  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
177	[BUG]  [BUGGY]  argList.addChildToFront(var);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  argList.addChildToFront(var);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	argList.addChildToFront(var);	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
178	[BUG]  [BUGGY]  argList.removeChild(var.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  argList.removeChild(var.getLastChild());  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	argList.removeChild(var.getLastChild());	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
179	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
180	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	3	None	replace
181	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
182	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()!=  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
183	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(int  i  =  0;  i  <  var.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
184	[BUG]  [BUGGY]  if(var  ==  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var))    {    	non-compiled	[CE]  	36	None	replace
185	[BUG]  [BUGGY]  if(var!=  null  ||  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var))    {    	non-compiled	[CE]  	36	None	replace
186	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  lastArg.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  lastArg.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  isPropertyAssign  &&  lastArg.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var))    {    	non-compiled	[CE]  	36	None	replace
187	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var))    {    	non-compiled	[CE]  	36	None	replace
188	[BUG]  [BUGGY]  if(lastArg!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(lastArg    ==    null    ||!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	61	None	replace
189	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	29	None	replace
190	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	29	None	replace
191	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	44	None	replace
192	[BUG]  [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	44	None	replace
193	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	44	None	replace
194	[BUG]  [BUGGY]  if(var!=  null  &&  var!=  null  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var!=  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var!=  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
195	[BUG]  [BUGGY]  if(var  ==  null  &&  lastArg!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  lastArg!=  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  lastArg!=  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
196	[BUG]  [BUGGY]  if(var!=  null  ||  lastArg!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  lastArg!=  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  lastArg!=  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
197	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg  ==  null  &&!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg  ==  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg  ==  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
198	[BUG]  [BUGGY]  if(var!=  null  &&  parentScope!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  parentScope!=  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  parentScope!=  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
199	[BUG]  [BUGGY]  For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
201	[BUG]  [BUGGY]  For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
204	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	4	None	replace
205	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  lastArg.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	4	None	replace
206	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  lastArg.getType()  ==  Token.VAR)  {	  if(var!=    null    &&!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	4	None	replace
207	[BUG]  [BUGGY]  if(arg!=  null  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(arg!=  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(arg!=  null  &&!referenced.contains(var))  {	  if(argList!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
208	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(var!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	28	None	replace
209	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
210	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  var  =  var.getNext();  if(var.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  var  =  var.getNext();  if(var.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  var  =  var.getNext();  if(var.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
211	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  continue;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  continue;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  continue;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
212	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
213	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
214	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  final  Var  var  =  var.getNext();  if(var.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  final  Var  var  =  var.getNext();  if(var.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  final  Var  var  =  var.getNext();  if(var.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
215	[BUG]  [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getLineno()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||!referenced.contains(var.getLineno()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getLineno()))    {    	non-compiled	[CE]  	32	None	replace
216	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getLineno()))    {    	non-compiled	[CE]  	32	None	replace
217	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getLineno()))    {    	non-compiled	[CE]  	32	None	replace
218	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)||!referenced.contains(var))  {	  if(var!=    null    &&!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	60	None	replace
219	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var)||!referenced.contains(var))  {	  if(var!=    null    &&!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	60	None	replace
220	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var))  {	  if(var!=    null    &&!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	60	None	replace
221	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)||!referenced.contains(var))  {	  if(var!=    null    &&!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	60	None	replace
222	[BUG]  [BUGGY]  if(var  >=  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  &&!referenced.contains(var)||!referenced.contains(var))  {	  if(var!=    null    &&!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	60	None	replace
223	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var.getString()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
224	[BUG]  [BUGGY]  if(var  ==  null  &&!referenced.contains(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
225	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
226	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
227	[BUG]  [BUGGY]  lastArg  =  var.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getFirstChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getFirstChild();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
228	[BUG]  [BUGGY]  lastArg  =  var.getLastChild()  +  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getLastChild()  +  1;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getLastChild()  +  1;	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
229	[BUG]  [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.FUNCTION;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.FUNCTION;	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
230	[BUG]  [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getLastChild()  ||  var.getFirstChild().getType()  ==  Token.FUNCTION;	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
231	[BUG]  [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.VAR;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.VAR;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getLastChild()  ||  var.getType()  ==  Token.VAR;	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
232	[BUG]  [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getType()!=  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getLastChild()  ||  var.getType()!=  Token.FUNCTION;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getLastChild()  ||  var.getType()!=  Token.FUNCTION;	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
233	[BUG]  [BUGGY]  if(var!=  null  ||  var.scope!=  scope)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.scope!=  scope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.scope!=  scope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
234	[BUG]  [BUGGY]  if(var  ==  null  &&  var.scope!=  scope)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var.scope!=  scope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var.scope!=  scope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
235	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope  ==  scope)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope  ==  scope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope  ==  scope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
236	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  targetScope)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  targetScope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  targetScope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
237	[BUG]  [BUGGY]  if(var  ==  null  ||  var.scope!=  scope)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.scope!=  scope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.scope!=  scope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
238	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg!=  scope)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg!=  scope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg!=  scope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
239	[BUG]  [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	For(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null);  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
241	[BUG]  [BUGGY]  parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
242	[BUG]  [BUGGY]  parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
243	[BUG]  [BUGGY]  Node  lastArg  =  var.getLastChild();  for(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getLastChild();  for(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getLastChild();  for(Node  c  =  lastArg;  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
244	[BUG]  [BUGGY]  parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	parentScope.removeChild(lastArg);  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.re	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
245	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
246	[BUG]  [BUGGY]  if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME)  {  return;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null)  {  if(var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
247	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
248	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  if(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION)  {  return;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  if(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  if(var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.FUNCTION)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
249	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
250	[BUG]  [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||  var.getType()  ==  Token.FUNCTION  ||  referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
251	[BUG]  [BUGGY]  if(var!=  null  &&  var  ==  null  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var  ==  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var  ==  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
252	[BUG]  [BUGGY]  if(var  ==  null  &&  var!=  null  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  &&  var!=  null  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  &&  var!=  null  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
253	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
254	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(var);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(var);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
255	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(lastArg);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(lastArg);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(lastArg);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChil  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChil  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChil	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.remov  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.remov  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.remov	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
258	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(v);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(v);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(v);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
260	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.add(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.add(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.add(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	28	None	replace
261	[BUG]  [BUGGY]  if(var  [Delete]  null  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  [Delete]  null  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  [Delete]  null  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    ||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	16	None	replace
262	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  preserveFunctionExpressionNames)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  preserveFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  preserveFunctionExpressionNames)  {	  if(var!=    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	7	None	replace
263	[BUG]  [BUGGY]  lastArg  =  fnScope.getVar(var.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  fnScope.getVar(var.getString());  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  fnScope.getVar(var.getString());	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    lastArg    =    c.getNext();    }    	non-compiled	[CE]  	49	None	replace
264	[BUG]  [BUGGY]  if(referenced.contains(var)||!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(referenced.contains(var)||!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(referenced.contains(var)||!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
265	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
266	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeCh  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeCh  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeCh	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
267	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  this)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  this)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  this)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
268	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  baseScope)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  baseScope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  baseScope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
269	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  nameNode)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  nameNode)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  nameNode)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
270	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isLocal())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isLocal())  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
271	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var.getType()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var.getType()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
272	[BUG]  [BUGGY]  Node  lastArg  =  argList.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  argList.getLastChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  argList.getLastChild();	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
273	[BUG]  [BUGGY]  Node  lastArg  =  var.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.removeFirstChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.removeFirstChild();	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
274	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  preserveFunctionExpressionNames)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  preserveFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  preserveFunctionExpressionNames)  {	  if(!referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
275	[BUG]  [BUGGY]  if(var!=  null  &&!var.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!var.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!var.contains(var))  {	  if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
276	[BUG]  [BUGGY]  if(var!=  null  &&!var.isLocal())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!var.isLocal())  {	  if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
277	[BUG]  [BUGGY]  if(var!=  null  &&!var.isConstructor()  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!var.isConstructor()  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!var.isConstructor()  &&  var.getType()  ==  Token.FUNCTION)  {	  if(referenced!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	40	None	replace
278	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
279	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.containsKey(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.containsKey(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.containsKey(var))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
280	[BUG]  [BUGGY]  if(referenced!=  null  &&!referenced.containsKey(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(referenced!=  null  &&!referenced.containsKey(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(referenced!=  null  &&!referenced.containsKey(var))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
281	[BUG]  [BUGGY]  if(var  >=  null  &&!referenced.containsKey(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  &&!referenced.containsKey(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  &&!referenced.containsKey(var))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
282	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isConstructor())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isConstructor())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isConstructor())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
283	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.hasChildren())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.hasChildren())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.hasChildren())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
284	[BUG]  [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  &&!referenced.contains(var)||!referenced.contains(var))  {	  if(var!=    null    &&!referenced.contains(var)||!referenced.contains(var))    {    	non-compiled	[CE]  	60	None	replace
285	[BUG]  [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.add(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!referenced.contains(var)&&!referenced.add(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!referenced.contains(var)&&!referenced.add(var.getString()))  {	  if(var    ==    null    ||!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	30	None	replace
286	[BUG]  [BUGGY]  if(var  >=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(var!=    null    ||!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	27	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.isFunction());  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.isFunction());	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	51	None	replace
288	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isUnreferenced())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isUnreferenced())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isUnreferenced())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
289	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isUnreferenced())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isUnreferenced())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isUnreferenced())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
290	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.isUnreferenced())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.isUnreferenced())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.isUnreferenced())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
291	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
292	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
293	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  nextArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  nextArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  nextArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
294	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
295	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
296	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.GETPROP)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.getType()  ==  Token.GETPROP)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
297	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.isConstructor())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.isConstructor())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  ||  var.isConstructor())  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
298	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  compiler.reportCodeChange();  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
299	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  compiler.reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  compiler.reportCodeChange();  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
300	[BUG]  [BUGGY]  if(var!=  null  ||!var.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  ||!var.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  ||!var.contains(var))  {	  if(referenced    ==    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
301	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
302	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.BLOCK);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.BLOCK);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.BLOCK);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
303	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
304	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME,  referenced);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME,  referenced);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME,  referenced);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
305	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  lastArg.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  lastArg.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  lastArg.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
306	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getLineno()))    {    	non-compiled	[CE]  	32	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
308	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getLastChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getLastChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  var.getLastChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  continue;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
312	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
313	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  lastArg.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  lastArg.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  lastArg.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
314	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  arg  =  var.getFirstChild();  arg!=  null;  c  =  arg.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  arg  =  var.getFirstChild();  arg!=  null;  c  =  arg.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  arg  =  var.getFirstChild();  arg!=  null;  c  =  arg.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
315	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  canHaveSecondarySideEffects)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  canHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  canHaveSecondarySideEffects)  {	  if(var    ==    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	10	None	replace
316	[BUG]  [BUGGY]  Node  lastArg  =  var  ==  null?  var.getLastChild()  :  var.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var  ==  null?  var.getLastChild()  :  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var  ==  null?  var.getLastChild()  :  var.getNext();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
317	[BUG]  [BUGGY]  Node  lastArg  =  var!=  null?  var.getNext()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var!=  null?  var.getNext()  :  null;  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var!=  null?  var.getNext()  :  null;	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
318	[BUG]  [BUGGY]  Node  lastArg  =  var!=  null?  var.getFirstChild()  :  var.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var!=  null?  var.getFirstChild()  :  var.getNext();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var!=  null?  var.getFirstChild()  :  var.getNext();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
319	[BUG]  [BUGGY]  if(var!=  null  &&  lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(lastArg!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	62	None	replace
320	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(lastArg!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	62	None	replace
321	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChil  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChil  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChil	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
323	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  lastArg.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  lastArg.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  lastArg.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
324	[BUG]  [BUGGY]  if(var!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(Node  c  =  argList.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLas  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLas  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLas	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastCh  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastCh  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Preconditions.checkState(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastCh	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
327	[BUG]  [BUGGY]  if(lastArg!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(lastArg    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	58	None	replace
328	[BUG]  [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(lastArg    ==    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	58	None	replace
329	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  mayHaveSecondarySideEffects)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
330	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  lastArg)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  lastArg)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&  lastArg)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
331	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var))  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
332	[BUG]  [BUGGY]  if(var!=  null  &&!isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var))    {    	non-compiled	[CE]  	36	None	replace
333	[BUG]  [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
334	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
335	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  >=  Token.FUNCTION);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  >=  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  >=  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
336	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.removeState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.removeState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  preconditions.removeState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
337	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  arglist.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  arglist.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  arglist.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
338	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var))  {	  if(lastArg!=    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	64	None	replace
339	[BUG]  [BUGGY]  lastArg  =  argList.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  argList.getLastChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  argList.getLastChild();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
340	[BUG]  [BUGGY]  lastArg  =  var.getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getString();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getString();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
341	[BUG]  [BUGGY]  if(var!=  null  &&  referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	3	None	replace
342	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  argList.contains(var)&&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  argList.contains(var)&&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  argList.contains(var)&&  isPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
343	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!isPropertyAssign)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!isPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	46	None	replace
344	[BUG]  [BUGGY]  if(argList!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(argList!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(argList!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(lastArg!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	62	None	replace
345	[BUG]  [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {	  if(lastArg!=    null    &&!referenced.contains(var)&&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	62	None	replace
346	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&  isPropertyAssign)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  scope  &&  isPropertyAssign)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
347	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  getScope())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  getScope())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  getScope())  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
348	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&  parentScope!=  fnScope)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&  parentScope!=  fnScope)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  scope  &&  parentScope!=  fnScope)  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
349	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&  var.hasChildren())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&  var.hasChildren())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  scope  &&  var.hasChildren())  {	  if(var!=    null    &&    var.scope!=    scope)    {    	non-compiled	[CE]  	66	None	replace
350	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isExtern())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isExtern())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isExtern())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
351	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.CALL)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
352	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	13	None	replace
353	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {	  if(var    ==    null)    {    	non-compiled	[CE]  	43	None	replace
354	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.BLOCK)  {	  if(var    ==    null)    {    	non-compiled	[CE]  	43	None	replace
355	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()!=  Token.NAME)  {	  if(var    ==    null)    {    	non-compiled	[CE]  	43	None	replace
356	[BUG]  [BUGGY]  if(!referenced.contains(var)||  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)||  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)||  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION)  {	  if(!referenced.contains(var)||    isPropertyAssign)    {    	non-compiled	[CE]  	12	None	replace
357	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var.getQualifiedName()))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var.getQualifiedName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var.getQualifiedName()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
358	[BUG]  [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var.getString()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  &&!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
359	[BUG]  [BUGGY]  if(argList!=  null  &&!referenced.contains(var.getString()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(argList!=  null  &&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(argList!=  null  &&!referenced.contains(var.getString()))  {	  if(var!=    null    &&!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	34	None	replace
360	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.GETPROP)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.GETPROP)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.GETPROP)  {	  if(var!=    null    ||    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	16	None	replace
361	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.remove(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.remove(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.remove(var))  {	  if(var!=    null    &&!referenced.add(var))    {    	non-compiled	[CE]  	59	None	replace
362	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  argList.removeChild(var);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  argList.removeChild(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  argList.removeChild(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
363	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.BLOCK);  argList.removeChild(var);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.BLOCK);  argList.removeChild(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.BLOCK);  argList.removeChild(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
364	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  argList.removeChild(var);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  argList.removeChild(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  argList.removeChild(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
365	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  argList.addChildToFront(var);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  argList.addChildToFront(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  argList.addChildToFront(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
366	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  argList.removeChild(var);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  argList.removeChild(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  argList.removeChild(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
367	[BUG]  [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  argList.addChildToFront(var);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  argList.addChildToFront(var);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  argList.removeChild(var);  }  else  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  argList.addChildToFront(var);  }	  argList.removeChild(var);    	non-compiled	[CE]  	53	None	replace
368	[BUG]  [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  ==  null  ||  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.NAME)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
369	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  return;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  return;  }	  if(var!=    null)    {    if(var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    return;    }    	non-compiled	[CE]  	52	None	replace
370	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  ||  var.getType()!=  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()!=    Token.VAR)    {    	non-compiled	[CE]  	6	None	replace
371	[BUG]  [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  argList.getFirstChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  argList.getFirstChild();	  Node    lastArg    =    var.getLastChild();    	non-compiled	[CE]  	19	None	replace
372	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
373	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
374	[BUG]  [BUGGY]  if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
375	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
376	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  compiler.reportCodeChange();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
377	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
378	[BUG]  [BUGGY]  if(var!=  null  &&  var.isFunction())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isFunction())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isFunction())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
379	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
380	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
381	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  break;  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    break;    }    	non-compiled	[CE]  	24	None	replace
382	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.getName()))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.containsKey(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.containsKey(var.getName()))  {	  if(var!=    null    &&!referenced.containsKey(var))    {    	non-compiled	[CE]  	41	None	replace
383	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	29	None	replace
384	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    ||!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	8	None	replace
385	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  mayHaveSecondarySideEffects  ||  preserveFunctionExpressionNames)  {	  if(!referenced.contains(var)&&    mayHaveSecondarySideEffects)    {    	non-compiled	[CE]  	9	None	replace
386	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	4	None	replace
387	[BUG]  [BUGGY]  argList.removeLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  argList.removeLastChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	argList.removeLastChild();	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
388	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
389	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
390	[BUG]  [BUGGY]  if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
391	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.addLastChild();  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.addLastChild();    }    	non-compiled	[CE]  	56	None	replace
392	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getLineno()))    {    	non-compiled	[CE]  	32	None	replace
393	[BUG]  [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getLineno()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getLineno()))    {    	non-compiled	[CE]  	32	None	replace
394	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
395	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
396	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnknown())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnknown())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnknown())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
397	[BUG]  [BUGGY]  if(var!=  null  &&  var.isVarArgs())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isVarArgs())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isVarArgs())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
398	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.VAR);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	21	None	replace
399	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
400	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
401	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
402	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  &&  var.getType()  ==  Token.VAR)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
403	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  isPropertyAssign)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal()  &&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal()  &&  isPropertyAssign)  {	  if(var!=    null    &&    var.isLocal())    {    	non-compiled	[CE]  	68	None	replace
404	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
405	[BUG]  [BUGGY]  if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.hasChildren())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
406	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
407	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
408	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  argList.removeChild(c);  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    argList.removeChild(c);    }    	non-compiled	[CE]  	54	None	replace
409	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
410	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&!referenced.contains(var))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  scope  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  scope  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
411	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&!referenced.contains(var))  {	  if(var!=    null    &&    lastArg!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	37	None	replace
412	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  lastArg.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&  lastArg.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
413	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  var.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  var.getType()  ==  Token.FUNCTION)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&  var.getType()  ==  Token.FUNCTION)  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
414	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  isPropertyAssign)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&  isPropertyAssign)  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
415	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  var.isLocal())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  var.isLocal())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&  var.isLocal())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
416	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  var.isVarArgs())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  var.isVarArgs())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&  var.isVarArgs())  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
417	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  NodeUtil.isFunctionObjectCall(var))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced()  &&  NodeUtil.isFunctionObjectCall(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced()  &&  NodeUtil.isFunctionObjectCall(var))  {	  if(var!=    null    &&    var.isUnreferenced())    {    	non-compiled	[CE]  	67	None	replace
418	[BUG]  [BUGGY]  lastArg  =  c.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  c.getFirstChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  c.getFirstChild();	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    lastArg    =    c.getNext();    }    	non-compiled	[CE]  	49	None	replace
419	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isVarArgs())  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isVarArgs())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.isVarArgs())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	44	None	replace
420	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.hasType())  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.hasType())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  ||  var.hasType())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	44	None	replace
421	[BUG]  [BUGGY]  if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(!referenced.contains(var)&&  var.getType()!=  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
422	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  &&  var.getType()  ==  Token.VAR)  {	  if(!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	2	None	replace
423	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var.getReferenceName()))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var.getReferenceName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var.getReferenceName()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
424	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var.getClass()))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var.getClass()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var.getClass()))  {	  if(var!=    null    &&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	35	None	replace
425	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isReferencedFunctionExpressionNames)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isReferencedFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  isReferencedFunctionExpressionNames)  {	  if(var    ==    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	10	None	replace
426	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isFunctionExpressionNames)  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isFunctionExpressionNames)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  isFunctionExpressionNames)  {	  if(var    ==    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	10	None	replace
427	[BUG]  [BUGGY]  if(argList!=  null  ||!referenced.contains(var))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(argList!=  null  ||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(argList!=  null  ||!referenced.contains(var))  {	  if(argList!=    null    &&!referenced.contains(var))    {    	non-compiled	[CE]  	57	None	replace
428	[BUG]  [BUGGY]  lastArg  =  var.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.removeFirstChild();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.removeFirstChild();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
429	[BUG]  [BUGGY]  lastArg  =  var.getPreviousSibling();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  lastArg  =  var.getPreviousSibling();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	lastArg  =  var.getPreviousSibling();	  lastArg    =    var.getLastChild();    	non-compiled	[CE]  	55	None	replace
430	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
431	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&!referenced.contains(var)&&!referenced.contains(var.getName()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getName()))    {    	non-compiled	[CE]  	63	None	replace
432	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.NAME)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
433	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "node "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "node "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "node "))  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	14	None	replace
434	[BUG]  [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&  argList.contains(var))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&  argList.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  isPropertyAssign  &&  var.getType()  ==  Token.FUNCTION  &&  argList.contains(var))  {	  if(var!=    null    &&    isPropertyAssign    &&    var.getType()    ==    Token.FUNCTION    &&!referenced.contains(var))    {    	non-compiled	[CE]  	36	None	replace
435	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
436	[BUG]  [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getType()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getType()))    {    	non-compiled	[CE]  	31	None	replace
437	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
438	[BUG]  [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(lastArg  ==  null  ||!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
439	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&!referenced.contains(var.getString())&&!referenced.contains(var.getString()))  {	  if(!referenced.contains(var)&&!referenced.contains(var.getString())||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	39	None	replace
440	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.isFunctionObject())  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.isFunctionObject())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.isFunctionObject())  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
441	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.hasChildren())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.hasChildren())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.hasChildren())  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
442	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.hasOneChild())  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.hasOneChild())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  var.hasOneChild())  {	  if(var!=    null    &&    var.getType()    ==    Token.VAR    &&    var.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  	18	None	replace
443	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  isPropertyAssign)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  isPropertyAssign)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  isPropertyAssign)  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
444	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().equals( "function "))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().equals( "function "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().equals( "function "))  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
445	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.isExtern())  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.isExtern())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  var.isExtern())  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
446	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().endsWith( "java. "))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().endsWith( "java. "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().endsWith( "java. "))  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
447	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().equals( "string "))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().equals( "string "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME  &&  lastArg.getString().equals( "string "))  {	  if(var!=    null    &&    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	17	None	replace
448	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
449	[BUG]  [BUGGY]  if(var!=  null  &&  var.isFunction())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isFunction())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isFunction())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
450	[BUG]  [BUGGY]  if(var!=  null  &&  var.isFunctionPrototype())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isFunctionPrototype())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isFunctionPrototype())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
451	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  scope)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  scope)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  scope)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
452	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.FUNCTION);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	20	None	replace
453	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
454	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
455	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnreferenced())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnreferenced())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnreferenced())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
456	[BUG]  [BUGGY]  if(var!=  null  &&  var.isUnknown())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isUnknown())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isUnknown())  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
457	[BUG]  [BUGGY]  if(var!=  null  &&  var.scope!=  scope)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.scope!=  scope)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.scope!=  scope)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Preconditions.checkState(var.getType()  ==  Token.NAME);  }	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Preconditions.checkState(var.getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	25	None	replace
458	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var)&&!referenced.contains(var.getString()))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var)&&!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  referenced.contains(var)&&!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
459	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  &&  referenced.contains(var)||!referenced.contains(var.getString()))  {	  if(referenced.contains(var)||!referenced.contains(var.getString()))    {    	non-compiled	[CE]  	38	None	replace
460	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR  ||  var.getType()  ==  Token.NAME)  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  	45	None	replace
461	[BUG]  [BUGGY]  Node  lastArg  =  var.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  Node  lastArg  =  var.getParent();  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	Node  lastArg  =  var.getParent();	  Node    lastArg    =    var.getNext();    	non-compiled	[CE]  	22	None	replace
462	[BUG]  [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isUnreferenced)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&!referenced.contains(var)&&  isUnreferenced)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&!referenced.contains(var)&&  isUnreferenced)  {	  if(var!=    null    &&!referenced.contains(var)&&    isPropertyAssign)    {    	non-compiled	[CE]  	7	None	replace
463	[BUG]  [BUGGY]  if(var  >=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var  >=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var  >=  null  &&!referenced.contains(var)&&  var.getType()  ==  Token.FUNCTION  ||  var.getType()  ==  Token.VAR)  {	  if(var!=    null    ||!referenced.contains(var)&&    var.getType()    ==    Token.FUNCTION    ||    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	3	None	replace
464	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
465	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Node  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
466	[BUG]  [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange()  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange()  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null)  {  for(int  i  =  0;  i  <  argList.size();  ++i)  {  Var  lastArg  =  var.getNext();  if(lastArg.getType()  ==  Token.FUNCTION)  {  compiler.reportCodeChange()	  if(var!=    null)    {    for(int    i    =    0;    i    <    argList.size();    ++i)    {    Node    lastArg    =    var.getNext();    if(lastArg.getType()    ==    Token.FUNCTION)    {    compiler.reportCodeChange();    }    	non-compiled	[CE]  	23	None	replace
467	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
468	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.VAR)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
469	[BUG]  [BUGGY]  if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isLocal())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
470	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.NAME)  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
471	[BUG]  [BUGGY]  if(var!=  null  &&  var.isFunction())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.isFunction())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.isFunction())  {  for(Node  c  =  var.getFirstChild();  c!=  null;  c  =  c.getNext())  {  return;  }	  if(var!=    null)    {    for(Node    c    =    var.getFirstChild();    c!=    null;    c    =    c.getNext())    {    return;    }    	non-compiled	[CE]  	50	None	replace
472	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "var "))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "var "))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.getString().equals( "var "))  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
473	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isVarArgs())  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isVarArgs())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isVarArgs())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
474	[BUG]  [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isFunctionObject())  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isFunctionObject())  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(var!=  null  &&  var.getType()  ==  Token.FUNCTION  &&  var.isFunctionObject())  {	  if(var!=    null    &&    var.getType()    ==    Token.FUNCTION    &&    var.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	15	None	replace
475	[BUG]  [BUGGY]  if(referenced!=  null  ||!referenced.contains(var))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  Node  argList  =  getFunctionArgList(function);  boolean  modifyCallers  =  modifyCallSites  &&  callSiteOptimizer.canModifyCallers(function);  if  (!modifyCallers)  {  Node  lastArg;  while  ((lastArg  =  argList.getLastChild())  !=  null)  {  Var  var  =  fnScope.getVar(lastArg.getString());      [BUGGY]  if(referenced!=  null  ||!referenced.contains(var))  {  [BUGGY]      argList.removeChild(lastArg);  compiler.reportCodeChange();  }  else  {  break;  }  }  }  else  {  callSiteOptimizer.optimize(fnScope,  referenced);  }  }  [CLASS]  RemoveUnusedVars  CallSiteOptimizer  Continuation  Assign  [METHOD]  removeUnreferencedFunctionArgs  [RETURN_TYPE]  void  Scope  fnScope  [VARIABLES]  Multimap  assignsByVar  classDefiningCalls  continuations  CallSiteOptimizer  callSiteOptimizer  AbstractCompiler  compiler  boolean  isPropertyAssign  mayHaveSecondarySideEffects  maybeAliased  modifyCallSites  modifyCallers  preserveFunctionExpressionNames  removeGlobals  Set  referenced  Scope  fnScope  parentScope  scope  Var  var  CodingConvention  codingConvention  Node  a  argList  assignNode  body  c  externs  function  lastArg  lp  n  nameNode  node  parent  root  value  List  allFunctionScopes  maybeUnreferenced  toRemove  toReplaceWithZero  SimpleDefinitionFinder  defFinder  Map  assignsByNode  	projects/Closure1/src/com/google/javascript/jscomp/RemoveUnusedVars.java	0.4472135954999579	396	396	5	replace	if(referenced!=  null  ||!referenced.contains(var))  {	  if(referenced    ==    null    ||!referenced.contains(var))    {    	non-compiled	[CE]  	65	None	replace
